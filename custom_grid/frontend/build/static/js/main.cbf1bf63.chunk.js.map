{"version":3,"sources":["Aggrid.tsx","Main.tsx","index.tsx"],"names":["g_rowdata","AgGrid","props","BtnCellRenderer","onClick","clicked","value","button_name","defaultColumnDefs","field","headerName","filter","pinned","cellRenderer","enableCellChangeFlash","resizable","width","cellRendererParams","a","console","log","find","row","client_order_id","qty_available","num","prompt","axios","get","api_url","params","username","prod","number_shares","alert","gridRef","useRef","api","refresh_sec","refresh_cutoff_sec","grid_options","index","useState","rowData","setRowData","useEffect","Streamlit","setFrameHeight","columnDefs","push","fetchAndSetData","fetchData","array","current","id_array","map","item","old_id_array","toUpdate","includes","toRemove","toAdd","applyTransactionAsync","update","remove","add","res","JSON","parse","data","timeout","interval","setInterval","setTimeout","clearInterval","error","clearTimeout","useCallback","skipHeader","allColumnIds","columnApi","getColumns","forEach","column","getId","autoSizeColumns","sizeColumnsToFit","defaultMinWidth","onGridReady","autoGroupColumnDef","useMemo","minWidth","getRowId","sideBar","toolPanels","id","labelDefault","labelKey","iconKey","toolPanel","defaultToolPanel","style","display","flexDirection","height","className","ref","rowStyle","fontSize","padding","headerHeight","rowHeight","animateRows","suppressAggFuncInHeader","gridOptions","withStreamlitConnection","args","gridoption_build","Aggrid","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cbf1bf63.chunk.js","sourcesContent":["import React, { useState, useEffect, useMemo, useRef, useCallback, StrictMode } from 'react';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport 'ag-grid-community/styles/ag-grid.css';\r\nimport 'ag-grid-community/styles/ag-theme-alpine.css';\r\nimport 'ag-grid-enterprise';\r\nimport './styles.css';\r\nimport axios from \"axios\"\r\nimport {\r\n  ComponentProps,\r\n  Streamlit,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\";\r\nimport {\r\n  ColDef,\r\n  ColGroupDef,\r\n  ColumnResizedEvent,\r\n  GetRowIdFunc,\r\n  GetRowIdParams,\r\n  Grid,\r\n  GridOptions,\r\n  GridReadyEvent,\r\n  SideBarDef,\r\n  ValueParserParams,\r\n} from 'ag-grid-community';\r\n\r\ntype Props = {\r\n  username: string,\r\n  api: string,\r\n  refresh_sec?: number,\r\n  refresh_cutoff_sec?: number,\r\n  gridoption_build?: any,\r\n  prod?: boolean,\r\n  api_url: string,\r\n  button_name: string,\r\n  grid_options?: GridOptions<any>,\r\n  index: string,\r\n}\r\n\r\nlet g_rowdata: any[] = [];\r\n\r\nconst AgGrid = (props: Props) => {\r\n\r\n  const BtnCellRenderer = (props: any) => {\r\n    const btnClickedHandler = () => {\r\n      props.clicked(props.value);\r\n    }\r\n\r\n    return (\r\n      <button onClick={btnClickedHandler}>{button_name}</button>\r\n    )\r\n  }\r\n\r\n  const defaultColumnDefs: ColDef[] = [\r\n    {\r\n      field: 'honey',\r\n      headerName: 'honey',\r\n      filter: \"agTextColumnFilter\",\r\n      pinned: 'left',\r\n      cellRenderer: 'agAnimateShowChangeCellRenderer',\r\n      enableCellChangeFlash: true,\r\n    },\r\n    {\r\n      field: '$honey',\r\n      headerName: '$honey',\r\n      resizable: true,\r\n      cellRenderer: 'agAnimateShowChangeCellRenderer',\r\n      enableCellChangeFlash: true,\r\n    },\r\n    { field: 'symbol', headerName: 'Symbol', resizable: true },\r\n    { field: 'ticker_time_frame', headerName: 'ticker_time_frame', resizable: true },\r\n    { field: 'trigname', headerName: 'trigname', resizable: true },\r\n    { field: 'datetime', headerName: 'datetime', resizable: true },\r\n    { field: 'honey_time_in_profit', headerName: 'honey_time_in_profit', resizable: true },\r\n    { field: 'filled_qty', headerName: 'filled_qty', resizable: true },\r\n    { field: 'qty_available', headerName: 'qty_available', resizable: true },\r\n    { field: 'filled_avg_price', headerName: 'filled_avg_price', resizable: true },\r\n    { field: 'limit_price', headerName: 'limit_price', resizable: true },\r\n    { field: 'cost_basis', headerName: 'cost_basis', resizable: true },\r\n    { field: 'wave_amo', headerName: 'wave_amo', resizable: true },\r\n    { field: 'status_q', headerName: 'status_q', resizable: true },\r\n    { field: 'client_order_id', headerName: 'client_order_id', resizable: true },\r\n    { field: 'origin_wave', headerName: 'origin_wave', resizable: true },\r\n    { field: 'wave_at_creation', headerName: 'wave_at_creation', resizable: true },\r\n    { field: 'sell_reason', headerName: 'sell_reason', resizable: true },\r\n    { field: 'exit_order_link', headerName: 'exit_order_link', resizable: true },\r\n    { field: 'queen_order_state', headerName: 'queen_order_state', resizable: true },\r\n    { field: 'order_rules', headerName: 'order_rules', resizable: true },\r\n    { field: 'order_rules.sellout', headerName: 'order_rules.sellout', width: 150, resizable: true },\r\n    { field: 'order_trig_sell_stop', headerName: 'order_trig_sell_stop', resizable: true },\r\n    { field: 'side', headerName: 'side', width: 70, pinned: 'right', resizable: true },\r\n    {\r\n      field: \"client_order_id\",\r\n      headerName: 'action',\r\n      width: 80,\r\n      cellRenderer: BtnCellRenderer,\r\n      cellRendererParams: {\r\n        clicked: async function (field: any) {\r\n          try {\r\n            console.log('g_rowdata.find((row) => row.client_order_id == field).qty_available :>> ', g_rowdata.find((row) => row.client_order_id == field).qty_available);\r\n            const num = prompt(`Please input number`, g_rowdata.find((row) => row.client_order_id == field).qty_available);\r\n            console.log(\"prompt\", num);\r\n            if (num == null) return;\r\n            const res = await axios.get(api_url, {\r\n              params: {\r\n                username: username,\r\n                prod: prod,\r\n                client_order_id: field,\r\n                number_shares: num,\r\n              }\r\n            })\r\n            alert(\"Success Sellorder_request!\");\r\n          } catch (error) {\r\n            alert(`${error}`);\r\n          }\r\n        },\r\n      },\r\n      pinned: 'right',\r\n    }\r\n  ];\r\n\r\n  const gridRef = useRef<AgGridReact>(null);\r\n  const { username, api, refresh_sec = 1, refresh_cutoff_sec = 0, prod = true, api_url, button_name, grid_options = {}, index } = props;\r\n  const [rowData, setRowData] = useState<any[]>([]);\r\n  const [columnDefs, setColumnDefs] = useState<(ColDef | ColGroupDef)[]>(defaultColumnDefs)\r\n  useEffect(() => {\r\n    Streamlit.setFrameHeight()\r\n    grid_options.columnDefs!.push({\r\n      field: \"client_order_id\",\r\n      headerName: 'action',\r\n      width: 80,\r\n      cellRenderer: BtnCellRenderer,\r\n      cellRendererParams: {\r\n        clicked: async function (field: any) {\r\n          try {\r\n            console.log('g_rowdata.find((row) => row.client_order_id == field).qty_available :>> ', g_rowdata.find((row) => row.client_order_id == field).qty_available);\r\n            const num = prompt(`Please input number`, g_rowdata.find((row) => row.client_order_id == field).qty_available);\r\n            console.log(\"prompt\", num);\r\n            if (num == null) return;\r\n            const res = await axios.get(api_url, {\r\n              params: {\r\n                username: username,\r\n                prod: prod,\r\n                client_order_id: field,\r\n                number_shares: num,\r\n              }\r\n            })\r\n            alert(\"Success Sellorder_request!\");\r\n          } catch (error) {\r\n            alert(`${error}`);\r\n          }\r\n        },\r\n      },\r\n      pinned: 'right',\r\n    })\r\n  });\r\n\r\n\r\n  const addIds = (array: any[]) => {\r\n    return array.map((item, idx) => {\r\n      return { ...item, idx }\r\n    })\r\n  }\r\n\r\n  const fetchAndSetData = async () => {\r\n    const array = await fetchData();\r\n    const api = gridRef.current!.api;\r\n    const id_array = array.map((item: any) => item[index])\r\n    const old_id_array = g_rowdata.map((item: any) => item[index])\r\n    const toUpdate = g_rowdata.filter((row: any) => id_array.includes(row[index]))\r\n    const toRemove = g_rowdata.filter((row) => !id_array.includes(row[index]))\r\n    const toAdd = array.filter((row: any) => !old_id_array.includes(row[index]))\r\n    api.applyTransactionAsync({ update: toUpdate, remove: toRemove, add: toAdd });\r\n    g_rowdata = array\r\n    console.log(\"index\", index);\r\n  };\r\n\r\n  const fetchData = async () => {\r\n    const res = await axios.get(api, {\r\n      params: {\r\n        username: username,\r\n        prod: prod,\r\n      }\r\n    });\r\n    const array = JSON.parse(res.data);\r\n    return array;\r\n  };\r\n\r\n  const postRowId = async (id: any) => {\r\n    const res = await axios.post(api, {\r\n      username: username,\r\n      prod: prod,\r\n      id: id,\r\n    });\r\n    return res;\r\n  };\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(fetchAndSetData, refresh_sec * 1000);\r\n    let timeout: NodeJS.Timeout;\r\n    if (refresh_cutoff_sec > 0) {\r\n      console.log(refresh_cutoff_sec);\r\n      timeout = setTimeout(() => {\r\n        clearInterval(interval);\r\n        console.log(\"Fetching data ended, refresh rate:\", refresh_sec);\r\n      }, refresh_cutoff_sec * 1000);\r\n    }\r\n    console.error(\"rendered==========\", props);\r\n    return () => {\r\n      clearInterval(interval);\r\n      if (timeout) clearTimeout(timeout);\r\n    }\r\n  }, [props]);\r\n\r\n  const autoSizeAll = useCallback((skipHeader: boolean) => {\r\n    const allColumnIds: string[] = [];\r\n    gridRef.current!.columnApi.getColumns()!.forEach((column: any) => {\r\n      allColumnIds.push(column.getId());\r\n    });\r\n    gridRef.current!.columnApi.autoSizeColumns(allColumnIds, skipHeader);\r\n  }, []);\r\n\r\n  const sizeToFit = useCallback(() => {\r\n    gridRef.current!.api.sizeColumnsToFit({\r\n      defaultMinWidth: 100,\r\n    });\r\n  }, []);\r\n\r\n  const onGridReady = useCallback(async (params: GridReadyEvent) => {\r\n    setTimeout(async () => {\r\n      const array = await fetchData();\r\n      setRowData(array);\r\n      g_rowdata = array;\r\n    }, 100);\r\n  }, []);\r\n\r\n  const autoGroupColumnDef = useMemo<ColDef>(() => {\r\n    return {\r\n      minWidth: 200,\r\n    };\r\n  }, []);\r\n\r\n  const getRowId = useMemo<GetRowIdFunc>(() => {\r\n    return (params: GetRowIdParams) => {\r\n      return params.data[index];\r\n    };\r\n  }, [index]);\r\n\r\n  const sideBar = useMemo<\r\n    SideBarDef | string | string[] | boolean | null\r\n  >(() => {\r\n    return {\r\n      toolPanels: [\r\n        {\r\n          id: 'columns',\r\n          labelDefault: 'Columns',\r\n          labelKey: 'columns',\r\n          iconKey: 'columns',\r\n          toolPanel: 'agColumnsToolPanel',\r\n        },\r\n        {\r\n          id: 'filters',\r\n          labelDefault: 'Filters',\r\n          labelKey: 'filters',\r\n          iconKey: 'filter',\r\n          toolPanel: 'agFiltersToolPanel',\r\n        },\r\n      ],\r\n      defaultToolPanel: 'customStats',\r\n    };\r\n  }, []);\r\n  return (\r\n    <div style={{ display: 'flex', flexDirection: 'row', height: '300px', width: \"100\" }} id='myGrid'>\r\n      <div className=\"ag-theme-alpine-dark\" style={{ width: \"100%\", height: \"100%\" }}>\r\n        <AgGridReact\r\n          ref={gridRef}\r\n          rowData={rowData}\r\n          // columnDefs={columnDefs}\r\n          // defaultColDef={defaultColDef}\r\n          rowStyle={{ fontSize: 12, padding: 0 }}\r\n          headerHeight={30}\r\n          rowHeight={30}\r\n          onGridReady={onGridReady}\r\n          autoGroupColumnDef={autoGroupColumnDef}\r\n          sideBar={sideBar}\r\n          animateRows={true}\r\n          suppressAggFuncInHeader={true}\r\n          getRowId={getRowId}\r\n          gridOptions={grid_options}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AgGrid;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  ComponentProps,\r\n  Streamlit,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\";\r\nimport 'ag-grid-community/styles/ag-grid.css';\r\nimport 'ag-grid-community/styles/ag-theme-alpine.css';\r\nimport Aggrid from \"./Aggrid\";\r\n\r\nconst Main = (props: ComponentProps) => {\r\n\r\n  const { username, api, refresh_sec, refresh_cutoff_sec, gridoption_build, prod } = props.args;\r\n  const { api_url, button_name, grid_options } = props.args;\r\n  const { index } = grid_options;\r\n  console.log(\"AAAAAAAA\", grid_options.index);\r\n  return (\r\n    <div >\r\n      <Aggrid\r\n        username={username}\r\n        api={api}\r\n        refresh_sec={refresh_sec}\r\n        refresh_cutoff_sec={refresh_cutoff_sec}\r\n        gridoption_build={gridoption_build}\r\n        prod={prod}\r\n        api_url={api_url}\r\n        button_name={button_name}\r\n        grid_options={grid_options}\r\n        index={index}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withStreamlitConnection(Main);\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport Main from \"./Main\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Main />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)\r\n"],"sourceRoot":""}