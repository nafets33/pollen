{"version":3,"sources":["components/Modal.tsx","utils.js","Aggrid.tsx","Main.tsx","index.tsx"],"names":["formats","sliderRules","sliderRules_stars","sliderRules_stars_margin","map","rule","concat","ReactModal","setAppElement","isExecuting","MyModal","_ref","isOpen","closeModal","modalData","promptText","setPromptText","toastr","prompt_field","prompt_order_rules","selectedRow","selectedField","showStarsSliders","setShowStarsSliders","React","useState","showStarsMarginSliders","setShowStarsMarginSliders","ref","useRef","useEffect","setTimeout","_ref$current","current","focus","isValidDate","dateStr","some","format","moment","isValid","formatToLocalDatetime","date","toDate","timeZone","Intl","DateTimeFormat","resolvedOptions","zonedDate","utcToZonedTime","textFields","booleanFields","datetimeFields","arrayFields","value","Array","isArray","push","createElement","className","style","display","prompt_message","onClick","position","right","length","index","key","marginRight","minWidth","textAlign","fontSize","type","checked","onChange","e","target","width","height","marginTop","flex","includes","isSliderRule","marginLeft","cursor","title","Fragment","min","max","step","Number","fontWeight","padding","item","i","marginBottom","prev","undefined","current_ask","toLocaleString","maximumFractionDigits","ticker_total_budget","star_buys_at_play","ticker_remaining_budget","async","body","username","prod","selected_row","default_value","kwargs","console","log","data","res","axios","post","button_api","status","description","message_type","success","alert","error","close_modal","message","mapObject","obj","fn","keysToIgnore","Object","keys","reduce","deepMap","arguments","deepMapper","val","g_rowdata","g_newRowData","dateFormatter","isoString","formaterString","Date","currencyFormatter","number","currencySymbol","n","parseFloat","isNaN","toFixed","numberFormatter","precision","HyperlinkRenderer","props","href","column","colDef","baseURL","options","positionClass","hideDuration","timeOut","AgGrid","BtnCellRenderer","btnClickedHandler","clicked","node","id","background","border","cellStyle","col_header","buttonName","gridRef","api","api_update","refresh_sec","refresh_cutoff_sec","enable_JsCode","grid_options","parseJsCodeFromPython","buttons","toggle_views","api_key","api_lastmod_key","columnOrder","grid_type","rowData","setRowData","modalShow","setModalshow","setModalData","viewId","setViewId","lastModified","setLastModified","previousViewId","setpreviousViewId","_gridRef$current","Streamlit","setFrameHeight","forEach","button","col_headername","col_width","pinned","button_name","border_color","otherKeys","columnDefs","field","headerName","cellRenderer","cellRendererParams","borderColor","row_index","find","row","str","JSON","parse","replace","rules_value","window","confirm","sort","a","b","indexOf","refreshHeader","fetchAndSetData","array","fetchData","onRefresh","toggle_view","isLastModified","_res$data","baseurl","split","slice","join","get","params","client_user","checkLastModified","toggle_view_selection","interval","setInterval","timeout","clearInterval","clearTimeout","useCallback","skipHeader","allColumnIds","columnApi","getColumns","getId","autoSizeColumns","sizeColumnsToFit","defaultMinWidth","onGridReady","autoGroupColumnDef","useMemo","getRowId","onCellValueChanged","toolPanels","labelDefault","labelKey","iconKey","toolPanel","defaultToolPanel","event","loading","setLoading","columnTypes","dateColumnFilter","filter","filterParams","comparator","filterValue","cellValue","compareAsc","numberColumnFilter","shortDateTimeFormat","valueFormatter","customDateTimeFormat","custom_format_string","customNumericFormat","_params$column$colDef2","customCurrencyFormat","custom_currency_symbol","timedeltaFormat","duration","humanize","customNumberFormat","minimumFractionDigits","customHyperlinkRenderer","v","match","RegExp","exec","funcStr","Function","buttonStyle","flexDirection","margin","backgroundColor","color","borderRadius","alignItems","justifyContent","disabled","borderTop","animation","new_data","warning","flexWrap","gap","view","gridTemplateColumns","overflowY","maxHeight","theme","AgGridReact","getRowStyle","_params$data$color_ro","_params$data$color_ro2","rowStyle","headerHeight","rowHeight","animateRows","suppressAggFuncInHeader","gridOptions","withStreamlitConnection","gridoption_build","args","Aggrid","ReactDOM","render","StrictMode","Main","document","getElementById"],"mappings":"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","file":"static/js/main.f56b2e3a.chunk.js","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport ReactModal from \"react-modal\";\nimport \"./modal.css\";\nimport axios from \"axios\";\nimport { utcToZonedTime, format } from 'date-fns-tz';\nimport moment from \"moment\";\n\nconst formats = [\"YYYY-MM-DDTHH:mm\", \"MM/DD/YYYYTHH:mm\", \"MM/DD/YYYY HH:mm\", \"YYYY-MM-DD HH:mm\"];\nconst sliderRules = [\"buying_power\", \"borrow_power\"]\nconst sliderRules_stars = [\"Day\", \"Week\", \"Month\", \"Quarter\", \"Quarters\", \"Year\"];\nconst sliderRules_stars_margin = sliderRules_stars.map(rule => `${rule} Margin`);\n\n\nconst modalStyle = {\n  content: {\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\",\n    backgroundColor: \"yellow\",\n  },\n};\n\nReactModal.setAppElement(\"#root\");\nlet isExecuting = false;\n\ninterface MyModalProps {\n  isOpen: boolean;\n  closeModal: () => void;\n  modalData: any;\n  promptText: any;\n  setPromptText: (value: any) => void;\n  toastr: any; // Define the toastr type if available\n}\n\nconst MyModal: React.FC<MyModalProps> = ({\n  isOpen,\n  closeModal,\n  modalData,\n  promptText,\n  setPromptText,\n  toastr,\n}) => {\n  const { prompt_field, prompt_order_rules, selectedRow, selectedField } = modalData;\n  // console.log(\"modalData :>> \", selectedRow);\n  const [showStarsSliders, setShowStarsSliders] = React.useState(false);\n  const [showStarsMarginSliders, setShowStarsMarginSliders] = React.useState(false);\n  \n  const ref = useRef<HTMLButtonElement>(null);\n  const selectRef = useRef<HTMLSelectElement>(null);\n\n  const handleOk = async () => {\n    if (isExecuting) return;\n    isExecuting = true;\n    try {\n      const { data: res } = await axios.post(modalData.button_api, {\n        username: modalData.username,\n        prod: modalData.prod,\n        selected_row: modalData.selectedRow,\n        default_value: promptText,\n        ...modalData.kwargs,\n      });\n      const { status, data, description } = res;\n      console.log(\"res :>> \", res);\n      if (status === \"success\") {\n        data.message_type === \"fade\"\n          ? toastr.success(description, \"Success\")\n          : alert(\"Success!\\nDescription: \" + description);\n      } else {\n        data.message_type === \"fade\"\n          ? toastr.error(description, \"Error\")\n          : alert(\"Error!\\nDescription: \" + description);\n      }\n      if (data?.close_modal != false) closeModal();\n    } catch (error: any) {\n      console.log(\"error :>> \", error);\n      toastr.error(error.message);\n    }\n    isExecuting = false;\n  };\n\n  const handleOkSecond = async () => {\n    if (isExecuting) return;\n    isExecuting = true;\n    try {\n      const body = {\n        username: modalData.username,\n        prod: modalData.prod,\n        selected_row: modalData.selectedRow,\n        default_value: promptText,\n        ...modalData.kwargs,\n      };\n      console.log(\"body :>> \", body);\n      const { data: res } = await axios.post(modalData.button_api, body);\n      const { status, data, description } = res;\n      if (status === \"success\") {\n        data.message_type === \"fade\"\n          ? toastr.success(description, \"Success\")\n          : alert(\"Success!\\nDescription: \" + description);\n      } else {\n        data.message_type === \"fade\"\n          ? toastr.error(description, \"Error\")\n          : alert(\"Error!\\nDescription: \" + description);\n      }\n      if (data?.close_modal != false) closeModal();\n    } catch (error: any) {\n      console.log(\"error :>> \", error);\n      toastr.error(error.message);\n    }\n    isExecuting = false;\n  };\n\n  const handleOkOnArray = async () => {\n    console.log(\"selectRef.current.value :>> \", selectRef.current?.value);\n    if (isExecuting) return;\n    isExecuting = true;\n    try {\n      const body = {\n        username: modalData.username,\n        prod: modalData.prod,\n        selected_row: modalData.selectedRow,\n        default_value: selectRef.current?.value,\n        ...modalData.kwargs,\n      };\n      console.log(\"body :>> \", body);\n      const { data: res } = await axios.post(modalData.button_api, body);\n      const { status, data, description } = res;\n      console.log(\"res :>> \", res);\n      if (status === \"success\") {\n        data.message_type === \"fade\"\n          ? toastr.success(description, \"Success\")\n          : alert(\"Success!\\nDescription: \" + description);\n      } else {\n        data.message_type === \"fade\"\n          ? toastr.error(description, \"Error\")\n          : alert(\"Error!\\nDescription: \" + description);\n      }\n      if (data?.close_modal != false) closeModal();\n    } catch (error: any) {\n      console.log(\"error :>> \", error);\n      toastr.error(error.message);\n    }\n    isExecuting = false;\n  };\n\n  useEffect(() => {\n    if (isOpen) setTimeout(() => ref.current?.focus(), 100);\n  }, [isOpen]);\n\n  const isValidDate = (dateStr: string) => {\n    return formats.some(format => moment(dateStr, format, true).isValid());\n  };\n\n  const formatToLocalDatetime = (dateStr: string) => {\n    const date = moment(dateStr, formats, true).toDate();\n    const timeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n    const zonedDate = utcToZonedTime(date, timeZone);\n    return format(zonedDate, 'yyyy-MM-dd\\'T\\'HH:mm');\n  };\n\n  // Categorize fields by type\n  const textFields = [];\n  const booleanFields = [];\n  const datetimeFields = [];\n  const arrayFields = [];\n\n  if (prompt_order_rules) {\n    for (const rule of prompt_order_rules) {\n      const value = promptText[rule];\n      if (Array.isArray(value)) {\n        arrayFields.push(rule);\n      } else if (typeof value === \"boolean\") {\n        booleanFields.push(rule);\n      } else if (isValidDate(value)) {\n        datetimeFields.push(rule);\n      } else {\n        textFields.push(rule);\n      }\n    }\n  }\n  \n\n  \nreturn (\n    <div className=\"my-modal\" style={{ display: isOpen ? \"block\" : \"none\" }}>\n      <div className=\"my-modal-content\">\n        {/* Modal Header */}\n        <div className=\"modal-header px-3 d-flex justify-content-center align-items-center\">\n          <h4 className=\"text-center m-0\">{modalData.prompt_message}</h4>\n          <span className=\"close\" onClick={closeModal} style={{ position: \"absolute\", right: \"20px\" }}>\n            &times;\n          </span>\n        </div>\n  \n        {/* Modal Body */}\n        <div className=\"modal-body p-3\">\n          <div className=\"d-flex flex-column\">\n            {/* Boolean Fields Top Row */}\n            {booleanFields.length > 0 && (\n              <div className=\"d-flex flex-row justify-content-between mb-2\">\n                {booleanFields.map((rule: any, index: number) => (\n                  <div className=\"d-flex flex-column align-items-center\" key={index} style={{ marginRight: \"8px\" }}>\n                    <label className=\"mb-0\" style={{ minWidth: \"100px\", textAlign: \"center\", fontSize: \"0.9rem\" }}>\n                      {rule}:\n                    </label>\n                    <input\n                      type=\"checkbox\"\n                      checked={promptText[rule]}\n                      onChange={(e) =>\n                        setPromptText({\n                          ...promptText,\n                          [rule]: e.target.checked,\n                        })\n                      }\n                      style={{ width: \"16px\", height: \"16px\", marginTop: \"4px\" }}\n                    />\n                  </div>\n                ))}\n              </div>\n            )}\n\n\n            {/* Other Fields (Text, Datetime, Array Fields) */}\n            <div className=\"d-flex flex-row justify-content-between\">\n              {/* Text Fields Column */}\n              {textFields.length > 0 && (\n                <div className=\"d-flex flex-column\" style={{ flex: 1, marginRight: \"8px\" }}>\n                  {textFields.map((rule: any, index: number) => {\n\n                  // Skip rendering if the rule is in the sliderRules_stars list\n                  if (sliderRules_stars.includes(rule)) return null;\n                  if (sliderRules_stars_margin.includes(rule)) return null;\n\n                  const isSliderRule = sliderRules.includes(rule);\n\n                  return (\n                    <div className=\"d-flex flex-column align-items-start mb-1\" key={index}>\n                    <label className=\"mb-0\" style={{ fontSize: \"0.9rem\" }}>\n                      {rule}:\n                      {rule === \"sell_amount\" && (\n                      <span\n                        style={{ marginLeft: \"4px\", cursor: \"pointer\" }}\n                        title=\"This amount will override sell_qty\"\n                      >\n                        ❓\n                      </span>\n                      )}\n                    </label>\n                    {/* Render the slider for rules that are in sliderRules but not in sliderRules_stars */}\n                    {isSliderRule ? (\n                      <>\n                      <input\n                        type=\"range\"\n                        min=\"0\"\n                        max=\"1\"\n                        step=\".01\"\n                        value={promptText[rule] || 0}\n                        onChange={(e) =>\n                        setPromptText({\n                          ...promptText,\n                          [rule]: Number(e.target.value),\n                        })\n                        }\n                        style={{ width: \"100%\" }}\n                      />\n                      <span style={{ fontSize: \"0.9rem\", fontWeight: \"bold\", marginTop: \"4px\" }}>\n                        {promptText[rule] || 0}\n                      </span>\n                      </>\n                    ) : (\n                      <input\n                      type=\"text\"\n                      value={promptText[rule]}\n                      onChange={(e) =>\n                        setPromptText({\n                        ...promptText,\n                        [rule]: e.target.value,\n                        })\n                      }\n                      style={{ flex: 1, width: \"100%\", padding: \"4px\", fontSize: \"0.9rem\" }}\n                      />\n                    )}\n                    </div>\n                  );\n                  })}\n                </div>\n              )}\n\n\n              {/* Array Fields Column */}\n              {arrayFields.length > 0 && (\n                <div className=\"d-flex flex-column\" style={{ flex: 1 }}>\n                  {arrayFields.map((rule: any, index: number) => (\n                    <div className=\"d-flex flex-column align-items-start mb-1\" key={index}>\n                      <label className=\"mb-0\" style={{ fontSize: \"0.9rem\" }}>\n                        {rule}:\n                      </label>\n                      <select\n                        value={promptText[rule][0]}\n                        onChange={(e) =>\n                          setPromptText({\n                            ...promptText,\n                            [rule]: [e.target.value],\n                          })\n                        }\n                        style={{ flex: 1, width: \"100%\", padding: \"4px\", fontSize: \"0.9rem\" }}\n                      >\n                        {promptText[rule].map((item: any, i: number) => (\n                          <option key={i} value={item}>\n                            {item}\n                          </option>\n                        ))}\n                      </select>\n                    </div>\n                  ))}\n                </div>\n              )}\n\n              {/* Expander for sliderRules_stars */}\n              {sliderRules_stars.some((rule: any) => prompt_order_rules?.includes(rule)) && (\n                <div style={{ flex: 1, marginRight: \"8px\" }}>\n                  <div\n                    style={{ cursor: \"pointer\", fontWeight: \"bold\", marginBottom: \"4px\" }}\n                    onClick={() => setShowStarsSliders((prev) => !prev)}\n                  >\n                    {showStarsSliders ? \"▼\" : \"►\"} Advanced Allocation Options\n                  </div>\n                  {showStarsSliders && (\n                    <div>\n                      {sliderRules_stars.map((rule: any, index: number) =>\n                        prompt_order_rules?.includes(rule) && promptText[rule] !== undefined && (\n                          <div className=\"d-flex flex-column align-items-start mb-1\" key={index}>\n                            <label className=\"mb-0\" style={{ fontSize: \"0.9rem\" }}>\n                              {rule}:\n                            </label>\n                            <input\n                              type=\"range\"\n                              min=\"0\"\n                              max=\"1\"\n                              step=\".01\"\n                              value={promptText[rule] || 0}\n                              onChange={(e) =>\n                                setPromptText({\n                                  ...promptText,\n                                  [rule]: Number(e.target.value),\n                                })\n                              }\n                              style={{ width: \"100%\" }}\n                            />\n                            <span style={{ fontSize: \"0.9rem\", fontWeight: \"bold\", marginTop: \"4px\" }}>\n                              {promptText[rule] || 0}\n                            </span>\n                          </div>\n                        )\n                      )}\n                    </div>\n                  )}\n                </div>\n              )}\n\n              {/* Expander for sliderRules_stars_margin */}\n              {sliderRules_stars_margin.some((rule: any) => prompt_order_rules?.includes(rule)) && (\n                <div style={{ flex: 1, marginRight: \"8px\" }}>\n                  <div\n                    style={{ cursor: \"pointer\", fontWeight: \"bold\", marginBottom: \"4px\" }}\n                    onClick={() => setShowStarsMarginSliders((prev) => !prev)}\n                  >\n                    {showStarsMarginSliders ? \"▼\" : \"►\"} Advanced Margin Allocation Options\n                  </div>\n                  {showStarsMarginSliders && (\n                    <div>\n                      {sliderRules_stars_margin.map((rule: any, index: number) =>\n                        prompt_order_rules?.includes(rule) && promptText[rule] !== undefined && (\n                          <div className=\"d-flex flex-column align-items-start mb-1\" key={index}>\n                            <label className=\"mb-0\" style={{ fontSize: \"0.9rem\" }}>\n                              {rule}:\n                            </label>\n                            <input\n                              type=\"range\"\n                              min=\"0\"\n                              max=\"1\"\n                              step=\".01\"\n                              value={promptText[rule] || 0}\n                              onChange={(e) =>\n                                setPromptText({\n                                  ...promptText,\n                                  [rule]: Number(e.target.value),\n                                })\n                              }\n                              style={{ width: \"100%\" }}\n                            />\n                            <span style={{ fontSize: \"0.9rem\", fontWeight: \"bold\", marginTop: \"4px\" }}>\n                              {promptText[rule] || 0}\n                            </span>\n                          </div>\n                        )\n                      )}\n                    </div>\n                  )}\n                </div>\n              )}\n  \n              {/* Datetime Fields Column */}\n              {datetimeFields.length > 0 && (\n                <div className=\"d-flex flex-column\" style={{ flex: 1, marginRight: \"8px\" }}>\n                  {datetimeFields.map((rule: any, index: number) => (\n                    <div className=\"d-flex flex-column align-items-start mb-1\" key={index}>\n                      <label className=\"mb-0\" style={{ fontSize: \"0.9rem\" }}>\n                        {rule}:\n                      </label>\n                      <input\n                        type=\"datetime-local\"\n                        value={promptText[rule] && formatToLocalDatetime(promptText[rule])}\n                        onChange={(e) =>\n                          setPromptText({\n                            ...promptText,\n                            [rule]: e.target.value,\n                          })\n                        }\n                        style={{ flex: 1, width: \"100%\", padding: \"4px\", fontSize: \"0.9rem\" }}\n                      />\n                    </div>\n                  ))}\n                </div>\n              )}\n  \n\n            </div>\n          </div>\n        </div>\n\n        {selectedRow && selectedRow.current_ask !== undefined && (\n          <div>\n            <b>current_ask: </b>\n            {Number(selectedRow.current_ask).toLocaleString(undefined, { maximumFractionDigits: 2 })}\n\n          </div>\n        )}\n\n        {selectedRow && selectedRow.ticker_total_budget !== undefined && (\n          <div>\n            <b>Total Budget:$ </b>\n            {Number(selectedRow.ticker_total_budget).toLocaleString(undefined, { maximumFractionDigits: 0 })}\n          </div>\n        )}\n\n        {selectedRow && selectedRow.star_buys_at_play !== undefined && (\n          <div>\n            <b>Currently Long:$ </b>\n            {Number(selectedRow.star_buys_at_play).toLocaleString(undefined, { maximumFractionDigits: 0 })}\n          </div>\n        )}\n\n        {selectedRow && selectedRow.ticker_remaining_budget !== undefined && (\n          <div>\n            <b>Remaining Budget:$ </b>\n            {Number(selectedRow.ticker_remaining_budget).toLocaleString(undefined, { maximumFractionDigits: 0 })}\n          </div>\n        )}\n\n\n        {/* Modal Footer */}\n        <div className=\"modal-footer d-flex justify-content-center\">\n          <button type=\"button\" className=\"btn btn-primary mx-2\" onClick={handleOkSecond} ref={ref}>\n            Ok\n          </button>\n          <button type=\"button\" className=\"btn btn-secondary mx-2\" onClick={closeModal}>\n            Cancel\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n  \n};\n\nexport default MyModal;\n","// stole from https://github.com/andfanilo/streamlit-echarts/blob/master/streamlit_echarts/frontend/src/utils.js Thanks andfanilo\nfunction mapObject(obj, fn, keysToIgnore) {\n    let keysToMap = Object.keys(obj)\n    return keysToMap.reduce((res, key) => {\n        if (!keysToIgnore.includes(key)) {\n            res[key] = fn(obj[key]);\n            return res\n        }\n        res[key] = obj[key];\n        return res\n\n    }, {})\n}\n\nfunction deepMap(obj, fn, keysToIgnore = []) {\n    const deepMapper = (val) =>\n        val !== null && typeof val === \"object\" ? deepMap(val, fn) : fn(val)\n    if (Array.isArray(obj)) {\n        return obj.map(deepMapper)\n    }\n    if (typeof obj === \"object\") {\n        return mapObject(obj, deepMapper, keysToIgnore)\n    }\n    return obj\n}\n\nexport { deepMap }\n","import React, {\r\n  useState,\r\n  useEffect,\r\n  useMemo,\r\n  useRef,\r\n  useCallback\r\n} from \"react\"\r\nimport { AgGridReact } from \"ag-grid-react\"\r\nimport { RowClassParams } from 'ag-grid-community';\r\n\r\nimport toastr from \"toastr\"\r\nimport \"toastr/build/toastr.min.css\"\r\nimport \"ag-grid-community/styles/ag-grid.css\"\r\nimport \"ag-grid-community/styles/ag-theme-alpine.css\"\r\nimport \"ag-grid-community/styles/ag-theme-balham.css\"\r\nimport \"ag-grid-community/styles/ag-theme-material.css\"\r\nimport MyModal from './components/Modal'\r\nimport \"ag-grid-enterprise\"\r\nimport { parseISO, compareAsc, set } from \"date-fns\"\r\nimport { format } from \"date-fns-tz\"\r\nimport { duration } from \"moment\"\r\nimport \"./styles.css\"\r\nimport axios from \"axios\"\r\nimport { io } from \"socket.io-client\";\r\n\r\nimport {\r\n  ComponentProps,\r\n  Streamlit,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\"\r\nimport {\r\n  ColDef,\r\n  ColGroupDef,\r\n  ColumnResizedEvent,\r\n  GetRowIdFunc,\r\n  GetRowIdParams,\r\n  Grid,\r\n  GridOptions,\r\n  GridReadyEvent,\r\n  SideBarDef,\r\n  ValueParserParams,\r\n} from \"ag-grid-community\"\r\nimport {deepMap} from \"./utils\"\r\n\r\n\r\ntype Props = {\r\n  username: string\r\n  api: string\r\n  api_update: string\r\n  refresh_sec?: number\r\n  refresh_cutoff_sec?: number\r\n  gridoption_build?: any\r\n  prod?: boolean\r\n  grid_options?: any\r\n  index: string\r\n  enable_JsCode: boolean\r\n  kwargs: any\r\n}\r\n\r\nlet g_rowdata: any[] = []\r\nlet g_newRowData: any = null\r\n\r\nfunction dateFormatter(isoString: string, formaterString: string): String {\r\n  try {\r\n    let date = new Date(isoString)\r\n    return format(date, formaterString)\r\n  } catch {\r\n    return isoString\r\n  } finally {\r\n  }\r\n}\r\n\r\nfunction currencyFormatter(number: any, currencySymbol: string): String {\r\n  let n = Number.parseFloat(number)\r\n  if (!Number.isNaN(n)) {\r\n    return currencySymbol + n.toFixed(2)\r\n  } else {\r\n    return number\r\n  }\r\n}\r\n\r\nfunction numberFormatter(number: any, precision: number): String {\r\n  let n = Number.parseFloat(number)\r\n  if (!Number.isNaN(n)) {\r\n    return n.toFixed(precision)\r\n  } else {\r\n    return number\r\n  }\r\n}\r\n\r\nconst columnFormaters = {\r\n  columnTypes: {\r\n    dateColumnFilter: {\r\n      filter: \"agDateColumnFilter\",\r\n      filterParams: {\r\n        comparator: (filterValue: any, cellValue: string) =>\r\n          compareAsc(parseISO(cellValue), filterValue),\r\n      },\r\n    },\r\n    numberColumnFilter: {\r\n      filter: \"agNumberColumnFilter\",\r\n    },\r\n    shortDateTimeFormat: {\r\n      valueFormatter: (params: any) =>\r\n        dateFormatter(params.value, \"dd/MM/yyyy HH:mm\"),\r\n    },\r\n    customDateTimeFormat: {\r\n      valueFormatter: (params: any) =>\r\n        dateFormatter(params.value, params.column.colDef.custom_format_string),\r\n    },\r\n    customNumericFormat: {\r\n      valueFormatter: (params: any) =>\r\n        numberFormatter(params.value, params.column.colDef.precision ?? 2),\r\n    },\r\n    customCurrencyFormat: {\r\n      valueFormatter: (params: any) =>\r\n        currencyFormatter(\r\n          params.value,\r\n          params.column.colDef.custom_currency_symbol\r\n        ),\r\n    },\r\n    timedeltaFormat: {\r\n      valueFormatter: (params: any) => duration(params.value).humanize(true),\r\n    },\r\n  },\r\n}\r\n\r\nconst HyperlinkRenderer = (props: any) => {\r\n  return (\r\n    <a\r\n      href={`${props.column.colDef.baseURL}/${\r\n        props.data[props.column.colDef[\"linkField\"]]\r\n      }`}\r\n      target=\"_blank\"\r\n    >\r\n      {props.value}\r\n    </a>\r\n  )\r\n}\r\n\r\ntoastr.options = {\r\n  positionClass: \"toast-top-full-width\",\r\n  hideDuration: 300,\r\n  timeOut: 3000,\r\n}\r\n\r\nconst AgGrid = (props: Props) => {\r\n  const BtnCellRenderer = (props: any) => {\r\n    const btnClickedHandler = () => {\r\n      props.clicked(props.node.id)\r\n    }\r\n    // console.log(\"BtnCellRenderer props\", props)\r\n    return (\r\n      <button\r\n        onClick={btnClickedHandler}\r\n        style={{\r\n          background: \"transparent\",\r\n          border: (props.cellStyle && props.cellStyle.border !== undefined)\r\n            ? props.cellStyle.border\r\n            : \"none\",          \r\n          width: props.width ? props.width : \"100%\",\r\n              ...(props.cellStyle || {}), // <-- Merge in cellStyle from params ? NOT WORKING?\r\n        }}\r\n      >\r\n        {props.col_header ? props.value : props.buttonName}\r\n      </button>\r\n    )\r\n  }\r\n\r\n  const gridRef = useRef<AgGridReact>(null)\r\n  const {\r\n    username,\r\n    api,\r\n    api_update,\r\n    refresh_sec = undefined,\r\n    refresh_cutoff_sec = 0,\r\n    prod = true,\r\n    index,\r\n    enable_JsCode,\r\n    kwargs,\r\n  } = props\r\n  let { grid_options = {} } = props\r\n\r\n  //parsing must be done here. For some unknow reason if its moved after the\r\n  //button mapping, deepMap gets lots of React objects (api, symbolRefs, etc.)\r\n  //this impacts performance and crashes the grid.\r\n  if (enable_JsCode) {\r\n    grid_options = deepMap(grid_options, parseJsCodeFromPython, [\"rowData\"])\r\n  }\r\n\r\n  let { buttons, toggle_views, api_key, api_lastmod_key = null, columnOrder=[], grid_type = null} = kwargs\r\n  const [rowData, setRowData] = useState<any[]>([])\r\n  const [modalShow, setModalshow] = useState(false)\r\n  const [modalData, setModalData] = useState({})\r\n  const [promptText, setPromptText] = useState(\"\")\r\n  const [viewId, setViewId] = useState(0)\r\n  const [lastModified, setLastModified] = useState<string | null>(null);\r\n  const [previousViewId, setpreviousViewId] = useState(89)\r\n\r\n  \r\n  const checkLastModified = async (): Promise<boolean> => {\r\n    try {\r\n      console.log(\"checking last modified...\", api_lastmod_key);\r\n      if (api_lastmod_key === null) {\r\n        console.log(\"api key is null, returning false\");\r\n        return true;\r\n      }\r\n      if (api_lastmod_key !== null && api_lastmod_key !== undefined) {\r\n        const baseurl = api.split('/').slice(0, -1).join('/');\r\n        // console.log(baseurl);\r\n        console.log(\"api key\", api_lastmod_key);\r\n        const res = await axios.get(`${baseurl}/lastmod_key`, {\r\n          params: {\r\n            api_key: api_key,\r\n            client_user: username,\r\n            prod: prod,\r\n            api_lastmod_key: api_lastmod_key,\r\n          },\r\n        });\r\n        // console.log(\"fetching data...\", res.data.lastModified);\r\n        if (res.data?.lastModified !== lastModified) {\r\n          // console.log(\"setting modified changed, fetching data...\", res.data.lastModified, lastModified);\r\n          setLastModified(res.data.lastModified);\r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n      }\r\n      return false;\r\n    } catch (error: any) {\r\n      toastr.error(`Failed to check last modified: ${error.message}`);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const checkViewIdChanged = async (currentViewId: number, previousViewId: number): Promise<boolean> => {\r\n    if (currentViewId !== previousViewId) {\r\n      console.log(\"viewId has changed from\", previousViewId, \"to\", currentViewId);\r\n      return true;\r\n    } else {\r\n      console.log(\"viewId has not changed\");\r\n      return false;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    Streamlit.setFrameHeight();\r\n  \r\n    if (buttons.length) {\r\n      buttons = deepMap(buttons, parseJsCodeFromPython, [\"rowData\"]); // process JsCode from buttons props\r\n  \r\n      buttons.forEach((button: any) => {\r\n        const {\r\n          prompt_field,\r\n          prompt_message,\r\n          button_api,\r\n          prompt_order_rules,\r\n          col_header,\r\n          col_headername,\r\n          col_width,\r\n          pinned,\r\n          button_name,\r\n          border_color,\r\n          border,\r\n          ...otherKeys\r\n        } = button;\r\n  \r\n        grid_options.columnDefs!.push({\r\n          ...otherKeys,\r\n          field: col_header || index,\r\n          headerName: col_headername,\r\n          width: col_width,\r\n          pinned: pinned,\r\n          cellRenderer: BtnCellRenderer,\r\n          cellRendererParams: {\r\n            col_header,\r\n            buttonName: button_name,\r\n            borderColor: border_color,\r\n            border: border,\r\n            ...(button.cellRendererParams || {}),\r\n            clicked: async function (row_index: any) {\r\n              try {\r\n                const selectedRow = g_rowdata.find((row) => row[index] === row_index);\r\n                if (prompt_order_rules) {\r\n                  const str = selectedRow[prompt_field];\r\n                  const selectedField =\r\n                    typeof str === \"string\"\r\n                      ? JSON.parse(\r\n                          selectedRow[prompt_field]\r\n                            .replace(/'/g, '\"')\r\n                            .replace(/\\n/g, \"\")\r\n                            .replace(/\\s/g, \"\")\r\n                            .replace(/False/g, \"false\")\r\n                            .replace(/True/g, \"true\")\r\n                        )\r\n                      : str;\r\n  \r\n                  setModalshow(true);\r\n                  setModalData({\r\n                    prompt_message,\r\n                    button_api: button_api,\r\n                    username: username,\r\n                    prod: prod,\r\n                    selectedRow: selectedRow,\r\n                    kwargs: kwargs,\r\n                    prompt_field,\r\n                    prompt_order_rules,\r\n                    selectedField,\r\n                  });\r\n  \r\n                  const rules_value: any = {};\r\n                  prompt_order_rules.forEach((rule: string) => {\r\n                    rules_value[rule] = selectedField[rule];\r\n                  });\r\n  \r\n                  setPromptText(rules_value);\r\n                } else if (prompt_field && prompt_message) {\r\n                  setModalshow(true);\r\n                  setModalData({\r\n                    prompt_message,\r\n                    button_api: button_api,\r\n                    username: username,\r\n                    prod: prod,\r\n                    selectedRow: selectedRow,\r\n                    kwargs: kwargs,\r\n                  });\r\n                  setPromptText(selectedRow[prompt_field]);\r\n                } else {\r\n                  if (window.confirm(prompt_message)) {\r\n                    await axios.post(button_api, {\r\n                      username: username,\r\n                      prod: prod,\r\n                      selected_row: selectedRow,\r\n                      ...kwargs,\r\n                    });\r\n                  }\r\n                  toastr.success(\"Success!\");\r\n                }\r\n              } catch (error) {\r\n                alert(`${error}`);\r\n              }\r\n            },\r\n          },\r\n        });\r\n      });\r\n    }\r\n  \r\n    // Reorder columns based on a predefined list\r\n    // const columnOrder = [\"sector\", \"broker_qty_available\", \"queens_suggested_sell\"]; // Replace with your desired column order\r\n    \r\n    if (columnOrder.length > 0 && grid_options.columnDefs) {\r\n      grid_options.columnDefs.sort((a: any, b: any) => {\r\n      // If both columns are in the columnOrder array, maintain their order\r\n      if (columnOrder.indexOf(a.field) !== -1 && columnOrder.indexOf(b.field) !== -1) {\r\n        return columnOrder.indexOf(a.field) - columnOrder.indexOf(b.field);\r\n      }\r\n    \r\n      // If one of the columns isn't in columnOrder, keep its original position\r\n      if (columnOrder.indexOf(a.field) === -1) return 1;\r\n      if (columnOrder.indexOf(b.field) === -1) return -1;\r\n    \r\n      return 0;\r\n      });\r\n    }\r\n    \r\n  \r\n    // Optional: Refresh header if necessary (if needed)\r\n    if (gridRef.current?.api) {\r\n      gridRef.current.api.refreshHeader();\r\n    }\r\n  }, [buttons, grid_options.columnDefs]);\r\n\r\n  const fetchAndSetData = async () => {\r\n    const array = await fetchData();\r\n    if (array === false) return false;\r\n    setRowData(array);\r\n    g_rowdata = array;\r\n    return true;\r\n  };\r\n\r\n  useEffect(() => {\r\n    onRefresh()\r\n  }, [viewId])\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      // const checkViewIdChanged_result = await checkViewIdChanged(viewId, previousViewId);\r\n      let toggle_view = toggle_views ? toggle_views[viewId] : \"none\";\r\n      \r\n      if (refresh_sec && refresh_sec > 0) {\r\n        const isLastModified = await checkLastModified();\r\n        console.log(\"isLastModified\", isLastModified, api);\r\n        if (!isLastModified) {\r\n          return false;\r\n        }\r\n      }\r\n      \r\n      console.log(\"fetching data...\", api);\r\n      const res = await axios.post(api, {\r\n        username: username,\r\n        prod: prod,\r\n        ...kwargs,\r\n        toggle_view_selection: toggle_view\r\n      });\r\n      const array = JSON.parse(res.data);\r\n      return array;\r\n    } catch (error: any) {\r\n      toastr.error(`Fetch Error: ${error.message}`);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (refresh_sec && refresh_sec > 0) {\r\n      const interval = setInterval(fetchAndSetData, refresh_sec * 1000)\r\n      let timeout: NodeJS.Timeout\r\n      if (refresh_cutoff_sec > 0) {\r\n        console.log(refresh_cutoff_sec)\r\n        timeout = setTimeout(() => {\r\n          clearInterval(interval)\r\n          console.log(\"Fetching data ended, refresh rate:\", refresh_sec)\r\n        }, refresh_cutoff_sec * 1000)\r\n      }\r\n      console.error(\"rendered==========\", props)\r\n      return () => {\r\n        clearInterval(interval)\r\n        if (timeout) clearTimeout(timeout)\r\n      }\r\n    }\r\n  }, [props, viewId])\r\n\r\n  // useEffect(() => {\r\n  //   const baseurl = api.split('/').slice(0, -1).join('/');\r\n  //   const socket = io(`${baseurl}/ws`);\r\n\r\n  //   socket.on(\"dataUpdated\", () => {\r\n  //     console.log(\"Data update received via WebSocket\");\r\n  //     onRefresh();\r\n  //   });\r\n\r\n  //   return () => {\r\n  //     socket.disconnect();\r\n  //   };\r\n  // }, []);\r\n\r\n\r\n  const autoSizeAll = useCallback((skipHeader: boolean) => {\r\n    const allColumnIds: string[] = []\r\n    gridRef.current!.columnApi.getColumns()!.forEach((column: any) => {\r\n      allColumnIds.push(column.getId())\r\n    })\r\n    gridRef.current!.columnApi.autoSizeColumns(allColumnIds, skipHeader)\r\n  }, [])\r\n\r\n  const sizeToFit = useCallback(() => {\r\n    gridRef.current!.api.sizeColumnsToFit({\r\n      defaultMinWidth: 100,\r\n    })\r\n  }, [])\r\n\r\n  const onGridReady = useCallback(async (params: GridReadyEvent) => {\r\n    setTimeout(async () => {\r\n      try {\r\n        const array = await fetchData()\r\n        // console.log(\"AAAAAAAAAAAAAAAAAAAAAAA\", array)\r\n        if (array === false) {\r\n          // toastr.error(`Error: ${array.message}`)\r\n          return\r\n        }\r\n        setRowData(array)\r\n        g_rowdata = array\r\n      } catch (error: any) {\r\n        toastr.error(`Error: ${error.message}`)\r\n      }\r\n    }, 100)\r\n  }, [])\r\n\r\n  const autoGroupColumnDef = useMemo<ColDef>(() => {\r\n    return {\r\n      minWidth: 200,\r\n    }\r\n  }, [])\r\n\r\n  const getRowId = useMemo<GetRowIdFunc>(() => {\r\n    return (params: GetRowIdParams) => {\r\n      return params.data[index]\r\n    }\r\n  }, [index])\r\n\r\n  const sideBar = useMemo<\r\n    SideBarDef | string | string[] | boolean | null\r\n  >(() => {\r\n    return {\r\n      toolPanels: [\r\n        {\r\n          id: \"columns\",\r\n          labelDefault: \"Columns\",\r\n          labelKey: \"columns\",\r\n          iconKey: \"columns\",\r\n          toolPanel: \"agColumnsToolPanel\",\r\n        },\r\n        {\r\n          id: \"filters\",\r\n          labelDefault: \"Filters\",\r\n          labelKey: \"filters\",\r\n          iconKey: \"filter\",\r\n          toolPanel: \"agFiltersToolPanel\",\r\n        },\r\n      ],\r\n      defaultToolPanel: \"customStats\",\r\n    }\r\n  }, [])\r\n\r\n  const onCellValueChanged = useCallback((event) => {\r\n    if (g_newRowData === null) g_newRowData = {}\r\n    g_newRowData[event.data[index]] = event.data\r\n    console.log(\"Data after change is\", g_newRowData)\r\n  }, [])\r\n\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  \r\n  const onRefresh = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const success = await fetchAndSetData();\r\n      success && toastr.success(\"Refresh success!\");\r\n    } catch (error: any) {\r\n      toastr.error(`Refresh Failed! ${error.message}`);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const onUpdate = async () => {\r\n    if (g_newRowData === null) {\r\n      toastr.warning(`No changes to update`)\r\n      return\r\n    }\r\n    try {\r\n      const res: any = await axios.post(api_update, {\r\n        username: username,\r\n        prod: prod,\r\n        new_data: g_newRowData,\r\n        ...kwargs,\r\n      })\r\n      g_newRowData = null\r\n      if (res.status) toastr.success(`Successfully Updated! `)\r\n      else toastr.error(`Failed! ${res.message}`)\r\n    } catch (error) {\r\n      toastr.error(`Failed! ${error}`)\r\n    }\r\n  }\r\n\r\n  const columnTypes = useMemo<any>(() => {\r\n    return {\r\n      dateColumnFilter: {\r\n        filter: \"agDateColumnFilter\",\r\n        filterParams: {\r\n          comparator: (filterValue: any, cellValue: string) =>\r\n            compareAsc(new Date(cellValue), filterValue),\r\n        },\r\n      },\r\n      numberColumnFilter: {\r\n        filter: \"agNumberColumnFilter\",\r\n      },\r\n      shortDateTimeFormat: {\r\n        valueFormatter: (params: any) =>\r\n          dateFormatter(params.value, \"dd/MM/yyyy HH:mm\"),\r\n      },\r\n      customDateTimeFormat: {\r\n        valueFormatter: (params: any) =>\r\n          dateFormatter(\r\n            params.value,\r\n            params.column.colDef.custom_format_string\r\n          ),\r\n      },\r\n      customNumericFormat: {\r\n        valueFormatter: (params: any) =>\r\n          numberFormatter(params.value, params.column.colDef.precision ?? 2),\r\n      },\r\n      customCurrencyFormat: {\r\n        valueFormatter: (params: any) =>\r\n          currencyFormatter(\r\n            params.value,\r\n            params.column.colDef.custom_currency_symbol\r\n          ),\r\n      },\r\n      timedeltaFormat: {\r\n        valueFormatter: (params: any) => duration(params.value).humanize(true),\r\n      },\r\n      customNumberFormat: {\r\n        valueFormatter: (params: any) =>\r\n          Number(params.value).toLocaleString(\"en-US\", {\r\n            minimumFractionDigits: 0,\r\n          }),\r\n      },\r\n      customHyperlinkRenderer: {\r\n        // valueGetter: (params: any) =>\r\n        //   params.column.colDef.baseURL + params.data.honey,\r\n        cellRenderer: HyperlinkRenderer,\r\n        cellRendererParams: {\r\n          baseURL: \"URLSearchParams.co\",\r\n        },\r\n      },\r\n    }\r\n  }, [])\r\n\r\n  const onClick = () => {\r\n    toastr.clear()\r\n    setTimeout(() => toastr.success(`Settings updated `), 300)\r\n  }\r\n\r\n  type RowStyle = {\r\n    background?: string;\r\n    color?: string;\r\n  };\r\n\r\n  function parseJsCodeFromPython(v: string) {\r\n    const JS_PLACEHOLDER = \"::JSCODE::\"\r\n    let funcReg = new RegExp(\r\n      `${JS_PLACEHOLDER}\\\\s*((function|class)\\\\s*.*)\\\\s*${JS_PLACEHOLDER}`\r\n    )\r\n  \r\n    let match = funcReg.exec(v)\r\n  \r\n    if (match) {\r\n  \r\n      const funcStr = match[1]\r\n      // eslint-disable-next-line\r\n      return new Function(\"return \" + funcStr)()\r\n    } else {\r\n      return v\r\n    }\r\n  }\r\n\r\n  const getRowStyle = (params: RowClassParams<any>): RowStyle | undefined => {\r\n    try {\r\n      const background = params.data[\"color_row\"] ?? undefined;\r\n      const color = params.data[\"color_row_text\"] ?? undefined;\r\n      return { background, color };\r\n    } catch (error) {\r\n      console.error(\"Error accessing row style:\", error);\r\n      return undefined; // Return undefined when an error occurs\r\n    }\r\n  };\r\n\r\n  // interface Props {\r\n  //   toggle_views: string[];\r\n  //   viewId: number;\r\n  //   setViewId: (id: number) => void;\r\n  //   loading: boolean;\r\n  //   onUpdate: () => void;\r\n  // }\r\n  const getButtonStyle = (length: number) => {\r\n    if (length < 3) {\r\n      return { padding: \"15px 18px\", fontSize: \"18px\" };\r\n    } else if (length < 8) {\r\n      return { padding: \"15px 18px\", fontSize: \"15px\" };\r\n    } else if (length < 15) {\r\n      return { padding: \"12px 13px\", fontSize: \"13px\" };\r\n    } else if (length < 35) {\r\n      return { padding: \"10px 12px\", fontSize: \"11px\" };\r\n    } else {\r\n      return { padding: \"3px 5px\", fontSize: \"10px\" };\r\n    }\r\n  };\r\n\r\n  const buttonStyle = getButtonStyle(toggle_views.length);\r\n\r\n  const button_color = \"#3498db\"; // Set your custom button color here\r\n\r\n  return (\r\n    <>\r\n      <MyModal\r\n        isOpen={modalShow}\r\n        closeModal={() => setModalshow(false)}\r\n        modalData={modalData}\r\n        promptText={promptText}\r\n        setPromptText={setPromptText}\r\n        toastr={toastr}\r\n      />\r\n      <div\r\n        style={{ flexDirection: \"row\", height: \"100%\", width: \"100%\" }}\r\n        id=\"myGrid\"\r\n      >\r\n        <div className=\"d-flex justify-content-between align-items-center\">\r\n          {(refresh_sec == undefined || refresh_sec == 0) && (\r\n            <div style={{ display: \"flex\" }}>\r\n              <div style={{ margin: \"5px 5px 5px 2px\" }}>\r\n                <button\r\n                  className=\"btn\"\r\n                  style={{\r\n                    backgroundColor: button_color,\r\n                    color: \"white\",\r\n                    padding: \"5px 8px\", // Smaller padding\r\n                    fontSize: \"12px\", // Smaller font size\r\n                    borderRadius: \"4px\",\r\n                    display: \"flex\",\r\n                    alignItems: \"center\",\r\n                    justifyContent: \"center\",\r\n                    minWidth: \"80px\", // Ensure width stays the same during loading\r\n                  }}\r\n                  onClick={onRefresh}\r\n                  disabled={loading} // Disable button while loading\r\n                >\r\n                  {loading ? (\r\n                    <div\r\n                      style={{\r\n                        width: \"14px\",\r\n                        height: \"14px\",\r\n                        border: \"2px solid white\",\r\n                        borderTop: \"2px solid transparent\",\r\n                        borderRadius: \"50%\",\r\n                        animation: \"spin 0.8s linear infinite\",\r\n                      }}\r\n                    />\r\n                  ) : (\r\n                    \"Refresh\"\r\n                  )}\r\n                </button>\r\n\r\n                {/* Add CSS for spinner animation */}\r\n                <style>\r\n                  {`\r\n                    @keyframes spin {\r\n                      to {\r\n                        transform: rotate(360deg);\r\n                      }\r\n                    }\r\n                  `}\r\n                </style>\r\n              </div>\r\n              <div style={{ margin: \"5px 5px 5px 2px\" }}>\r\n                <button\r\n                  className=\"btn\"\r\n                  style={{\r\n                    backgroundColor: \"green\",\r\n                    color: \"white\",\r\n                    padding: \"5px 8px\", // Smaller padding\r\n                    fontSize: \"12px\", // Smaller font size\r\n                    borderRadius: \"4px\",\r\n                  }}\r\n                  onClick={onUpdate}\r\n                >\r\n                  Update\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )}\r\n          {toggle_views && toggle_views.length > 0 && (\r\n  <>\r\n    {toggle_views.length < 20 ? (\r\n      // Render normal buttons if toggle_views is less than 20\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          flexWrap: \"wrap\",\r\n          gap: \"10px\",\r\n          padding: \"10px\",\r\n          marginBottom: \"10px\",\r\n        }}\r\n      >\r\n        {toggle_views.map((view: string, index: number) => (\r\n          <button\r\n            key={index}\r\n            className={`btn ${viewId === index ? \"btn-danger\" : \"btn-secondary\"}`}\r\n            style={{\r\n              ...buttonStyle,\r\n              borderRadius: \"8px\",\r\n              color: \"#055A6E\",\r\n              backgroundColor: \"#F3FAFD\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={() => {\r\n              setViewId(index);\r\n              setpreviousViewId(viewId);\r\n            }}\r\n            disabled={loading}\r\n          >\r\n            {view}\r\n            {loading && viewId === index ? (\r\n              <div\r\n                style={{\r\n                  width: \"14px\",\r\n                  height: \"14px\",\r\n                  border: \"2px solid black\",\r\n                  borderTop: \"2px solid transparent\",\r\n                  borderRadius: \"50%\",\r\n                  animation: \"spin 0.8s linear infinite\",\r\n                  marginLeft: \"8px\",\r\n                }}\r\n              />\r\n            ) : null}\r\n          </button>\r\n        ))}\r\n      </div>\r\n    ) : (\r\n      // Render overlap container if toggle_views is 20 or more\r\n      <div\r\n        className=\"toggle-view-container\"\r\n        style={{\r\n          display: \"grid\",\r\n          gridTemplateColumns: \"repeat(auto-fit, minmax(100px, 1fr))\",\r\n          gap: \"10px\",\r\n          overflowY: \"auto\",\r\n          maxHeight: \"200px\",\r\n          padding: \"10px\",\r\n          border: \"1px solid #ddd\",\r\n          borderRadius: \"8px\",\r\n          backgroundColor: \"#eef9f8\",\r\n          width: \"100%\",\r\n          marginBottom: \"10px\",\r\n        }}\r\n      >\r\n        {toggle_views.map((view: string, index: number) => (\r\n          <button\r\n            key={index}\r\n            className={`btn ${viewId === index ? \"btn-danger\" : \"btn-secondary\"}`}\r\n            style={{\r\n              ...buttonStyle,\r\n              borderRadius: \"8px\",\r\n              color: \"#055A6E\",\r\n              backgroundColor: \"#F3FAFD\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={() => {\r\n              setViewId(index);\r\n              setpreviousViewId(viewId);\r\n            }}\r\n            disabled={loading}\r\n          >\r\n            {view}\r\n            {loading && viewId === index ? (\r\n              <div\r\n                style={{\r\n                  width: \"14px\",\r\n                  height: \"14px\",\r\n                  border: \"2px solid black\",\r\n                  borderTop: \"2px solid transparent\",\r\n                  borderRadius: \"50%\",\r\n                  animation: \"spin 0.8s linear infinite\",\r\n                  marginLeft: \"8px\",\r\n                }}\r\n              />\r\n            ) : null}\r\n          </button>\r\n        ))}\r\n      </div>\r\n    )}\r\n  </>\r\n)}\r\n        </div>\r\n  \r\n        <div\r\n          className={grid_options.theme || \"ag-theme-alpine-dark\"}\r\n          style={{\r\n            width: \"100%\",\r\n            height: kwargs[\"grid_height\"] ? kwargs[\"grid_height\"] : \"100%\",\r\n          }}\r\n        >\r\n          <AgGridReact\r\n            ref={gridRef}\r\n            rowData={rowData}\r\n            getRowStyle={getRowStyle}\r\n            rowStyle={{ fontSize: 12, padding: 0 }}\r\n            headerHeight={30}\r\n            rowHeight={30}\r\n            onGridReady={onGridReady}\r\n            autoGroupColumnDef={autoGroupColumnDef}\r\n            animateRows={true}\r\n            suppressAggFuncInHeader={true}\r\n            getRowId={getRowId}\r\n            gridOptions={grid_options}\r\n            onCellValueChanged={onCellValueChanged}\r\n            columnTypes={columnTypes}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default AgGrid\r\n","import React, { useEffect, useState } from 'react'\nimport {\n  ComponentProps,\n  Streamlit,\n  withStreamlitConnection,\n} from 'streamlit-component-lib'\nimport 'ag-grid-community/styles/ag-grid.css'\n// import 'ag-grid-community/styles/ag-theme-alpine.css';\nimport 'ag-grid-community/styles/ag-theme-balham.css'\nimport Aggrid from './Aggrid'\n\nconst Main = (props: ComponentProps) => {\n  const {\n    username,\n    api,\n    api_update,\n    refresh_sec,\n    refresh_cutoff_sec,\n    gridoption_build,\n    enable_JsCode,\n    prod,\n  } = props.args\n  const { grid_options, kwargs = {} } = props.args\n  const { index, theme } = grid_options\n  // console.log('GridOptions', grid_options)\n  return (\n    <div>\n      <Aggrid\n        username={username}\n        api={api}\n        api_update={api_update}\n        refresh_sec={refresh_sec}\n        refresh_cutoff_sec={refresh_cutoff_sec}\n        gridoption_build={gridoption_build}\n        prod={prod}\n        grid_options={grid_options}\n        index={index}\n        kwargs={kwargs} \n        enable_JsCode={enable_JsCode}      />\n    </div>\n  )\n}\n\nexport default withStreamlitConnection(Main)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport Main from \"./Main\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}