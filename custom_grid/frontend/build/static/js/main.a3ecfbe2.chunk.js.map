{"version":3,"sources":["components/Modal.tsx","utils.js","Aggrid.tsx","Main.tsx","index.tsx"],"names":["formats","sliderRules","sliderRules_stars","sliderRules_stars_margin","map","rule","concat","ReactModal","setAppElement","isExecuting","MyModal","_ref","isOpen","closeModal","modalData","promptText","setPromptText","toastr","prompt_field","prompt_order_rules","selectedRow","selectedField","ref","useRef","useEffect","setTimeout","_ref$current","current","focus","isValidDate","dateStr","some","format","moment","isValid","formatToLocalDatetime","date","toDate","timeZone","Intl","DateTimeFormat","resolvedOptions","zonedDate","utcToZonedTime","textFields","booleanFields","datetimeFields","arrayFields","value","Array","isArray","push","React","createElement","className","style","display","prompt_message","onClick","position","right","length","index","key","marginRight","minWidth","textAlign","fontSize","type","checked","onChange","e","target","width","height","marginTop","flex","includes","isSliderRule","Fragment","min","max","step","Number","fontWeight","padding","item","i","undefined","async","body","username","prod","selected_row","default_value","kwargs","console","log","data","res","axios","post","button_api","status","description","message_type","success","alert","error","close_modal","message","mapObject","obj","fn","keysToIgnore","Object","keys","reduce","deepMap","arguments","deepMapper","val","g_rowdata","g_newRowData","dateFormatter","isoString","formaterString","Date","currencyFormatter","number","currencySymbol","n","parseFloat","isNaN","toFixed","numberFormatter","precision","HyperlinkRenderer","props","href","column","colDef","baseURL","options","positionClass","hideDuration","timeOut","AgGrid","BtnCellRenderer","btnClickedHandler","clicked","node","id","background","col_header","buttonName","gridRef","api","api_update","refresh_sec","refresh_cutoff_sec","enable_JsCode","grid_options","parseJsCodeFromPython","buttons","toggle_views","api_key","api_lastmod_key","rowData","setRowData","useState","modalShow","setModalshow","setModalData","viewId","setViewId","lastModified","setLastModified","Streamlit","setFrameHeight","button","col_headername","col_width","pinned","button_name","border_color","otherKeys","columnDefs","field","headerName","cellRenderer","cellRendererParams","borderColor","row_index","find","row","str","JSON","parse","replace","rules_value","window","confirm","fetchAndSetData","array","fetchData","onRefresh","isLastModified","_res$data","baseurl","split","slice","join","get","params","client_user","checkLastModified","toggle_view_selection","interval","setInterval","timeout","clearInterval","clearTimeout","useCallback","skipHeader","allColumnIds","columnApi","getColumns","forEach","getId","autoSizeColumns","sizeColumnsToFit","defaultMinWidth","onGridReady","autoGroupColumnDef","useMemo","getRowId","onCellValueChanged","toolPanels","labelDefault","labelKey","iconKey","toolPanel","defaultToolPanel","event","loading","setLoading","columnTypes","dateColumnFilter","filter","filterParams","comparator","filterValue","cellValue","compareAsc","numberColumnFilter","shortDateTimeFormat","valueFormatter","customDateTimeFormat","custom_format_string","customNumericFormat","_params$column$colDef2","customCurrencyFormat","custom_currency_symbol","timedeltaFormat","duration","humanize","customNumberFormat","toLocaleString","minimumFractionDigits","customHyperlinkRenderer","v","match","RegExp","exec","funcStr","Function","buttonStyle","flexDirection","margin","backgroundColor","color","borderRadius","alignItems","justifyContent","disabled","border","borderTop","animation","new_data","warning","view","marginLeft","theme","AgGridReact","getRowStyle","_params$data$color_ro","_params$data$color_ro2","rowStyle","headerHeight","rowHeight","animateRows","suppressAggFuncInHeader","gridOptions","withStreamlitConnection","gridoption_build","args","Aggrid","ReactDOM","render","StrictMode","Main","document","getElementById"],"mappings":"mUAOA,MAAMA,EAAU,CAAC,mBAAoB,mBAAoB,mBAAoB,oBACvEC,EAAc,CAAC,eAAgB,gBAC/BC,EAAoB,CAAC,MAAO,OAAQ,QAAS,UAAW,WAAY,QACpEC,EAA2BD,EAAkBE,IAAIC,GAAI,GAAAC,OAAOD,EAAI,YAetEE,IAAWC,cAAc,SACzB,IAAIC,GAAc,EAsYHC,MA3XyBC,IAOjC,IAPkC,OACvCC,EAAM,WACNC,EAAU,UACVC,EAAS,WACTC,EAAU,cACVC,EAAa,OACbC,GACDN,EACC,MAAM,aAAEO,EAAY,mBAAEC,EAAkB,YAAEC,EAAW,cAAEC,GAAkBP,EAEnEQ,EAAMC,iBAA0B,MACpBA,iBAA0B,MAgG5CC,oBAAU,KACJZ,GAAQa,WAAW,SAAAC,EAAA,OAAiB,QAAjBA,EAAMJ,EAAIK,eAAO,IAAAD,OAAA,EAAXA,EAAaE,SAAS,MAClD,CAAChB,IAEJ,MAAMiB,EAAeC,GACZ9B,EAAQ+B,KAAKC,GAAUC,IAAOH,EAASE,GAAQ,GAAME,WAGxDC,EAAyBL,IAC7B,MAAMM,EAAOH,IAAOH,EAAS9B,GAAS,GAAMqC,SACtCC,EAAWC,KAAKC,iBAAiBC,kBAAkBH,SACnDI,EAAYC,YAAeP,EAAME,GACvC,OAAON,YAAOU,EAAW,uBAIrBE,EAAa,GACbC,EAAgB,GAChBC,EAAiB,GACjBC,EAAc,GAEpB,GAAI5B,EACF,IAAK,MAAMd,KAAQc,EAAoB,CACrC,MAAM6B,EAAQjC,EAAWV,GACrB4C,MAAMC,QAAQF,GAChBD,EAAYI,KAAK9C,GACS,mBAAV2C,EAChBH,EAAcM,KAAK9C,GACVwB,EAAYmB,GACrBF,EAAeK,KAAK9C,GAEpBuC,EAAWO,KAAK9C,GAOxB,OACI+C,IAAAC,cAAA,OAAKC,UAAU,WAAWC,MAAO,CAAEC,QAAS5C,EAAS,QAAU,SAC7DwC,IAAAC,cAAA,OAAKC,UAAU,oBAEbF,IAAAC,cAAA,OAAKC,UAAU,sEACbF,IAAAC,cAAA,MAAIC,UAAU,mBAAmBxC,EAAU2C,gBAC3CL,IAAAC,cAAA,QAAMC,UAAU,QAAQI,QAAS7C,EAAY0C,MAAO,CAAEI,SAAU,WAAYC,MAAO,SAAU,SAM/FR,IAAAC,cAAA,OAAKC,UAAU,kBACbF,IAAAC,cAAA,OAAKC,UAAU,sBAEZT,EAAcgB,OAAS,GACtBT,IAAAC,cAAA,OAAKC,UAAU,gDACZT,EAAczC,IAAI,CAACC,EAAWyD,IAC7BV,IAAAC,cAAA,OAAKC,UAAU,wCAAwCS,IAAKD,EAAOP,MAAO,CAAES,YAAa,QACvFZ,IAAAC,cAAA,SAAOC,UAAU,OAAOC,MAAO,CAAEU,SAAU,QAASC,UAAW,SAAUC,SAAU,WAChF9D,EAAK,KAER+C,IAAAC,cAAA,SACEe,KAAK,WACLC,QAAStD,EAAWV,GACpBiE,SAAWC,GACTvD,EAAc,IACTD,EACH,CAACV,GAAOkE,EAAEC,OAAOH,UAGrBd,MAAO,CAAEkB,MAAO,OAAQC,OAAQ,OAAQC,UAAW,YAS7DvB,IAAAC,cAAA,OAAKC,UAAU,2CAEZV,EAAWiB,OAAS,GACnBT,IAAAC,cAAA,OAAKC,UAAU,qBAAqBC,MAAO,CAAEqB,KAAM,EAAGZ,YAAa,QAChEpB,EAAWxC,IAAI,CAACC,EAAWyD,KAG1B,GAAI5D,EAAkB2E,SAASxE,GAAO,OAAO,KAC7C,GAAIF,EAAyB0E,SAASxE,GAAO,OAAO,KAEpD,MAAMyE,EAAe7E,EAAY4E,SAASxE,GAE1C,OACE+C,IAAAC,cAAA,OAAKC,UAAU,4CAA4CS,IAAKD,GAC9DV,IAAAC,cAAA,SAAOC,UAAU,OAAOC,MAAO,CAAEY,SAAU,WACxC9D,EAAK,KAGPyE,EACC1B,IAAAC,cAAAD,IAAA2B,SAAA,KACE3B,IAAAC,cAAA,SACEe,KAAK,QACLY,IAAI,IACJC,IAAI,IACJC,KAAK,MACLlC,MAAOjC,EAAWV,IAAS,EAC3BiE,SAAWC,GACTvD,EAAc,IACTD,EACH,CAACV,GAAO8E,OAAOZ,EAAEC,OAAOxB,SAG5BO,MAAO,CAAEkB,MAAO,UAElBrB,IAAAC,cAAA,QAAME,MAAO,CAAEY,SAAU,SAAUiB,WAAY,OAAQT,UAAW,QAC/D5D,EAAWV,IAAS,IAIzB+C,IAAAC,cAAA,SACEe,KAAK,OACLpB,MAAOjC,EAAWV,GAClBiE,SAAWC,GACTvD,EAAc,IACTD,EACH,CAACV,GAAOkE,EAAEC,OAAOxB,QAGrBO,MAAO,CAAEqB,KAAM,EAAGH,MAAO,OAAQY,QAAS,MAAOlB,SAAU,gBAWxEpB,EAAYc,OAAS,GACpBT,IAAAC,cAAA,OAAKC,UAAU,qBAAqBC,MAAO,CAAEqB,KAAM,IAChD7B,EAAY3C,IAAI,CAACC,EAAWyD,IAC3BV,IAAAC,cAAA,OAAKC,UAAU,4CAA4CS,IAAKD,GAC9DV,IAAAC,cAAA,SAAOC,UAAU,OAAOC,MAAO,CAAEY,SAAU,WACxC9D,EAAK,KAER+C,IAAAC,cAAA,UACEL,MAAOjC,EAAWV,GAAM,GACxBiE,SAAWC,GACTvD,EAAc,IACTD,EACH,CAACV,GAAO,CAACkE,EAAEC,OAAOxB,SAGtBO,MAAO,CAAEqB,KAAM,EAAGH,MAAO,OAAQY,QAAS,MAAOlB,SAAU,WAE1DpD,EAAWV,GAAMD,IAAI,CAACkF,EAAWC,IAChCnC,IAAAC,cAAA,UAAQU,IAAKwB,EAAGvC,MAAOsC,GACpBA,QAUhBpF,EAAkB6B,KAAM1B,QAAmCmF,IAArBzE,EAAWV,KAChD+C,IAAAC,cAAA,OAAKC,UAAU,qBAAqBC,MAAO,CAAEqB,KAAM,EAAGZ,YAAa,QAChE9D,EAAkBE,IAAI,CAACC,EAAWyD,SACZ0B,IAArBzE,EAAWV,IACT+C,IAAAC,cAAA,OAAKC,UAAU,4CAA4CS,IAAKD,GAC9DV,IAAAC,cAAA,SAAOC,UAAU,OAAOC,MAAO,CAAEY,SAAU,WACxC9D,EAAK,KAER+C,IAAAC,cAAA,SACEe,KAAK,QACLY,IAAI,IACJC,IAAI,IACJC,KAAK,MACLlC,MAAOjC,EAAWV,IAAS,EAC3BiE,SAAWC,GACTvD,EAAc,IACTD,EACH,CAACV,GAAO8E,OAAOZ,EAAEC,OAAOxB,SAG5BO,MAAO,CAAEkB,MAAO,UAElBrB,IAAAC,cAAA,QAAME,MAAO,CAAEY,SAAU,SAAUiB,WAAY,OAAQT,UAAW,QAC/D5D,EAAWV,IAAS,MAQhCF,EAAyB4B,KAAM1B,QAAmCmF,IAArBzE,EAAWV,KACvD+C,IAAAC,cAAA,OAAKC,UAAU,qBAAqBC,MAAO,CAAEqB,KAAM,EAAGZ,YAAa,QAChE7D,EAAyBC,IAAI,CAACC,EAAWyD,SACnB0B,IAArBzE,EAAWV,IACT+C,IAAAC,cAAA,OAAKC,UAAU,4CAA4CS,IAAKD,GAC9DV,IAAAC,cAAA,SAAOC,UAAU,OAAOC,MAAO,CAAEY,SAAU,WACxC9D,EAAK,KAER+C,IAAAC,cAAA,SACEe,KAAK,QACLY,IAAI,IACJC,IAAI,IACJC,KAAK,MACLlC,MAAOjC,EAAWV,IAAS,EAC3BiE,SAAWC,GACTvD,EAAc,IACTD,EACH,CAACV,GAAO8E,OAAOZ,EAAEC,OAAOxB,SAG5BO,MAAO,CAAEkB,MAAO,UAElBrB,IAAAC,cAAA,QAAME,MAAO,CAAEY,SAAU,SAAUiB,WAAY,OAAQT,UAAW,QAC/D5D,EAAWV,IAAS,MAS9ByC,EAAee,OAAS,GACvBT,IAAAC,cAAA,OAAKC,UAAU,qBAAqBC,MAAO,CAAEqB,KAAM,EAAGZ,YAAa,QAChElB,EAAe1C,IAAI,CAACC,EAAWyD,IAC9BV,IAAAC,cAAA,OAAKC,UAAU,4CAA4CS,IAAKD,GAC9DV,IAAAC,cAAA,SAAOC,UAAU,OAAOC,MAAO,CAAEY,SAAU,WACxC9D,EAAK,KAER+C,IAAAC,cAAA,SACEe,KAAK,iBACLpB,MAAOjC,EAAWV,IAAS8B,EAAsBpB,EAAWV,IAC5DiE,SAAWC,GACTvD,EAAc,IACTD,EACH,CAACV,GAAOkE,EAAEC,OAAOxB,QAGrBO,MAAO,CAAEqB,KAAM,EAAGH,MAAO,OAAQY,QAAS,MAAOlB,SAAU,kBAa3Ef,IAAAC,cAAA,OAAKC,UAAU,8CACbF,IAAAC,cAAA,UAAQe,KAAK,SAASd,UAAU,uBAAuBI,QAnUxC+B,UACrB,IAAIhF,EAAJ,CACAA,GAAc,EACd,IACE,MAAMiF,EAAO,CACXC,SAAU7E,EAAU6E,SACpBC,KAAM9E,EAAU8E,KAChBC,aAAc/E,EAAUM,YACxB0E,cAAe/E,KACZD,EAAUiF,QAEfC,QAAQC,IAAI,YAAaP,GACzB,MAAQQ,KAAMC,SAAcC,IAAMC,KAAKvF,EAAUwF,WAAYZ,IACvD,OAAEa,EAAM,KAAEL,EAAI,YAAEM,GAAgBL,EACvB,YAAXI,EACoB,SAAtBL,EAAKO,aACDxF,EAAOyF,QAAQF,EAAa,WAC5BG,MAAM,0BAA4BH,GAEhB,SAAtBN,EAAKO,aACDxF,EAAO2F,MAAMJ,EAAa,SAC1BG,MAAM,wBAA0BH,GAEb,IAAjB,OAAJN,QAAI,IAAJA,OAAI,EAAJA,EAAMW,cAAsBhG,IAChC,MAAO+F,GACPZ,QAAQC,IAAI,aAAcW,GAC1B3F,EAAO2F,MAAMA,EAAME,SAErBrG,GAAc,IAuSwEa,IAAKA,GAAK,MAG1F8B,IAAAC,cAAA,UAAQe,KAAK,SAASd,UAAU,yBAAyBI,QAAS7C,GAAY,c,gCCrZxF,SAASkG,EAAUC,EAAKC,EAAIC,GAExB,OADgBC,OAAOC,KAAKJ,GACXK,OAAO,CAAClB,EAAKpC,IACrBmD,EAAarC,SAASd,IAI3BoC,EAAIpC,GAAOiD,EAAIjD,GACRoC,IAJHA,EAAIpC,GAAOkD,EAAGD,EAAIjD,IACXoC,GAKZ,IAGP,SAASmB,EAAQN,EAAKC,GAAwB,IAApBC,EAAYK,UAAA1D,OAAA,QAAA2B,IAAA+B,UAAA,GAAAA,UAAA,GAAG,GACrC,MAAMC,EAAcC,GACR,OAARA,GAA+B,kBAARA,EAAmBH,EAAQG,EAAKR,GAAMA,EAAGQ,GACpE,OAAIxE,MAAMC,QAAQ8D,GACPA,EAAI5G,IAAIoH,GAEA,kBAARR,EACAD,EAAUC,EAAKQ,EAAYN,GAE/BF,ECoCX,IAAIU,EAAmB,GACnBC,EAAoB,KAExB,SAASC,EAAcC,EAAmBC,GACxC,IACE,IAAI1F,EAAO,IAAI2F,KAAKF,GACpB,OAAO7F,YAAOI,EAAM0F,GACpB,MACA,OAAOD,GAKX,SAASG,EAAkBC,EAAaC,GACtC,IAAIC,EAAIhD,OAAOiD,WAAWH,GAC1B,OAAK9C,OAAOkD,MAAMF,GAGTF,EAFAC,EAAiBC,EAAEG,QAAQ,GAMtC,SAASC,EAAgBN,EAAaO,GACpC,IAAIL,EAAIhD,OAAOiD,WAAWH,GAC1B,OAAK9C,OAAOkD,MAAMF,GAGTF,EAFAE,EAAEG,QAAQE,GAMrB,MAqCMC,EAAqBC,GAEvBtF,IAAAC,cAAA,KACEsF,KAAI,GAAArI,OAAKoI,EAAME,OAAOC,OAAOC,QAAO,KAAAxI,OAClCoI,EAAMxC,KAAKwC,EAAME,OAAOC,OAAkB,YAE5CrE,OAAO,UAENkE,EAAM1F,OAKb/B,IAAO8H,QAAU,CACfC,cAAe,uBACfC,aAAc,IACdC,QAAS,KAonBIC,MAjnBCT,IACd,MAAMU,EAAmBV,GAKrBtF,IAAAC,cAAA,UACEK,QALsB2F,KACxBX,EAAMY,QAAQZ,EAAMa,KAAKC,KAKvBjG,MAAO,CACLkG,WAAY,cAEZhF,MAAOiE,EAAMjE,MAAQiE,EAAMjE,MAAQ,SAIpCiE,EAAMgB,WAAahB,EAAM1F,MAAQ0F,EAAMiB,YAKxCC,EAAUrI,iBAAoB,OAC9B,SACJoE,EAAQ,IACRkE,EAAG,WACHC,EAAU,YACVC,EAAuB,mBACvBC,EAAqB,EAAC,KACtBpE,GAAO,EAAI,MACX9B,EAAK,cACLmG,EAAa,OACblE,GACE2C,EACJ,IAAI,aAAEwB,EAAe,IAAOxB,EAIxBuB,IACFC,EAAe5C,EAAQ4C,EAAcC,GAAuB,CAAC,aAG/D,IAAI,QAAEC,EAAO,aAAEC,EAAY,QAAEC,EAAO,gBAAEC,EAAkB,MAAQxE,EAChE,MAAOyE,EAASC,GAAcC,mBAAgB,KACvCC,EAAWC,GAAgBF,oBAAS,IACpC5J,EAAW+J,GAAgBH,mBAAS,KACpC3J,EAAYC,GAAiB0J,mBAAS,KACtCI,EAAQC,GAAaL,mBAAS,IAC9BM,EAAcC,GAAmBP,mBAAwB,MAsChElJ,oBAAU,KACR0J,IAAUC,iBACNf,EAAQvG,SAEVuG,EAAU9C,EAAQ8C,EAASD,GAAuB,CAAC,YAEnDC,EAAQhK,IAAKgL,IAEX,MAAM,aAAElK,EAAY,eAAEuC,EAAc,WAAE6C,EAAU,mBAAEnF,EAAkB,WAAEuI,EAAU,eAAE2B,EAAc,UAAEC,EAAS,OACzGC,EAAM,YAAEC,EAAW,aAAEC,KAAiBC,GACpCN,EACJlB,EAAayB,WAAYxI,KAAK,IACzBuI,EACHE,MAAOlC,GAA0B5F,EACjC+H,WAAYR,EACZ5G,MAAO6G,EACPC,OAAQA,EACRO,aAAc1C,EACd2C,mBAAoB,CAClBrC,WAAYA,EACZC,WAAY6B,EACZQ,YAAaP,EACbnC,QAAS7D,eAAgBwG,GACvB,IACE,MAAM7K,EAAcsG,EAAUwE,KAC3BC,GAAQA,EAAIrI,KAAWmI,GAE1B,GAAI9K,EAAoB,CACtB,MAAMiL,EAAMhL,EAAYF,GAClBG,EACW,kBAAR+K,EACHC,KAAKC,MACHlL,EAAYF,GACTqL,QAAQ,KAAM,KACdA,QAAQ,MAAO,IACfA,QAAQ,MAAO,IACfA,QAAQ,SAAU,SAClBA,QAAQ,QAAS,SAEtBH,EACNxB,GAAa,GACbC,EAAa,CACXpH,iBACA6C,WAAYA,EACZX,SAAUA,EACVC,KAAMA,EACNxE,YAAaA,EACb2E,OAAQA,EACR7E,eACAC,qBACAE,kBAEF,MAAMmL,EAAmB,GACzBrL,EAAmBf,IAAKC,IACtBmM,EAAYnM,GAAQgB,EAAchB,KAEpCW,EAAcwL,QACT,GAAItL,GAAgBuC,EACzBmH,GAAa,GACbC,EAAa,CACXpH,iBACA6C,WAAYA,EACZX,SAAUA,EACVC,KAAMA,EACNxE,YAAaA,EACb2E,OAAQA,IAEV/E,EAAcI,EAAYF,QACrB,CACL,GAAIuL,OAAOC,QAAQjJ,GAAiB,OAChB2C,IAAMC,KAAKC,EAAY,CACvCX,SAAUA,EACVC,KAAMA,EACNC,aAAczE,KACX2E,IAGP9E,IAAOyF,QAAQ,aAEjB,MAAOE,GACPD,MAAM,GAADrG,OAAIsG,cAUvB,MAAM+F,EAAkBlH,UACtB,MAAMmH,QAAcC,IACpB,OAAc,IAAVD,IACJnC,EAAWmC,GACXlF,EAAYkF,GACL,IAGTpL,oBAAU,KACRsL,KACC,CAAChC,IAEJ,MAAM+B,EAAYpH,UAChB,IACE,MAAMsH,OA5IgBtH,WACxB,IAEE,GADAO,QAAQC,IAAI,4BAA6BsE,GACjB,OAApBA,EAEF,OADAvE,QAAQC,IAAI,qCACL,EAET,GAAwB,OAApBsE,QAAgD/E,IAApB+E,EAA+B,CAAC,IAADyC,EAC7D,MAAMC,EAAUpD,EAAIqD,MAAM,KAAKC,MAAM,GAAI,GAAGC,KAAK,KAEjDpH,QAAQC,IAAI,UAAWsE,GACvB,MAAMpE,QAAYC,IAAMiH,IAAI,GAAD/M,OAAI2M,EAAO,gBAAgB,CACpDK,OAAQ,CACNhD,QAASA,EACTiD,YAAa5H,EACbC,KAAMA,EACN2E,gBAAiBA,KAIrB,OAAY,QAARyC,EAAA7G,EAAID,YAAI,IAAA8G,OAAA,EAARA,EAAUhC,gBAAiBA,IAE7BC,EAAgB9E,EAAID,KAAK8E,eAClB,GAKX,OAAO,EACP,MAAOpE,GAEP,OADA3F,IAAO2F,MAAM,kCAADtG,OAAmCsG,EAAME,WAC9C,IA6GsB0G,GAE7B,GADAxH,QAAQC,IAAI,iBAAkB8G,EAAgBlD,IACzCkD,EACH,OAAO,EAET/G,QAAQC,IAAI,mBAAoB4D,GAChC,MAAM1D,QAAYC,IAAMC,KAAKwD,EAAK,CAChClE,SAAUA,EACVC,KAAMA,KACHG,EACH0H,sBAAuBpD,EAAeA,EAAaS,GAAU,SAG/D,OADcuB,KAAKC,MAAMnG,EAAID,MAE7B,MAAOU,GAEP,OADA3F,IAAO2F,MAAM,gBAADtG,OAAiBsG,EAAME,WAC5B,IAIXtF,oBAAU,KACR,GAAIuI,GAAeA,EAAc,EAAG,CAClC,MAAM2D,EAAWC,YAAYhB,EAA+B,IAAd5C,GAC9C,IAAI6D,EASJ,OARI5D,EAAqB,IACvBhE,QAAQC,IAAI+D,GACZ4D,EAAUnM,WAAW,KACnBoM,cAAcH,GACd1H,QAAQC,IAAI,qCAAsC8D,IAC5B,IAArBC,IAELhE,QAAQY,MAAM,qBAAsB8B,GAC7B,KACLmF,cAAcH,GACVE,GAASE,aAAaF,MAG7B,CAAClF,EAAOoC,IAiBSiD,sBAAaC,IAC/B,MAAMC,EAAyB,GAC/BrE,EAAQjI,QAASuM,UAAUC,aAAcC,QAASxF,IAChDqF,EAAa9K,KAAKyF,EAAOyF,WAE3BzE,EAAQjI,QAASuM,UAAUI,gBAAgBL,EAAcD,IACxD,IAEeD,sBAAY,KAC5BnE,EAAQjI,QAASkI,IAAI0E,iBAAiB,CACpCC,gBAAiB,OAElB,IAZH,MAcMC,EAAcV,sBAAYtI,UAC9BhE,WAAWgE,UACT,IACE,MAAMmH,QAAcC,IAEpB,IAAc,IAAVD,EAEF,OAEFnC,EAAWmC,GACXlF,EAAYkF,EACZ,MAAOhG,GACP3F,IAAO2F,MAAM,UAADtG,OAAWsG,EAAME,YAE9B,MACF,IAEG4H,EAAqBC,kBAAgB,KAClC,CACL1K,SAAU,MAEX,IAEG2K,EAAWD,kBAAsB,IAC7BrB,GACCA,EAAOpH,KAAKpC,GAEpB,CAACA,IA0BE+K,GAxBUF,kBAEd,KACO,CACLG,WAAY,CACV,CACEtF,GAAI,UACJuF,aAAc,UACdC,SAAU,UACVC,QAAS,UACTC,UAAW,sBAEb,CACE1F,GAAI,UACJuF,aAAc,UACdC,SAAU,UACVC,QAAS,SACTC,UAAW,uBAGfC,iBAAkB,gBAEnB,IAEwBpB,sBAAaqB,IACjB,OAAjBzH,IAAuBA,EAAe,IAC1CA,EAAayH,EAAMlJ,KAAKpC,IAAUsL,EAAMlJ,KACxCF,QAAQC,IAAI,uBAAwB0B,IACnC,MAGI0H,EAASC,GAAc5E,oBAAS,GAEjCoC,EAAYrH,UAChB6J,GAAW,GACX,UACwB3C,KACX1L,IAAOyF,QAAQ,oBAC1B,MAAOE,GACP3F,IAAO2F,MAAM,mBAADtG,OAAoBsG,EAAME,UACvC,QACCwI,GAAW,KAwBTC,GAAcZ,kBAAa,KACxB,CACLa,iBAAkB,CAChBC,OAAQ,qBACRC,aAAc,CACZC,WAAYA,CAACC,EAAkBC,IAC7BC,YAAW,IAAI/H,KAAK8H,GAAYD,KAGtCG,mBAAoB,CAClBN,OAAQ,wBAEVO,oBAAqB,CACnBC,eAAiB3C,GACf1F,EAAc0F,EAAOtK,MAAO,qBAEhCkN,qBAAsB,CACpBD,eAAiB3C,GACf1F,EACE0F,EAAOtK,MACPsK,EAAO1E,OAAOC,OAAOsH,uBAG3BC,oBAAqB,CACnBH,eAAiB3C,IAAW,IAAA+C,EAAA,OAC1B9H,EAAgB+E,EAAOtK,MAAqC,QAAhCqN,EAAE/C,EAAO1E,OAAOC,OAAOL,iBAAS,IAAA6H,IAAI,KAEpEC,qBAAsB,CACpBL,eAAiB3C,GACftF,EACEsF,EAAOtK,MACPsK,EAAO1E,OAAOC,OAAO0H,yBAG3BC,gBAAiB,CACfP,eAAiB3C,GAAgBmD,mBAASnD,EAAOtK,OAAO0N,UAAS,IAEnEC,mBAAoB,CAClBV,eAAiB3C,GACfnI,OAAOmI,EAAOtK,OAAO4N,eAAe,QAAS,CAC3CC,sBAAuB,KAG7BC,wBAAyB,CAGvBhF,aAAcrD,EACdsD,mBAAoB,CAClBjD,QAAS,yBAId,IAYH,SAASqB,GAAsB4G,GAE7B,IAIIC,EAJU,IAAIC,OAAO,GAAD3Q,OADD,aAEJ,oCAAAA,OAFI,eAKH4Q,KAAKH,GAEzB,GAAIC,EAAO,CAET,MAAMG,EAAUH,EAAM,GAEtB,OAAO,IAAII,SAAS,UAAYD,EAAzB,GAEP,OAAOJ,EAIX,MAgCMM,IAdkBxN,GAcWwG,EAAaxG,QAbjC,EACJ,CAAEwB,QAAS,YAAalB,SAAU,QAChCN,GAAS,EACX,CAAEwB,QAAS,YAAalB,SAAU,QAChCN,GAAS,GACX,CAAEwB,QAAS,YAAalB,SAAU,QAChCN,GAAS,GACX,CAAEwB,QAAS,YAAalB,SAAU,QAElC,CAAEkB,QAAS,UAAWlB,SAAU,QAVnBN,OAkBxB,OACET,IAAAC,cAAAD,IAAA2B,SAAA,KACE3B,IAAAC,cAAC3C,EAAO,CACNE,OAAQ+J,EACR9J,WAAYA,IAAM+J,GAAa,GAC/B9J,UAAWA,EACXC,WAAYA,EACZC,cAAeA,EACfC,OAAQA,MAEVmC,IAAAC,cAAA,OACEE,MAAO,CAAE+N,cAAe,MAAO5M,OAAQ,OAAQD,MAAO,QACtD+E,GAAG,UAEHpG,IAAAC,cAAA,OAAKC,UAAU,2DACIkC,GAAfuE,GAA2C,GAAfA,IAC5B3G,IAAAC,cAAA,OAAKE,MAAO,CAAEC,QAAS,SACrBJ,IAAAC,cAAA,OAAKE,MAAO,CAAEgO,OAAQ,oBACpBnO,IAAAC,cAAA,UACEC,UAAU,MACVC,MAAO,CACLiO,gBAvBG,UAwBHC,MAAO,QACPpM,QAAS,UACTlB,SAAU,OACVuN,aAAc,MACdlO,QAAS,OACTmO,WAAY,SACZC,eAAgB,SAChB3N,SAAU,QAEZP,QAASoJ,EACT+E,SAAUxC,GAETA,EACCjM,IAAAC,cAAA,OACEE,MAAO,CACLkB,MAAO,OACPC,OAAQ,OACRoN,OAAQ,kBACRC,UAAW,wBACXL,aAAc,MACdM,UAAW,+BAIf,WAKJ5O,IAAAC,cAAA,6MAUFD,IAAAC,cAAA,OAAKE,MAAO,CAAEgO,OAAQ,oBACpBnO,IAAAC,cAAA,UACEC,UAAU,MACVC,MAAO,CACLiO,gBAAiB,QACjBC,MAAO,QACPpM,QAAS,UACTlB,SAAU,OACVuN,aAAc,OAEhBhO,QAjNC+B,UACf,GAAqB,OAAjBkC,EAIJ,IACE,MAAMxB,QAAiBC,IAAMC,KAAKyD,EAAY,CAC5CnE,SAAUA,EACVC,KAAMA,EACNqM,SAAUtK,KACP5B,IAEL4B,EAAe,KACXxB,EAAII,OAAQtF,IAAOyF,QAAQ,0BAC1BzF,IAAO2F,MAAM,WAADtG,OAAY6F,EAAIW,UACjC,MAAOF,GACP3F,IAAO2F,MAAM,WAADtG,OAAYsG,SAdxB3F,IAAOiR,QAAQ,0BAgNJ,YAMP9O,IAAAC,cAAA,OAAKC,UAAU,mCACF,OAAZ+G,QAAY,IAAZA,OAAY,EAAZA,EAAcjK,IAAI,CAAC+R,EAAcrO,IAClCV,IAAAC,cAAA,QAAMU,IAAKD,GACTV,IAAAC,cAAA,UACEC,UAAS,OAAAhD,OACPwK,IAAWhH,EAAQ,aAAe,iBAEpCP,MAAO,IACF8N,GACHK,aAAc,MAEdD,MAAO,UACPD,gBAAiB,UACjBD,OAAQ,MACRnM,WAAY,QAEd1B,QAASA,IAAMqH,EAAUjH,GACzB+N,SAAUxC,GAET8C,EACA9C,GAAWvE,IAAWhH,EACrBV,IAAAC,cAAA,OACEE,MAAO,CACLkB,MAAO,OACPC,OAAQ,OACRoN,OAAQ,kBACRC,UAAW,wBACXL,aAAc,MACdM,UAAW,4BACXI,WAAY,SAGd,SAOZhP,IAAAC,cAAA,iJAWED,IAAAC,cAAA,OACEC,UAAW4G,EAAamI,OAAS,uBACjC9O,MAAO,CACLkB,MAAO,OACPC,OAAQqB,EAAoB,YAAIA,EAAoB,YAAI,SAG1D3C,IAAAC,cAACiP,cAAW,CACVhR,IAAKsI,EACLY,QAASA,EACT+H,YA9KWjF,IACnB,IAAK,IAADkF,EAAAC,EACF,MAAMhJ,EAAqC,QAA3B+I,EAAGlF,EAAOpH,KAAgB,iBAAC,IAAAsM,SAAIhN,EAE/C,MAAO,CAAEiE,aAAYgI,MADsB,QAAhCgB,EAAGnF,EAAOpH,KAAqB,sBAAC,IAAAuM,SAAIjN,GAE/C,MAAOoB,GAEP,YADAZ,QAAQY,MAAM,6BAA8BA,KAyKtC8L,SAAU,CAAEvO,SAAU,GAAIkB,QAAS,GACnCsN,aAAc,GACdC,UAAW,GACXnE,YAAaA,EACbC,mBAAoBA,EACpBmE,aAAa,EACbC,yBAAyB,EACzBlE,SAAUA,EACVmE,YAAa7I,EACb2E,mBAAoBA,EACpBU,YAAaA,SChtBVyD,kBAhCDtK,IACZ,MAAM,SACJ/C,EAAQ,IACRkE,EAAG,WACHC,EAAU,YACVC,EAAW,mBACXC,EAAkB,iBAClBiJ,EAAgB,cAChBhJ,EAAa,KACbrE,GACE8C,EAAMwK,MACJ,aAAEhJ,EAAY,OAAEnE,EAAS,IAAO2C,EAAMwK,MACtC,MAAEpP,EAAK,MAAEuO,GAAUnI,EAEzB,OACE9G,IAAAC,cAAA,WACED,IAAAC,cAAC8P,EAAM,CACLxN,SAAUA,EACVkE,IAAKA,EACLC,WAAYA,EACZC,YAAaA,EACbC,mBAAoBA,EACpBiJ,iBAAkBA,EAClBrN,KAAMA,EACNsE,aAAcA,EACdpG,MAAOA,EACPiC,OAAQA,EACRkE,cAAeA,OClCvBmJ,IAASC,OACPjQ,IAAAC,cAACD,IAAMkQ,WAAU,KACflQ,IAAAC,cAACkQ,EAAI,OAEPC,SAASC,eAAe,U","file":"static/js/main.a3ecfbe2.chunk.js","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport ReactModal from \"react-modal\";\nimport \"./modal.css\";\nimport axios from \"axios\";\nimport { utcToZonedTime, format } from 'date-fns-tz';\nimport moment from \"moment\";\n\nconst formats = [\"YYYY-MM-DDTHH:mm\", \"MM/DD/YYYYTHH:mm\", \"MM/DD/YYYY HH:mm\", \"YYYY-MM-DD HH:mm\"];\nconst sliderRules = [\"buying_power\", \"borrow_power\"]\nconst sliderRules_stars = [\"Day\", \"Week\", \"Month\", \"Quarter\", \"Quarters\", \"Year\"];\nconst sliderRules_stars_margin = sliderRules_stars.map(rule => `${rule} Margin`);\n\n\nconst modalStyle = {\n  content: {\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\",\n    backgroundColor: \"yellow\",\n  },\n};\n\nReactModal.setAppElement(\"#root\");\nlet isExecuting = false;\n\ninterface MyModalProps {\n  isOpen: boolean;\n  closeModal: () => void;\n  modalData: any;\n  promptText: any;\n  setPromptText: (value: any) => void;\n  toastr: any; // Define the toastr type if available\n}\n\nconst MyModal: React.FC<MyModalProps> = ({\n  isOpen,\n  closeModal,\n  modalData,\n  promptText,\n  setPromptText,\n  toastr,\n}) => {\n  const { prompt_field, prompt_order_rules, selectedRow, selectedField } = modalData;\n\n  const ref = useRef<HTMLButtonElement>(null);\n  const selectRef = useRef<HTMLSelectElement>(null);\n\n  const handleOk = async () => {\n    if (isExecuting) return;\n    isExecuting = true;\n    try {\n      const { data: res } = await axios.post(modalData.button_api, {\n        username: modalData.username,\n        prod: modalData.prod,\n        selected_row: modalData.selectedRow,\n        default_value: promptText,\n        ...modalData.kwargs,\n      });\n      const { status, data, description } = res;\n      console.log(\"res :>> \", res);\n      if (status === \"success\") {\n        data.message_type === \"fade\"\n          ? toastr.success(description, \"Success\")\n          : alert(\"Success!\\nDescription: \" + description);\n      } else {\n        data.message_type === \"fade\"\n          ? toastr.error(description, \"Error\")\n          : alert(\"Error!\\nDescription: \" + description);\n      }\n      if (data?.close_modal != false) closeModal();\n    } catch (error: any) {\n      console.log(\"error :>> \", error);\n      toastr.error(error.message);\n    }\n    isExecuting = false;\n  };\n\n  const handleOkSecond = async () => {\n    if (isExecuting) return;\n    isExecuting = true;\n    try {\n      const body = {\n        username: modalData.username,\n        prod: modalData.prod,\n        selected_row: modalData.selectedRow,\n        default_value: promptText,\n        ...modalData.kwargs,\n      };\n      console.log(\"body :>> \", body);\n      const { data: res } = await axios.post(modalData.button_api, body);\n      const { status, data, description } = res;\n      if (status === \"success\") {\n        data.message_type === \"fade\"\n          ? toastr.success(description, \"Success\")\n          : alert(\"Success!\\nDescription: \" + description);\n      } else {\n        data.message_type === \"fade\"\n          ? toastr.error(description, \"Error\")\n          : alert(\"Error!\\nDescription: \" + description);\n      }\n      if (data?.close_modal != false) closeModal();\n    } catch (error: any) {\n      console.log(\"error :>> \", error);\n      toastr.error(error.message);\n    }\n    isExecuting = false;\n  };\n\n  const handleOkOnArray = async () => {\n    console.log(\"selectRef.current.value :>> \", selectRef.current?.value);\n    if (isExecuting) return;\n    isExecuting = true;\n    try {\n      const body = {\n        username: modalData.username,\n        prod: modalData.prod,\n        selected_row: modalData.selectedRow,\n        default_value: selectRef.current?.value,\n        ...modalData.kwargs,\n      };\n      console.log(\"body :>> \", body);\n      const { data: res } = await axios.post(modalData.button_api, body);\n      const { status, data, description } = res;\n      console.log(\"res :>> \", res);\n      if (status === \"success\") {\n        data.message_type === \"fade\"\n          ? toastr.success(description, \"Success\")\n          : alert(\"Success!\\nDescription: \" + description);\n      } else {\n        data.message_type === \"fade\"\n          ? toastr.error(description, \"Error\")\n          : alert(\"Error!\\nDescription: \" + description);\n      }\n      if (data?.close_modal != false) closeModal();\n    } catch (error: any) {\n      console.log(\"error :>> \", error);\n      toastr.error(error.message);\n    }\n    isExecuting = false;\n  };\n\n  useEffect(() => {\n    if (isOpen) setTimeout(() => ref.current?.focus(), 100);\n  }, [isOpen]);\n\n  const isValidDate = (dateStr: string) => {\n    return formats.some(format => moment(dateStr, format, true).isValid());\n  };\n\n  const formatToLocalDatetime = (dateStr: string) => {\n    const date = moment(dateStr, formats, true).toDate();\n    const timeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n    const zonedDate = utcToZonedTime(date, timeZone);\n    return format(zonedDate, 'yyyy-MM-dd\\'T\\'HH:mm');\n  };\n\n  // Categorize fields by type\n  const textFields = [];\n  const booleanFields = [];\n  const datetimeFields = [];\n  const arrayFields = [];\n\n  if (prompt_order_rules) {\n    for (const rule of prompt_order_rules) {\n      const value = promptText[rule];\n      if (Array.isArray(value)) {\n        arrayFields.push(rule);\n      } else if (typeof value === \"boolean\") {\n        booleanFields.push(rule);\n      } else if (isValidDate(value)) {\n        datetimeFields.push(rule);\n      } else {\n        textFields.push(rule);\n      }\n    }\n  }\n  \n\n  \nreturn (\n    <div className=\"my-modal\" style={{ display: isOpen ? \"block\" : \"none\" }}>\n      <div className=\"my-modal-content\">\n        {/* Modal Header */}\n        <div className=\"modal-header px-3 d-flex justify-content-center align-items-center\">\n          <h4 className=\"text-center m-0\">{modalData.prompt_message}</h4>\n          <span className=\"close\" onClick={closeModal} style={{ position: \"absolute\", right: \"20px\" }}>\n            &times;\n          </span>\n        </div>\n  \n        {/* Modal Body */}\n        <div className=\"modal-body p-3\">\n          <div className=\"d-flex flex-column\">\n            {/* Boolean Fields Top Row */}\n            {booleanFields.length > 0 && (\n              <div className=\"d-flex flex-row justify-content-between mb-2\">\n                {booleanFields.map((rule: any, index: number) => (\n                  <div className=\"d-flex flex-column align-items-center\" key={index} style={{ marginRight: \"8px\" }}>\n                    <label className=\"mb-0\" style={{ minWidth: \"100px\", textAlign: \"center\", fontSize: \"0.9rem\" }}>\n                      {rule}:\n                    </label>\n                    <input\n                      type=\"checkbox\"\n                      checked={promptText[rule]}\n                      onChange={(e) =>\n                        setPromptText({\n                          ...promptText,\n                          [rule]: e.target.checked,\n                        })\n                      }\n                      style={{ width: \"16px\", height: \"16px\", marginTop: \"4px\" }}\n                    />\n                  </div>\n                ))}\n              </div>\n            )}\n\n\n            {/* Other Fields (Text, Datetime, Array Fields) */}\n            <div className=\"d-flex flex-row justify-content-between\">\n              {/* Text Fields Column */}\n              {textFields.length > 0 && (\n                <div className=\"d-flex flex-column\" style={{ flex: 1, marginRight: \"8px\" }}>\n                  {textFields.map((rule: any, index: number) => {\n\n                    // Skip rendering if the rule is in the sliderRules_stars list\n                    if (sliderRules_stars.includes(rule)) return null;\n                    if (sliderRules_stars_margin.includes(rule)) return null;\n\n                    const isSliderRule = sliderRules.includes(rule);\n\n                    return (\n                      <div className=\"d-flex flex-column align-items-start mb-1\" key={index}>\n                        <label className=\"mb-0\" style={{ fontSize: \"0.9rem\" }}>\n                          {rule}:\n                        </label>\n                        {/* Render the slider for rules that are in sliderRules but not in sliderRules_stars */}\n                        {isSliderRule ? (\n                          <>\n                            <input\n                              type=\"range\"\n                              min=\"0\"\n                              max=\"1\"\n                              step=\".01\"\n                              value={promptText[rule] || 0}\n                              onChange={(e) =>\n                                setPromptText({\n                                  ...promptText,\n                                  [rule]: Number(e.target.value),\n                                })\n                              }\n                              style={{ width: \"100%\" }}\n                            />\n                            <span style={{ fontSize: \"0.9rem\", fontWeight: \"bold\", marginTop: \"4px\" }}>\n                              {promptText[rule] || 0}\n                            </span>\n                          </>\n                        ) : (\n                          <input\n                            type=\"text\"\n                            value={promptText[rule]}\n                            onChange={(e) =>\n                              setPromptText({\n                                ...promptText,\n                                [rule]: e.target.value,\n                              })\n                            }\n                            style={{ flex: 1, width: \"100%\", padding: \"4px\", fontSize: \"0.9rem\" }}\n                          />\n                        )}\n                      </div>\n                    );\n                  })}\n                </div>\n              )}\n\n\n              {/* Array Fields Column */}\n              {arrayFields.length > 0 && (\n                <div className=\"d-flex flex-column\" style={{ flex: 1 }}>\n                  {arrayFields.map((rule: any, index: number) => (\n                    <div className=\"d-flex flex-column align-items-start mb-1\" key={index}>\n                      <label className=\"mb-0\" style={{ fontSize: \"0.9rem\" }}>\n                        {rule}:\n                      </label>\n                      <select\n                        value={promptText[rule][0]}\n                        onChange={(e) =>\n                          setPromptText({\n                            ...promptText,\n                            [rule]: [e.target.value],\n                          })\n                        }\n                        style={{ flex: 1, width: \"100%\", padding: \"4px\", fontSize: \"0.9rem\" }}\n                      >\n                        {promptText[rule].map((item: any, i: number) => (\n                          <option key={i} value={item}>\n                            {item}\n                          </option>\n                        ))}\n                      </select>\n                    </div>\n                  ))}\n                </div>\n              )}\n\n            {/* New Column for sliderRules_stars */}\n            {sliderRules_stars.some((rule: any) => promptText[rule] !== undefined) && (\n              <div className=\"d-flex flex-column\" style={{ flex: 1, marginRight: \"8px\" }}>\n                {sliderRules_stars.map((rule: any, index: number) => \n                  promptText[rule] !== undefined && (\n                    <div className=\"d-flex flex-column align-items-start mb-1\" key={index}>\n                      <label className=\"mb-0\" style={{ fontSize: \"0.9rem\" }}>\n                        {rule}:\n                      </label>\n                      <input\n                        type=\"range\"\n                        min=\"0\"\n                        max=\"1\"\n                        step=\".01\"\n                        value={promptText[rule] || 0}\n                        onChange={(e) =>\n                          setPromptText({\n                            ...promptText,\n                            [rule]: Number(e.target.value),\n                          })\n                        }\n                        style={{ width: \"100%\" }}\n                      />\n                      <span style={{ fontSize: \"0.9rem\", fontWeight: \"bold\", marginTop: \"4px\" }}>\n                        {promptText[rule] || 0}\n                      </span>\n                    </div>\n                  )\n                )}\n              </div>\n            )}\n\n            {sliderRules_stars_margin.some((rule: any) => promptText[rule] !== undefined) && (\n              <div className=\"d-flex flex-column\" style={{ flex: 1, marginRight: \"8px\" }}>\n                {sliderRules_stars_margin.map((rule: any, index: number) => \n                  promptText[rule] !== undefined && (\n                    <div className=\"d-flex flex-column align-items-start mb-1\" key={index}>\n                      <label className=\"mb-0\" style={{ fontSize: \"0.9rem\" }}>\n                        {rule}:\n                      </label>\n                      <input\n                        type=\"range\"\n                        min=\"0\"\n                        max=\"1\"\n                        step=\".01\"\n                        value={promptText[rule] || 0}\n                        onChange={(e) =>\n                          setPromptText({\n                            ...promptText,\n                            [rule]: Number(e.target.value),\n                          })\n                        }\n                        style={{ width: \"100%\" }}\n                      />\n                      <span style={{ fontSize: \"0.9rem\", fontWeight: \"bold\", marginTop: \"4px\" }}>\n                        {promptText[rule] || 0}\n                      </span>\n                    </div>\n                  )\n                )}\n              </div>\n            )}\n  \n              {/* Datetime Fields Column */}\n              {datetimeFields.length > 0 && (\n                <div className=\"d-flex flex-column\" style={{ flex: 1, marginRight: \"8px\" }}>\n                  {datetimeFields.map((rule: any, index: number) => (\n                    <div className=\"d-flex flex-column align-items-start mb-1\" key={index}>\n                      <label className=\"mb-0\" style={{ fontSize: \"0.9rem\" }}>\n                        {rule}:\n                      </label>\n                      <input\n                        type=\"datetime-local\"\n                        value={promptText[rule] && formatToLocalDatetime(promptText[rule])}\n                        onChange={(e) =>\n                          setPromptText({\n                            ...promptText,\n                            [rule]: e.target.value,\n                          })\n                        }\n                        style={{ flex: 1, width: \"100%\", padding: \"4px\", fontSize: \"0.9rem\" }}\n                      />\n                    </div>\n                  ))}\n                </div>\n              )}\n  \n\n            </div>\n          </div>\n        </div>\n  \n        {/* Modal Footer */}\n        <div className=\"modal-footer d-flex justify-content-center\">\n          <button type=\"button\" className=\"btn btn-primary mx-2\" onClick={handleOkSecond} ref={ref}>\n            Ok\n          </button>\n          <button type=\"button\" className=\"btn btn-secondary mx-2\" onClick={closeModal}>\n            Cancel\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n  \n};\n\nexport default MyModal;\n","// stole from https://github.com/andfanilo/streamlit-echarts/blob/master/streamlit_echarts/frontend/src/utils.js Thanks andfanilo\nfunction mapObject(obj, fn, keysToIgnore) {\n    let keysToMap = Object.keys(obj)\n    return keysToMap.reduce((res, key) => {\n        if (!keysToIgnore.includes(key)) {\n            res[key] = fn(obj[key]);\n            return res\n        }\n        res[key] = obj[key];\n        return res\n\n    }, {})\n}\n\nfunction deepMap(obj, fn, keysToIgnore = []) {\n    const deepMapper = (val) =>\n        val !== null && typeof val === \"object\" ? deepMap(val, fn) : fn(val)\n    if (Array.isArray(obj)) {\n        return obj.map(deepMapper)\n    }\n    if (typeof obj === \"object\") {\n        return mapObject(obj, deepMapper, keysToIgnore)\n    }\n    return obj\n}\n\nexport { deepMap }\n","import React, {\r\n  useState,\r\n  useEffect,\r\n  useMemo,\r\n  useRef,\r\n  useCallback\r\n} from \"react\"\r\nimport { AgGridReact } from \"ag-grid-react\"\r\nimport { RowClassParams } from 'ag-grid-community';\r\n\r\nimport toastr from \"toastr\"\r\nimport \"toastr/build/toastr.min.css\"\r\nimport \"ag-grid-community/styles/ag-grid.css\"\r\nimport \"ag-grid-community/styles/ag-theme-alpine.css\"\r\nimport \"ag-grid-community/styles/ag-theme-balham.css\"\r\nimport \"ag-grid-community/styles/ag-theme-material.css\"\r\nimport MyModal from './components/Modal'\r\nimport \"ag-grid-enterprise\"\r\nimport { parseISO, compareAsc } from \"date-fns\"\r\nimport { format } from \"date-fns-tz\"\r\nimport { duration } from \"moment\"\r\nimport \"./styles.css\"\r\nimport axios from \"axios\"\r\nimport { io } from \"socket.io-client\";\r\n\r\nimport {\r\n  ComponentProps,\r\n  Streamlit,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\"\r\nimport {\r\n  ColDef,\r\n  ColGroupDef,\r\n  ColumnResizedEvent,\r\n  GetRowIdFunc,\r\n  GetRowIdParams,\r\n  Grid,\r\n  GridOptions,\r\n  GridReadyEvent,\r\n  SideBarDef,\r\n  ValueParserParams,\r\n} from \"ag-grid-community\"\r\nimport {deepMap} from \"./utils\"\r\n\r\n\r\ntype Props = {\r\n  username: string\r\n  api: string\r\n  api_update: string\r\n  refresh_sec?: number\r\n  refresh_cutoff_sec?: number\r\n  gridoption_build?: any\r\n  prod?: boolean\r\n  grid_options?: any\r\n  index: string\r\n  enable_JsCode: boolean\r\n  kwargs: any\r\n}\r\n\r\nlet g_rowdata: any[] = []\r\nlet g_newRowData: any = null\r\n\r\nfunction dateFormatter(isoString: string, formaterString: string): String {\r\n  try {\r\n    let date = new Date(isoString)\r\n    return format(date, formaterString)\r\n  } catch {\r\n    return isoString\r\n  } finally {\r\n  }\r\n}\r\n\r\nfunction currencyFormatter(number: any, currencySymbol: string): String {\r\n  let n = Number.parseFloat(number)\r\n  if (!Number.isNaN(n)) {\r\n    return currencySymbol + n.toFixed(2)\r\n  } else {\r\n    return number\r\n  }\r\n}\r\n\r\nfunction numberFormatter(number: any, precision: number): String {\r\n  let n = Number.parseFloat(number)\r\n  if (!Number.isNaN(n)) {\r\n    return n.toFixed(precision)\r\n  } else {\r\n    return number\r\n  }\r\n}\r\n\r\nconst columnFormaters = {\r\n  columnTypes: {\r\n    dateColumnFilter: {\r\n      filter: \"agDateColumnFilter\",\r\n      filterParams: {\r\n        comparator: (filterValue: any, cellValue: string) =>\r\n          compareAsc(parseISO(cellValue), filterValue),\r\n      },\r\n    },\r\n    numberColumnFilter: {\r\n      filter: \"agNumberColumnFilter\",\r\n    },\r\n    shortDateTimeFormat: {\r\n      valueFormatter: (params: any) =>\r\n        dateFormatter(params.value, \"dd/MM/yyyy HH:mm\"),\r\n    },\r\n    customDateTimeFormat: {\r\n      valueFormatter: (params: any) =>\r\n        dateFormatter(params.value, params.column.colDef.custom_format_string),\r\n    },\r\n    customNumericFormat: {\r\n      valueFormatter: (params: any) =>\r\n        numberFormatter(params.value, params.column.colDef.precision ?? 2),\r\n    },\r\n    customCurrencyFormat: {\r\n      valueFormatter: (params: any) =>\r\n        currencyFormatter(\r\n          params.value,\r\n          params.column.colDef.custom_currency_symbol\r\n        ),\r\n    },\r\n    timedeltaFormat: {\r\n      valueFormatter: (params: any) => duration(params.value).humanize(true),\r\n    },\r\n  },\r\n}\r\n\r\nconst HyperlinkRenderer = (props: any) => {\r\n  return (\r\n    <a\r\n      href={`${props.column.colDef.baseURL}/${\r\n        props.data[props.column.colDef[\"linkField\"]]\r\n      }`}\r\n      target=\"_blank\"\r\n    >\r\n      {props.value}\r\n    </a>\r\n  )\r\n}\r\n\r\ntoastr.options = {\r\n  positionClass: \"toast-top-full-width\",\r\n  hideDuration: 300,\r\n  timeOut: 3000,\r\n}\r\n\r\nconst AgGrid = (props: Props) => {\r\n  const BtnCellRenderer = (props: any) => {\r\n    const btnClickedHandler = () => {\r\n      props.clicked(props.node.id)\r\n    }\r\n    return (\r\n      <button\r\n        onClick={btnClickedHandler}\r\n        style={{\r\n          background: \"transparent\",\r\n          // color: props.color ? props.color : \"black\",\r\n          width: props.width ? props.width : \"100%\",\r\n          // borderColor: props.borderColor ? props.borderColor : \"black\",\r\n        }}\r\n      >\r\n        {props.col_header ? props.value : props.buttonName}\r\n      </button>\r\n    )\r\n  }\r\n\r\n  const gridRef = useRef<AgGridReact>(null)\r\n  const {\r\n    username,\r\n    api,\r\n    api_update,\r\n    refresh_sec = undefined,\r\n    refresh_cutoff_sec = 0,\r\n    prod = true,\r\n    index,\r\n    enable_JsCode,\r\n    kwargs,\r\n  } = props\r\n  let { grid_options = {} } = props\r\n  //parsing must be done here. For some unknow reason if its moved after the\r\n  //button mapping, deepMap gets lots of React objects (api, symbolRefs, etc.)\r\n  //this impacts performance and crashes the grid.\r\n  if (enable_JsCode) {\r\n    grid_options = deepMap(grid_options, parseJsCodeFromPython, [\"rowData\"])\r\n  }\r\n\r\n  let { buttons, toggle_views, api_key, api_lastmod_key = null} = kwargs\r\n  const [rowData, setRowData] = useState<any[]>([])\r\n  const [modalShow, setModalshow] = useState(false)\r\n  const [modalData, setModalData] = useState({})\r\n  const [promptText, setPromptText] = useState(\"\")\r\n  const [viewId, setViewId] = useState(0)\r\n  const [lastModified, setLastModified] = useState<string | null>(null);\r\n\r\n  const checkLastModified = async (): Promise<boolean> => {\r\n    try {\r\n      console.log(\"checking last modified...\", api_lastmod_key);\r\n      if (api_lastmod_key === null) {\r\n        console.log(\"api key is null, returning false\");\r\n        return true;\r\n      }\r\n      if (api_lastmod_key !== null && api_lastmod_key !== undefined) {\r\n        const baseurl = api.split('/').slice(0, -1).join('/');\r\n        // console.log(baseurl);\r\n        console.log(\"api key\", api_lastmod_key);\r\n        const res = await axios.get(`${baseurl}/lastmod_key`, {\r\n          params: {\r\n            api_key: api_key,\r\n            client_user: username,\r\n            prod: prod,\r\n            api_lastmod_key: api_lastmod_key,\r\n          },\r\n        });\r\n        // console.log(\"fetching data...\", res.data.lastModified);\r\n        if (res.data?.lastModified !== lastModified) {\r\n          // console.log(\"setting modified changed, fetching data...\", res.data.lastModified, lastModified);\r\n          setLastModified(res.data.lastModified);\r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n      }\r\n      return false;\r\n    } catch (error: any) {\r\n      toastr.error(`Failed to check last modified: ${error.message}`);\r\n      return false;\r\n    }\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    Streamlit.setFrameHeight()\r\n    if (buttons.length) {\r\n\r\n      buttons = deepMap(buttons, parseJsCodeFromPython, [\"rowData\"]) //if JsCode comes through buttons props\r\n\r\n      buttons.map((button: any) => {\r\n        //extracts know parameters from button, all other unknow parameters sent are stored in otherKeys\r\n        const { prompt_field, prompt_message, button_api, prompt_order_rules, col_header, col_headername, col_width, \r\n          pinned, button_name, border_color, ...otherKeys\r\n        } = button\r\n        grid_options.columnDefs!.push({\r\n          ...otherKeys, //merges all other parameters sent on buttons array on columnDefs\r\n          field: col_header ? col_header : index,\r\n          headerName: col_headername,\r\n          width: col_width,\r\n          pinned: pinned,\r\n          cellRenderer: BtnCellRenderer,\r\n          cellRendererParams: {\r\n            col_header: col_header,\r\n            buttonName: button_name,\r\n            borderColor: border_color,\r\n            clicked: async function (row_index: any) {\r\n              try {\r\n                const selectedRow = g_rowdata.find(\r\n                  (row) => row[index] === row_index\r\n                )\r\n                if (prompt_order_rules) {\r\n                  const str = selectedRow[prompt_field]\r\n                  const selectedField =\r\n                    typeof str === \"string\"\r\n                      ? JSON.parse(\r\n                          selectedRow[prompt_field]\r\n                            .replace(/'/g, '\"')\r\n                            .replace(/\\n/g, \"\")\r\n                            .replace(/\\s/g, \"\")\r\n                            .replace(/False/g, \"false\")\r\n                            .replace(/True/g, \"true\")\r\n                        )\r\n                      : str\r\n                  setModalshow(true)\r\n                  setModalData({\r\n                    prompt_message,\r\n                    button_api: button_api,\r\n                    username: username,\r\n                    prod: prod,\r\n                    selectedRow: selectedRow,\r\n                    kwargs: kwargs,\r\n                    prompt_field,\r\n                    prompt_order_rules,\r\n                    selectedField,\r\n                  })\r\n                  const rules_value: any = {}\r\n                  prompt_order_rules.map((rule: string) => {\r\n                    rules_value[rule] = selectedField[rule]\r\n                  })\r\n                  setPromptText(rules_value)\r\n                } else if (prompt_field && prompt_message) {\r\n                  setModalshow(true)\r\n                  setModalData({\r\n                    prompt_message,\r\n                    button_api: button_api,\r\n                    username: username,\r\n                    prod: prod,\r\n                    selectedRow: selectedRow,\r\n                    kwargs: kwargs,\r\n                  })\r\n                  setPromptText(selectedRow[prompt_field])\r\n                } else {\r\n                  if (window.confirm(prompt_message)) {\r\n                    const res = await axios.post(button_api, {\r\n                      username: username,\r\n                      prod: prod,\r\n                      selected_row: selectedRow,\r\n                      ...kwargs,\r\n                    })\r\n                  }\r\n                  toastr.success(\"Success!\")\r\n                }\r\n              } catch (error) {\r\n                alert(`${error}`)\r\n              }\r\n            },\r\n          },\r\n        })\r\n      })\r\n    }\r\n    // parseGridoptions()\r\n  })\r\n\r\n  const fetchAndSetData = async () => {\r\n    const array = await fetchData();\r\n    if (array === false) return false;\r\n    setRowData(array);\r\n    g_rowdata = array;\r\n    return true;\r\n  };\r\n\r\n  useEffect(() => {\r\n    onRefresh()\r\n  }, [viewId])\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const isLastModified = await checkLastModified();\r\n      console.log(\"isLastModified\", isLastModified, api);\r\n      if (!isLastModified) {\r\n        return false;\r\n      }\r\n      console.log(\"fetching data...\", api);\r\n      const res = await axios.post(api, {\r\n        username: username,\r\n        prod: prod,\r\n        ...kwargs,\r\n        toggle_view_selection: toggle_views ? toggle_views[viewId] : \"none\",\r\n      });\r\n      const array = JSON.parse(res.data);\r\n      return array;\r\n    } catch (error: any) {\r\n      toastr.error(`Fetch Error: ${error.message}`);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (refresh_sec && refresh_sec > 0) {\r\n      const interval = setInterval(fetchAndSetData, refresh_sec * 1000)\r\n      let timeout: NodeJS.Timeout\r\n      if (refresh_cutoff_sec > 0) {\r\n        console.log(refresh_cutoff_sec)\r\n        timeout = setTimeout(() => {\r\n          clearInterval(interval)\r\n          console.log(\"Fetching data ended, refresh rate:\", refresh_sec)\r\n        }, refresh_cutoff_sec * 1000)\r\n      }\r\n      console.error(\"rendered==========\", props)\r\n      return () => {\r\n        clearInterval(interval)\r\n        if (timeout) clearTimeout(timeout)\r\n      }\r\n    }\r\n  }, [props, viewId])\r\n\r\n  // useEffect(() => {\r\n  //   const baseurl = api.split('/').slice(0, -1).join('/');\r\n  //   const socket = io(`${baseurl}/ws`);\r\n\r\n  //   socket.on(\"dataUpdated\", () => {\r\n  //     console.log(\"Data update received via WebSocket\");\r\n  //     onRefresh();\r\n  //   });\r\n\r\n  //   return () => {\r\n  //     socket.disconnect();\r\n  //   };\r\n  // }, []);\r\n\r\n\r\n  const autoSizeAll = useCallback((skipHeader: boolean) => {\r\n    const allColumnIds: string[] = []\r\n    gridRef.current!.columnApi.getColumns()!.forEach((column: any) => {\r\n      allColumnIds.push(column.getId())\r\n    })\r\n    gridRef.current!.columnApi.autoSizeColumns(allColumnIds, skipHeader)\r\n  }, [])\r\n\r\n  const sizeToFit = useCallback(() => {\r\n    gridRef.current!.api.sizeColumnsToFit({\r\n      defaultMinWidth: 100,\r\n    })\r\n  }, [])\r\n\r\n  const onGridReady = useCallback(async (params: GridReadyEvent) => {\r\n    setTimeout(async () => {\r\n      try {\r\n        const array = await fetchData()\r\n        // console.log(\"AAAAAAAAAAAAAAAAAAAAAAA\", array)\r\n        if (array === false) {\r\n          // toastr.error(`Error: ${array.message}`)\r\n          return\r\n        }\r\n        setRowData(array)\r\n        g_rowdata = array\r\n      } catch (error: any) {\r\n        toastr.error(`Error: ${error.message}`)\r\n      }\r\n    }, 100)\r\n  }, [])\r\n\r\n  const autoGroupColumnDef = useMemo<ColDef>(() => {\r\n    return {\r\n      minWidth: 200,\r\n    }\r\n  }, [])\r\n\r\n  const getRowId = useMemo<GetRowIdFunc>(() => {\r\n    return (params: GetRowIdParams) => {\r\n      return params.data[index]\r\n    }\r\n  }, [index])\r\n\r\n  const sideBar = useMemo<\r\n    SideBarDef | string | string[] | boolean | null\r\n  >(() => {\r\n    return {\r\n      toolPanels: [\r\n        {\r\n          id: \"columns\",\r\n          labelDefault: \"Columns\",\r\n          labelKey: \"columns\",\r\n          iconKey: \"columns\",\r\n          toolPanel: \"agColumnsToolPanel\",\r\n        },\r\n        {\r\n          id: \"filters\",\r\n          labelDefault: \"Filters\",\r\n          labelKey: \"filters\",\r\n          iconKey: \"filter\",\r\n          toolPanel: \"agFiltersToolPanel\",\r\n        },\r\n      ],\r\n      defaultToolPanel: \"customStats\",\r\n    }\r\n  }, [])\r\n\r\n  const onCellValueChanged = useCallback((event) => {\r\n    if (g_newRowData === null) g_newRowData = {}\r\n    g_newRowData[event.data[index]] = event.data\r\n    console.log(\"Data after change is\", g_newRowData)\r\n  }, [])\r\n\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  \r\n  const onRefresh = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const success = await fetchAndSetData();\r\n      success && toastr.success(\"Refresh success!\");\r\n    } catch (error: any) {\r\n      toastr.error(`Refresh Failed! ${error.message}`);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const onUpdate = async () => {\r\n    if (g_newRowData === null) {\r\n      toastr.warning(`No changes to update`)\r\n      return\r\n    }\r\n    try {\r\n      const res: any = await axios.post(api_update, {\r\n        username: username,\r\n        prod: prod,\r\n        new_data: g_newRowData,\r\n        ...kwargs,\r\n      })\r\n      g_newRowData = null\r\n      if (res.status) toastr.success(`Successfully Updated! `)\r\n      else toastr.error(`Failed! ${res.message}`)\r\n    } catch (error) {\r\n      toastr.error(`Failed! ${error}`)\r\n    }\r\n  }\r\n\r\n  const columnTypes = useMemo<any>(() => {\r\n    return {\r\n      dateColumnFilter: {\r\n        filter: \"agDateColumnFilter\",\r\n        filterParams: {\r\n          comparator: (filterValue: any, cellValue: string) =>\r\n            compareAsc(new Date(cellValue), filterValue),\r\n        },\r\n      },\r\n      numberColumnFilter: {\r\n        filter: \"agNumberColumnFilter\",\r\n      },\r\n      shortDateTimeFormat: {\r\n        valueFormatter: (params: any) =>\r\n          dateFormatter(params.value, \"dd/MM/yyyy HH:mm\"),\r\n      },\r\n      customDateTimeFormat: {\r\n        valueFormatter: (params: any) =>\r\n          dateFormatter(\r\n            params.value,\r\n            params.column.colDef.custom_format_string\r\n          ),\r\n      },\r\n      customNumericFormat: {\r\n        valueFormatter: (params: any) =>\r\n          numberFormatter(params.value, params.column.colDef.precision ?? 2),\r\n      },\r\n      customCurrencyFormat: {\r\n        valueFormatter: (params: any) =>\r\n          currencyFormatter(\r\n            params.value,\r\n            params.column.colDef.custom_currency_symbol\r\n          ),\r\n      },\r\n      timedeltaFormat: {\r\n        valueFormatter: (params: any) => duration(params.value).humanize(true),\r\n      },\r\n      customNumberFormat: {\r\n        valueFormatter: (params: any) =>\r\n          Number(params.value).toLocaleString(\"en-US\", {\r\n            minimumFractionDigits: 0,\r\n          }),\r\n      },\r\n      customHyperlinkRenderer: {\r\n        // valueGetter: (params: any) =>\r\n        //   params.column.colDef.baseURL + params.data.honey,\r\n        cellRenderer: HyperlinkRenderer,\r\n        cellRendererParams: {\r\n          baseURL: \"URLSearchParams.co\",\r\n        },\r\n      },\r\n    }\r\n  }, [])\r\n\r\n  const onClick = () => {\r\n    toastr.clear()\r\n    setTimeout(() => toastr.success(`Settings updated `), 300)\r\n  }\r\n\r\n  type RowStyle = {\r\n    background?: string;\r\n    color?: string;\r\n  };\r\n\r\n  function parseJsCodeFromPython(v: string) {\r\n    const JS_PLACEHOLDER = \"::JSCODE::\"\r\n    let funcReg = new RegExp(\r\n      `${JS_PLACEHOLDER}\\\\s*((function|class)\\\\s*.*)\\\\s*${JS_PLACEHOLDER}`\r\n    )\r\n  \r\n    let match = funcReg.exec(v)\r\n  \r\n    if (match) {\r\n  \r\n      const funcStr = match[1]\r\n      // eslint-disable-next-line\r\n      return new Function(\"return \" + funcStr)()\r\n    } else {\r\n      return v\r\n    }\r\n  }\r\n\r\n  const getRowStyle = (params: RowClassParams<any>): RowStyle | undefined => {\r\n    try {\r\n      const background = params.data[\"color_row\"] ?? undefined;\r\n      const color = params.data[\"color_row_text\"] ?? undefined;\r\n      return { background, color };\r\n    } catch (error) {\r\n      console.error(\"Error accessing row style:\", error);\r\n      return undefined; // Return undefined when an error occurs\r\n    }\r\n  };\r\n\r\n  // interface Props {\r\n  //   toggle_views: string[];\r\n  //   viewId: number;\r\n  //   setViewId: (id: number) => void;\r\n  //   loading: boolean;\r\n  //   onUpdate: () => void;\r\n  // }\r\n  const getButtonStyle = (length: number) => {\r\n    if (length < 3) {\r\n      return { padding: \"15px 18px\", fontSize: \"18px\" };\r\n    } else if (length < 8) {\r\n      return { padding: \"15px 18px\", fontSize: \"15px\" };\r\n    } else if (length < 15) {\r\n      return { padding: \"12px 13px\", fontSize: \"13px\" };\r\n    } else if (length < 35) {\r\n      return { padding: \"10px 12px\", fontSize: \"11px\" };\r\n    } else {\r\n      return { padding: \"3px 5px\", fontSize: \"10px\" };\r\n    }\r\n  };\r\n\r\n  const buttonStyle = getButtonStyle(toggle_views.length);\r\n\r\n  const button_color = \"#3498db\"; // Set your custom button color here\r\n\r\n  return (\r\n    <>\r\n      <MyModal\r\n        isOpen={modalShow}\r\n        closeModal={() => setModalshow(false)}\r\n        modalData={modalData}\r\n        promptText={promptText}\r\n        setPromptText={setPromptText}\r\n        toastr={toastr}\r\n      />\r\n      <div\r\n        style={{ flexDirection: \"row\", height: \"100%\", width: \"100%\" }}\r\n        id=\"myGrid\"\r\n      >\r\n        <div className=\"d-flex justify-content-between align-items-center\">\r\n          {(refresh_sec == undefined || refresh_sec == 0) && (\r\n            <div style={{ display: \"flex\" }}>\r\n              <div style={{ margin: \"5px 5px 5px 2px\" }}>\r\n                <button\r\n                  className=\"btn\"\r\n                  style={{\r\n                    backgroundColor: button_color,\r\n                    color: \"white\",\r\n                    padding: \"5px 8px\", // Smaller padding\r\n                    fontSize: \"12px\", // Smaller font size\r\n                    borderRadius: \"4px\",\r\n                    display: \"flex\",\r\n                    alignItems: \"center\",\r\n                    justifyContent: \"center\",\r\n                    minWidth: \"80px\", // Ensure width stays the same during loading\r\n                  }}\r\n                  onClick={onRefresh}\r\n                  disabled={loading} // Disable button while loading\r\n                >\r\n                  {loading ? (\r\n                    <div\r\n                      style={{\r\n                        width: \"14px\",\r\n                        height: \"14px\",\r\n                        border: \"2px solid white\",\r\n                        borderTop: \"2px solid transparent\",\r\n                        borderRadius: \"50%\",\r\n                        animation: \"spin 0.8s linear infinite\",\r\n                      }}\r\n                    />\r\n                  ) : (\r\n                    \"Refresh\"\r\n                  )}\r\n                </button>\r\n\r\n                {/* Add CSS for spinner animation */}\r\n                <style>\r\n                  {`\r\n                    @keyframes spin {\r\n                      to {\r\n                        transform: rotate(360deg);\r\n                      }\r\n                    }\r\n                  `}\r\n                </style>\r\n              </div>\r\n              <div style={{ margin: \"5px 5px 5px 2px\" }}>\r\n                <button\r\n                  className=\"btn\"\r\n                  style={{\r\n                    backgroundColor: \"green\",\r\n                    color: \"white\",\r\n                    padding: \"5px 8px\", // Smaller padding\r\n                    fontSize: \"12px\", // Smaller font size\r\n                    borderRadius: \"4px\",\r\n                  }}\r\n                  onClick={onUpdate}\r\n                >\r\n                  Update\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )}\r\n          <div className=\"d-flex flex-row gap-2 flex-wrap\">\r\n          {toggle_views?.map((view: string, index: number) => (\r\n          <span key={index}>\r\n            <button\r\n              className={`btn ${\r\n                viewId === index ? \"btn-danger\" : \"btn-secondary\"\r\n              }`}\r\n              style={{\r\n                ...buttonStyle,\r\n                borderRadius: \"8px\",\r\n                //whiteSpace: \"nowrap\", // Prevent text wrapping inside buttons\r\n                color: '#055A6E',\r\n                backgroundColor: '#F3FAFD',\r\n                margin: '3px',\r\n                fontWeight: 'bold',\r\n              }}\r\n              onClick={() => setViewId(index)}\r\n              disabled={loading} // Disable button while loading\r\n            >\r\n              {view}\r\n              {loading && viewId === index ? (\r\n                <div\r\n                  style={{\r\n                    width: \"14px\",\r\n                    height: \"14px\",\r\n                    border: \"2px solid black\",\r\n                    borderTop: \"2px solid transparent\",\r\n                    borderRadius: \"50%\",\r\n                    animation: \"spin 0.8s linear infinite\",\r\n                    marginLeft: \"8px\" // Add some space between text and spinner\r\n                  }}\r\n                />\r\n              ) : null}\r\n            </button>\r\n          </span>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Add CSS for spinner animation */}\r\n      <style>\r\n        {`\r\n          @keyframes spin {\r\n            to {\r\n              transform: rotate(360deg);\r\n            }\r\n          }\r\n        `}\r\n      </style>\r\n        </div>\r\n  \r\n        <div\r\n          className={grid_options.theme || \"ag-theme-alpine-dark\"}\r\n          style={{\r\n            width: \"100%\",\r\n            height: kwargs[\"grid_height\"] ? kwargs[\"grid_height\"] : \"100%\",\r\n          }}\r\n        >\r\n          <AgGridReact\r\n            ref={gridRef}\r\n            rowData={rowData}\r\n            getRowStyle={getRowStyle}\r\n            rowStyle={{ fontSize: 12, padding: 0 }}\r\n            headerHeight={30}\r\n            rowHeight={30}\r\n            onGridReady={onGridReady}\r\n            autoGroupColumnDef={autoGroupColumnDef}\r\n            animateRows={true}\r\n            suppressAggFuncInHeader={true}\r\n            getRowId={getRowId}\r\n            gridOptions={grid_options}\r\n            onCellValueChanged={onCellValueChanged}\r\n            columnTypes={columnTypes}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default AgGrid\r\n","import React, { useEffect, useState } from 'react'\nimport {\n  ComponentProps,\n  Streamlit,\n  withStreamlitConnection,\n} from 'streamlit-component-lib'\nimport 'ag-grid-community/styles/ag-grid.css'\n// import 'ag-grid-community/styles/ag-theme-alpine.css';\nimport 'ag-grid-community/styles/ag-theme-balham.css'\nimport Aggrid from './Aggrid'\n\nconst Main = (props: ComponentProps) => {\n  const {\n    username,\n    api,\n    api_update,\n    refresh_sec,\n    refresh_cutoff_sec,\n    gridoption_build,\n    enable_JsCode,\n    prod,\n  } = props.args\n  const { grid_options, kwargs = {} } = props.args\n  const { index, theme } = grid_options\n  // console.log('GridOptions', grid_options)\n  return (\n    <div>\n      <Aggrid\n        username={username}\n        api={api}\n        api_update={api_update}\n        refresh_sec={refresh_sec}\n        refresh_cutoff_sec={refresh_cutoff_sec}\n        gridoption_build={gridoption_build}\n        prod={prod}\n        grid_options={grid_options}\n        index={index}\n        kwargs={kwargs} \n        enable_JsCode={enable_JsCode}      />\n    </div>\n  )\n}\n\nexport default withStreamlitConnection(Main)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport Main from \"./Main\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}