{"version":3,"sources":["components/Modal.tsx","utils.js","Aggrid.tsx","Main.tsx","index.tsx"],"names":["formats","sliderRules","sliderRules_stars","sliderRules_stars_margin","map","rule","concat","ReactModal","setAppElement","isExecuting","MyModal","_ref","isOpen","closeModal","modalData","promptText","setPromptText","toastr","prompt_field","prompt_order_rules","selectedRow","selectedField","add_symbol_row_info","display_grid_column","editableCols","showStarsSliders","setShowStarsSliders","React","useState","showStarsMarginSliders","setShowStarsMarginSliders","showActiveOrders","setShowActiveOrders","showWaveData","setShowWaveData","showButtonColData","setShowButtonColData","sellQtys","setSellQtys","handleSellQtyChange","idx","value","prev","ref","useRef","useEffect","setTimeout","_ref$current","current","focus","isValidDate","dateStr","some","format","moment","isValid","formatToLocalDatetime","date","toDate","timeZone","Intl","DateTimeFormat","resolvedOptions","zonedDate","utcToZonedTime","textFields","booleanFields","datetimeFields","arrayFields","Array","isArray","filter","field","push","createElement","className","style","display","prompt_message","onClick","position","right","length","index","key","marginRight","minWidth","textAlign","fontSize","type","checked","onChange","e","target","width","height","marginTop","flex","includes","isSliderRule","marginLeft","cursor","title","Fragment","min","max","step","Number","fontWeight","padding","item","i","marginBottom","undefined","col","toLocaleString","maximumFractionDigits","String","active_orders","margin","ordersToRender","overflowX","Object","keys","order","qty_available","num","updatedOrders","ord","sell_qty","active_orders_with_qty","wave_data","async","body","username","prod","selected_row","default_value","kwargs","console","log","data","res","axios","post","button_api","status","description","message_type","success","alert","error","close_modal","message","mapObject","obj","fn","keysToIgnore","reduce","deepMap","arguments","deepMapper","val","g_rowdata","g_newRowData","dateFormatter","isoString","formaterString","Date","currencyFormatter","number","currencySymbol","n","parseFloat","isNaN","toFixed","numberFormatter","precision","HyperlinkRenderer","props","linkField","column","colDef","baseURL","linkValue","href","rel","options","positionClass","hideDuration","timeOut","AgGrid","BtnCellRenderer","btnClickedHandler","clicked","node","id","background","border","cellStyle","col_header","buttonName","gridRef","api","api_update","refresh_sec","refresh_cutoff_sec","enable_JsCode","grid_options","parseJsCodeFromPython","subtotalsRow","setSubtotalsRow","buttons","toggle_views","api_key","api_lastmod_key","columnOrder","refresh_success","total_col","subtotal_cols","filter_button","rowData","setRowData","modalShow","setModalshow","setModalData","viewId","setViewId","lastModified","setLastModified","previousViewId","setpreviousViewId","activeFilter","setActiveFilter","_gridRef$current","Streamlit","setFrameHeight","forEach","button","col_headername","col_width","pinned","button_name","border_color","otherKeys","filterParams","columnDefs","headerName","cellRenderer","cellRendererParams","borderColor","row_index","find","row","str","JSON","parse","replace","rules_value","window","confirm","sort","a","b","indexOf","refreshHeader","fetchAndSetData","array","fetchData","onRefresh","toggle_view","currentViewId","checkViewIdChanged","_res$data","baseurl","split","slice","join","get","params","client_user","checkLastModified","toggle_view_selection","calculateSubtotals","useCallback","filteredRows","forEachNodeAfterFilterAndSort","subtotal","allCols","Boolean","btn","sum","match","onFilterChanged","interval","setInterval","timeout","clearInterval","clearTimeout","skipHeader","allColumnIds","columnApi","getColumns","getId","autoSizeColumns","sizeColumnsToFit","defaultMinWidth","onGridReady","autoGroupColumnDef","useMemo","getRowId","sideBar","toolPanels","labelDefault","labelKey","iconKey","toolPanel","defaultToolPanel","onCellValueChanged","event","loading","setLoading","columnTypes","dateColumnFilter","comparator","filterValue","cellValue","compareAsc","numberColumnFilter","shortDateTimeFormat","valueFormatter","customDateTimeFormat","custom_format_string","customNumericFormat","_params$column$colDef2","customCurrencyFormat","custom_currency_symbol","timedeltaFormat","duration","humanize","customNumberFormat","minimumFractionDigits","customHyperlinkRenderer","v","RegExp","exec","funcStr","Function","buttonStyle","uniqueValues","getUniqueColumnValues","from","Set","handleButtonFilter","setFilterModel","getFilterModel","filterType","values","model","flexDirection","backgroundColor","color","borderRadius","alignItems","justifyContent","disabled","borderTop","animation","new_data","warning","flexWrap","gap","view","gridTemplateColumns","overflowY","maxHeight","theme","streaming_list_text","borderBottom","whiteSpace","overflow","textOverflow","paddingLeft","boxShadow","transition","AgGridReact","pinnedBottomRowData","getRowStyle","_params$data$color_ro","_params$data$color_ro2","rowStyle","headerHeight","rowHeight","animateRows","suppressAggFuncInHeader","gridOptions","withStreamlitConnection","gridoption_build","args","Aggrid","ReactDOM","render","StrictMode","Main","document","getElementById"],"mappings":"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","file":"static/js/main.a179f026.chunk.js","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport ReactModal from \"react-modal\";\nimport \"./modal.css\";\nimport axios from \"axios\";\nimport { utcToZonedTime, format } from 'date-fns-tz';\nimport moment from \"moment\";\n\nconst formats = [\"YYYY-MM-DDTHH:mm\", \"MM/DD/YYYYTHH:mm\", \"MM/DD/YYYY HH:mm\", \"YYYY-MM-DD HH:mm\"];\nconst sliderRules = [\"buying_power\", \"borrow_power\"]\nconst sliderRules_stars = [\"Day\", \"Week\", \"Month\", \"Quarter\", \"Quarters\", \"Year\"];\nconst sliderRules_stars_margin = sliderRules_stars.map(rule => `${rule} Margin`);\n\n\n\nconst modalStyle = {\n  content: {\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\",\n    backgroundColor: \"yellow\",\n  },\n};\n\nReactModal.setAppElement(\"#root\");\nlet isExecuting = false;\n\ninterface MyModalProps {\n  isOpen: boolean;\n  closeModal: () => void;\n  modalData: any;\n  promptText: any;\n  setPromptText: (value: any) => void;\n  toastr: any; // Define the toastr type if available\n}\n\nconst MyModal: React.FC<MyModalProps> = ({\n  isOpen,\n  closeModal,\n  modalData,\n  promptText,\n  setPromptText,\n  toastr,\n}) => {\n  const { prompt_field, prompt_order_rules, selectedRow, selectedField, add_symbol_row_info, display_grid_column, editableCols } = modalData;\n  // console.log(\"modalData :>> \", display_grid_column, prompt_field); // workerbee handle in agagrid display_grid_column add var from mount\n  const [showStarsSliders, setShowStarsSliders] = React.useState(false);\n  const [showStarsMarginSliders, setShowStarsMarginSliders] = React.useState(false);\n  const [showActiveOrders, setShowActiveOrders] = React.useState(false);\n  const [showWaveData, setShowWaveData] = React.useState(false);\n  const [showButtonColData, setShowButtonColData] = React.useState(false);\n  const [sellQtys, setSellQtys] = React.useState<{ [key: number]: string }>({});\n  const handleSellQtyChange = (idx: number, value: string) => {\n    setSellQtys((prev) => ({ ...prev, [idx]: value }));\n  };\n  \n  const ref = useRef<HTMLButtonElement>(null);\n  const selectRef = useRef<HTMLSelectElement>(null);\n\n  // const editableCols = [\"allocation_long\", \"buy_amount\"];\n  // console.log(\"editableCols :>> \", editableCols);\n\n\n  const handleOk = async () => {\n    if (isExecuting) return;\n    isExecuting = true;\n    try {\n      const { data: res } = await axios.post(modalData.button_api, {\n        username: modalData.username,\n        prod: modalData.prod,\n        selected_row: modalData.selectedRow,\n        default_value: promptText,\n        ...modalData.kwargs,\n      });\n      const { status, data, description } = res;\n      console.log(\"res :>> \", res);\n      if (status === \"success\") {\n        data.message_type === \"fade\"\n          ? toastr.success(description, \"Success\")\n          : alert(\"Success!\\nDescription: \" + description);\n      } else {\n        data.message_type === \"fade\"\n          ? toastr.error(description, \"Error\")\n          : alert(\"Error!\\nDescription: \" + description);\n      }\n      if (data?.close_modal != false) closeModal();\n    } catch (error: any) {\n      console.log(\"error :>> \", error);\n      toastr.error(error.message);\n    }\n    isExecuting = false;\n  };\n\n  const handleOkSecond = async () => {\n    if (isExecuting) return;\n    isExecuting = true;\n    try {\n      const body = {\n        username: modalData.username,\n        prod: modalData.prod,\n        selected_row: modalData.selectedRow,\n        default_value: promptText,\n        ...modalData.kwargs,\n      };\n      console.log(\"body :>> \", body);\n      const { data: res } = await axios.post(modalData.button_api, body);\n      const { status, data, description } = res;\n      if (status === \"success\") {\n        data.message_type === \"fade\"\n          ? toastr.success(description, \"Success\")\n          : alert(\"Success!\\nDescription: \" + description);\n      } else {\n        data.message_type === \"fade\"\n          ? toastr.error(description, \"Error\")\n          : alert(\"Error!\\nDescription: \" + description);\n      }\n      if (data?.close_modal != false) closeModal();\n    } catch (error: any) {\n      console.log(\"error :>> \", error);\n      toastr.error(error.message);\n    }\n    isExecuting = false;\n  };\n\n\n  useEffect(() => {\n    if (isOpen) setTimeout(() => ref.current?.focus(), 100);\n  }, [isOpen]);\n\n  useEffect(() => {\n  setSellQtys({}); // Reset sellQtys to an empty object\n}, [isOpen, selectedRow]);\n\n  const isValidDate = (dateStr: string) => {\n    return formats.some(format => moment(dateStr, format, true).isValid());\n  };\n\n  const formatToLocalDatetime = (dateStr: string) => {\n    const date = moment(dateStr, formats, true).toDate();\n    const timeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n    const zonedDate = utcToZonedTime(date, timeZone);\n    return format(zonedDate, 'yyyy-MM-dd\\'T\\'HH:mm');\n  };\n\n  // Categorize fields by type\n  const textFields = [];\n  const booleanFields = [];\n  const datetimeFields = [];\n  const arrayFields = [];\n\n  const filtered_prompt_order_rules = Array.isArray(prompt_order_rules) && promptText\n  ? prompt_order_rules.filter((field) => field && (field in promptText))\n  : [];\n  // console.log(\"filtered_prompt_order_rules :>> \", filtered_prompt_order_rules);\n\n  if (prompt_order_rules) {\n    for (const rule of prompt_order_rules) {\n      const value = promptText[rule];\n      if (Array.isArray(value)) {\n        arrayFields.push(rule);\n      } else if (typeof value === \"boolean\") {\n        booleanFields.push(rule);\n      } else if (isValidDate(value)) {\n        datetimeFields.push(rule);\n      } else {\n        textFields.push(rule);\n      }\n    }\n  }\n\n\nreturn (\n    <div className=\"my-modal\" style={{ display: isOpen ? \"block\" : \"none\" }}>\n      <div className=\"my-modal-content\">\n        {/* Modal Header */}\n        <div className=\"modal-header px-3 d-flex justify-content-center align-items-center\">\n          <h4 className=\"text-center m-0\">{modalData.prompt_message}</h4>\n          <span className=\"close\" onClick={closeModal} style={{ position: \"absolute\", right: \"20px\" }}>\n            &times;\n          </span>\n        </div>\n  \n        {/* Modal Body */}\n        <div className=\"modal-body p-3\">\n          <div className=\"d-flex flex-column\">\n            \n            {/* Boolean Fields Top Row */}\n            {booleanFields.length > 0 && (\n              <div className=\"d-flex flex-row justify-content-between mb-2\">\n                {booleanFields.map((rule: any, index: number) => (\n                  <div className=\"d-flex flex-column align-items-center\" key={index} style={{ marginRight: \"8px\" }}>\n                    <label className=\"mb-0\" style={{ minWidth: \"100px\", textAlign: \"center\", fontSize: \"0.9rem\" }}>\n                      {rule}:\n                    </label>\n                    <input\n                      type=\"checkbox\"\n                      checked={promptText[rule]}\n                      onChange={(e) =>\n                        setPromptText({\n                          ...promptText,\n                          [rule]: e.target.checked,\n                        })\n                      }\n                      style={{ width: \"16px\", height: \"16px\", marginTop: \"4px\" }}\n                    />\n                  </div>\n                ))}\n              </div>\n            )}\n\n\n            {/* Other Fields (Text, Datetime, Array Fields) */}\n            <div className=\"d-flex flex-row justify-content-between\">\n              {/* Text Fields Column */}\n              {textFields.length > 0 && (\n                <div className=\"d-flex flex-column\" style={{ flex: 1, marginRight: \"8px\" }}>\n                  {textFields.map((rule: any, index: number) => {\n\n                  // Skip rendering if the rule is in the sliderRules_stars list\n                  if (sliderRules_stars.includes(rule)) return null;\n                  if (sliderRules_stars_margin.includes(rule)) return null;\n\n                  const isSliderRule = sliderRules.includes(rule);\n\n                  return (\n                    <div className=\"d-flex flex-column align-items-start mb-1\" key={index}>\n                    <label className=\"mb-0\" style={{ fontSize: \"0.9rem\" }}>\n                      {rule}:\n                      {rule === \"sell_amount\" && (\n                      <span\n                        style={{ marginLeft: \"4px\", cursor: \"pointer\" }}\n                        title=\"This amount will override sell_qty\"\n                      >\n                        ❓\n                      </span>\n                      )}\n                    </label>\n                    {/* Render the slider for rules that are in sliderRules but not in sliderRules_stars */}\n                    {isSliderRule ? (\n                      <>\n                      <input\n                        type=\"range\"\n                        min=\"0\"\n                        max=\"1\"\n                        step=\".01\"\n                        value={promptText[rule] || 0}\n                        onChange={(e) =>\n                        setPromptText({\n                          ...promptText,\n                          [rule]: Number(e.target.value),\n                        })\n                        }\n                        style={{ width: \"100%\" }}\n                      />\n                      <span style={{ fontSize: \"0.9rem\", fontWeight: \"bold\", marginTop: \"4px\" }}>\n                        {promptText[rule] || 0}\n                      </span>\n                      </>\n                    ) : (\n                      <input\n                      type=\"text\"\n                      value={promptText[rule]}\n                      onChange={(e) =>\n                        setPromptText({\n                        ...promptText,\n                        [rule]: e.target.value,\n                        })\n                      }\n                      style={{ flex: 1, width: \"100%\", padding: \"4px\", fontSize: \"0.9rem\" }}\n                      />\n                    )}\n                    </div>\n                  );\n                  })}\n                </div>\n              )}\n\n\n              {/* Array Fields Column */}\n              {arrayFields.length > 0 && (\n                <div className=\"d-flex flex-column\" style={{ flex: 1 }}>\n                  {arrayFields.map((rule: any, index: number) => (\n                    <div className=\"d-flex flex-column align-items-start mb-1\" key={index}>\n                      <label className=\"mb-0\" style={{ fontSize: \"0.9rem\" }}>\n                        {rule}:\n                      </label>\n                      <select\n                        value={promptText[rule][0]}\n                        onChange={(e) =>\n                          setPromptText({\n                            ...promptText,\n                            [rule]: [e.target.value],\n                          })\n                        }\n                        style={{ flex: 1, width: \"100%\", padding: \"4px\", fontSize: \"0.9rem\" }}\n                      >\n                        {promptText[rule].map((item: any, i: number) => (\n                          <option key={i} value={item}>\n                            {item}\n                          </option>\n                        ))}\n                      </select>\n                    </div>\n                  ))}\n                </div>\n              )}\n\n              {/* Expander for sliderRules_stars */}\n              {sliderRules_stars.some((rule: any) => prompt_order_rules?.includes(rule)) && (\n                <div style={{ flex: 1, marginRight: \"8px\" }}>\n                  <div\n                    style={{ cursor: \"pointer\", fontWeight: \"bold\", marginBottom: \"4px\" }}\n                    onClick={() => setShowStarsSliders((prev) => !prev)}\n                  >\n                    {showStarsSliders ? \"▼\" : \"►\"} Advanced Allocation Options\n                  </div>\n                  {showStarsSliders && (\n                    <div>\n                      {sliderRules_stars.map((rule: any, index: number) =>\n                        prompt_order_rules?.includes(rule) && promptText[rule] !== undefined && (\n                          <div className=\"d-flex flex-column align-items-start mb-1\" key={index}>\n                            <label className=\"mb-0\" style={{ fontSize: \"0.9rem\" }}>\n                              {rule}:\n                            </label>\n                            <input\n                              type=\"range\"\n                              min=\"0\"\n                              max=\"1\"\n                              step=\".01\"\n                              value={promptText[rule] || 0}\n                              onChange={(e) =>\n                                setPromptText({\n                                  ...promptText,\n                                  [rule]: Number(e.target.value),\n                                })\n                              }\n                              style={{ width: \"100%\" }}\n                            />\n                            <span style={{ fontSize: \"0.9rem\", fontWeight: \"bold\", marginTop: \"4px\" }}>\n                              {promptText[rule] || 0}\n                            </span>\n                          </div>\n                        )\n                      )}\n                    </div>\n                  )}\n                </div>\n              )}\n\n              {/* Expander for sliderRules_stars_margin */}\n              {sliderRules_stars_margin.some((rule: any) => prompt_order_rules?.includes(rule)) && (\n                <div style={{ flex: 1, marginRight: \"8px\" }}>\n                  <div\n                    style={{ cursor: \"pointer\", fontWeight: \"bold\", marginBottom: \"4px\" }}\n                    onClick={() => setShowStarsMarginSliders((prev) => !prev)}\n                  >\n                    {showStarsMarginSliders ? \"▼\" : \"►\"} Advanced Margin Allocation Options\n                  </div>\n                  {showStarsMarginSliders && (\n                    <div>\n                      {sliderRules_stars_margin.map((rule: any, index: number) =>\n                        prompt_order_rules?.includes(rule) && promptText[rule] !== undefined && (\n                          <div className=\"d-flex flex-column align-items-start mb-1\" key={index}>\n                            <label className=\"mb-0\" style={{ fontSize: \"0.9rem\" }}>\n                              {rule}:\n                            </label>\n                            <input\n                              type=\"range\"\n                              min=\"0\"\n                              max=\"1\"\n                              step=\".01\"\n                              value={promptText[rule] || 0}\n                              onChange={(e) =>\n                                setPromptText({\n                                  ...promptText,\n                                  [rule]: Number(e.target.value),\n                                })\n                              }\n                              style={{ width: \"100%\" }}\n                            />\n                            <span style={{ fontSize: \"0.9rem\", fontWeight: \"bold\", marginTop: \"4px\" }}>\n                              {promptText[rule] || 0}\n                            </span>\n                          </div>\n                        )\n                      )}\n                    </div>\n                  )}\n                </div>\n              )}\n  \n              {/* Datetime Fields Column */}\n              {datetimeFields.length > 0 && (\n                <div className=\"d-flex flex-column\" style={{ flex: 1, marginRight: \"8px\" }}>\n                  {datetimeFields.map((rule: any, index: number) => (\n                    <div className=\"d-flex flex-column align-items-start mb-1\" key={index}>\n                      <label className=\"mb-0\" style={{ fontSize: \"0.9rem\" }}>\n                        {rule}:\n                      </label>\n                      <input\n                        type=\"datetime-local\"\n                        value={promptText[rule] && formatToLocalDatetime(promptText[rule])}\n                        onChange={(e) =>\n                          setPromptText({\n                            ...promptText,\n                            [rule]: e.target.value,\n                          })\n                        }\n                        style={{ flex: 1, width: \"100%\", padding: \"4px\", fontSize: \"0.9rem\" }}\n                      />\n                    </div>\n                  ))}\n                </div>\n              )}\n  \n\n            </div>\n          </div>\n        </div>\n\n        {/* Add Symbol Row Info Column */}\n        {add_symbol_row_info && Array.isArray(add_symbol_row_info) && (\n          <div className=\"d-flex flex-column\" style={{ flex: 1 }}>\n            {add_symbol_row_info.map((col: string) => (\n              selectedRow && selectedRow[col] !== undefined && (\n          <div key={col}>\n            <b>{col}: </b>\n            {typeof selectedRow[col] === \"number\"\n              ? Number(selectedRow[col]).toLocaleString(undefined, { maximumFractionDigits: 2 })\n              : String(selectedRow[col])}\n          </div>\n              )\n            ))}\n          </div>\n        )}\n\n        {prompt_field === \"sell_option\" &&\n          selectedRow &&\n          Array.isArray(selectedRow.active_orders) &&\n          selectedRow.active_orders.length > 0 && (\n            <div style={{ margin: \"16px 0\" }}>\n              <div\n                style={{ cursor: \"pointer\", fontWeight: \"bold\", marginBottom: \"4px\" }}\n                onClick={() => setShowActiveOrders((prev: boolean) => !prev)}\n              >\n                {showActiveOrders ? \"▼\" : \"►\"} Active Orders\n              </div>\n              {showActiveOrders && (() => {\n                // 👇 Define ordersToRender here\n                const ordersToRender = selectedRow.active_orders;\n\n                return (\n                  <div style={{ overflowX: \"auto\" }}>\n                    <table className=\"table table-bordered table-sm\" style={{ fontSize: \"0.8rem\" }}>\n                      <thead>\n                        <tr>\n                          {Object.keys(ordersToRender[0]).map((col) => (\n                            <th key={col}>{col}</th>\n                          ))}\n                          <th>sell_qty</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {ordersToRender.map((order: any, idx: number) => (\n                          <tr key={idx}>\n                            {Object.keys(ordersToRender[0]).map((col) => (\n                              <td key={col}>\n                                {order && order[col] !== undefined ? String(order[col]) : \"\"}\n                              </td>\n                            ))}\n                            <td>\n                              <input\n                                type=\"number\"\n                                min={0}\n                                max={order.qty_available}\n                                value={sellQtys[idx] || \"\"}\n                                onChange={e => {\n                                  let value = e.target.value;\n                                  if (value === \"\") {\n                                    handleSellQtyChange(idx, \"\");\n                                    return;\n                                  }\n                                  let num = Number(value);\n                                  if (num < 0) num = 0;\n                                  if (order.qty_available !== undefined && num > order.qty_available) num = order.qty_available;\n                                  handleSellQtyChange(idx, String(num));\n\n                                  // Always update based on the latest ordersToRender\n                                  const updatedOrders = ordersToRender.map((ord: any, i: number) => ({\n                                    ...ord,\n                                    sell_qty: i === idx ? String(num) : (sellQtys[i] !== undefined && sellQtys[i] !== \"\" ? sellQtys[i] : \"\")\n                                  }));\n\n                                  setPromptText({\n                                    ...promptText,\n                                    active_orders_with_qty: updatedOrders\n                                  });\n                                }}\n                                style={{ width: \"80px\", fontSize: \"0.8rem\" }}\n                              />\n                            </td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </div>\n                );\n              })()}\n            </div>\n        )}\n\n        \n        {prompt_field === \"kors\" &&\n          selectedRow &&\n          Array.isArray(selectedRow['wave_data']) &&\n          selectedRow['wave_data'].length > 0 && (\n            <div style={{ margin: \"16px 0\" }}>\n              <div\n                style={{ cursor: \"pointer\", fontWeight: \"bold\", marginBottom: \"4px\" }}\n                onClick={() => setShowWaveData((prev: boolean) => !prev)}\n              >\n                {showWaveData ? \"▼\" : \"►\"} Show Buy Time Set Allocations\n              </div>\n              {showWaveData && (() => {\n                // 👇 Define ordersToRender here\n                const ordersToRender = selectedRow['wave_data'];\n\n                return (\n                  <div style={{ overflowX: \"auto\" }}>\n                    <table className=\"table table-bordered table-sm\" style={{ fontSize: \"0.8rem\" }}>\n                      <thead>\n                        <tr>\n                          {Object.keys(ordersToRender[0]).map((col) => (\n                            <th key={col}>{col}</th>\n                          ))}\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {(promptText.wave_data || ordersToRender).map((order: any, idx: number) => (\n                          <tr key={idx}>\n                            {Object.keys(ordersToRender[0]).map((col) => (\n                              <td key={col}>\n                                {Array.isArray(editableCols) && editableCols.includes(col) ? (\n                                  <input\n                                    type=\"number\"\n                                    value={order[col] || \"\"}\n                                    onChange={e => {\n                                      const value = e.target.value;\n                                      // Always update from promptText.wave_data if available, else fallback\n                                      const currentWaveData = promptText.wave_data\n                                        ? [...promptText.wave_data]\n                                        : [...ordersToRender];\n                                      const updatedOrders = currentWaveData.map((ord: any, i: number) =>\n                                        i === idx ? { ...ord, [col]: value } : ord\n                                      );\n                                      setPromptText({\n                                        ...promptText,\n                                        wave_data: updatedOrders\n                                      });\n                                    }}\n                                    style={{ width: \"80px\", fontSize: \"0.8rem\" }}\n                                  />\n                                ) : (\n                                  order && order[col] !== undefined\n                                    ? typeof order[col] === \"number\"\n                                      ? Number(order[col]).toLocaleString(undefined, { maximumFractionDigits: 2 })\n                                      : String(order[col])\n                                    : \"\"\n                                )}\n                              </td>\n                            ))}\n                            {/* ...any extra columns, like Buy Amount, as before... */}\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </div>\n                );\n              })()}\n            </div>\n        )}\n\n        {display_grid_column &&\n          selectedRow &&\n          Array.isArray(selectedRow[display_grid_column]) &&\n          selectedRow[display_grid_column].length > 0 && (\n            <div style={{ margin: \"16px 0\" }}>\n              <div\n                style={{ cursor: \"pointer\", fontWeight: \"bold\", marginBottom: \"4px\" }}\n                onClick={() => setShowButtonColData((prev: boolean) => !prev)}\n              >\n                {showButtonColData ? \"▼\" : \"►\"} {display_grid_column}\n              </div>\n              {showButtonColData && (() => {\n                // 👇 Define ordersToRender here\n                const ordersToRender = selectedRow[display_grid_column];\n\n                return (\n                  <div style={{ overflowX: \"auto\" }}>\n                    <table className=\"table table-bordered table-sm\" style={{ fontSize: \"0.8rem\" }}>\n                      <thead>\n                        <tr>\n                          {Object.keys(ordersToRender[0]).map((col) => (\n                            <th key={col}>{col}</th>\n                          ))}\n                          <th>Buy Amount</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {ordersToRender.map((order: any, idx: number) => (\n                          <tr key={idx}>\n                          {Object.keys(ordersToRender[0]).map((col) => (\n                            <td key={col}>\n                            {order && order[col] !== undefined\n                              ? typeof order[col] === \"number\"\n                              ? Number(order[col]).toLocaleString(undefined, { maximumFractionDigits: 2 })\n                              : String(order[col])\n                              : \"\"}\n                            </td>\n                          ))}\n                          {/* <td>\n                            <input\n                            type=\"number\"\n                            min={0}\n                            max={order.qty_available}\n                            value={sellQtys[idx] || \"\"}\n                            onChange={e => {\n                                  let value = e.target.value;\n                                  if (value === \"\") {\n                                    handleSellQtyChange(idx, \"\");\n                                    return;\n                                  }\n                                  let num = Number(value);\n                                  if (num < 0) num = 0;\n                                  // if (order.qty_available !== undefined && num > order.qty_available) num = order.qty_available;\n                                  handleSellQtyChange(idx, String(num));\n\n                                  // Always update based on the latest ordersToRender\n                                  const updatedOrders = ordersToRender.map((ord: any, i: number) => ({\n                                    ...ord,\n                                    sell_qty: i === idx ? String(num) : (sellQtys[i] !== undefined && sellQtys[i] !== \"\" ? sellQtys[i] : \"\")\n                                  }));\n\n                                  setPromptText({\n                                    ...promptText,\n                                    active_orders_with_qty: updatedOrders\n                                  });\n                                }}\n                                style={{ width: \"80px\", fontSize: \"0.8rem\" }}\n                              />\n                            </td> */}\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </div>\n                );\n              })()}\n            </div>\n        )}\n\n\n        {/* Modal Footer */}\n        <div className=\"modal-footer d-flex justify-content-center\">\n          <button type=\"button\" className=\"btn btn-primary mx-2\" onClick={handleOkSecond} ref={ref}>\n            Ok\n          </button>\n          <button type=\"button\" className=\"btn btn-secondary mx-2\" onClick={closeModal}>\n            Cancel\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n  \n};\n\nexport default MyModal;\n","// stole from https://github.com/andfanilo/streamlit-echarts/blob/master/streamlit_echarts/frontend/src/utils.js Thanks andfanilo\nfunction mapObject(obj, fn, keysToIgnore) {\n    let keysToMap = Object.keys(obj)\n    return keysToMap.reduce((res, key) => {\n        if (!keysToIgnore.includes(key)) {\n            res[key] = fn(obj[key]);\n            return res\n        }\n        res[key] = obj[key];\n        return res\n\n    }, {})\n}\n\nfunction deepMap(obj, fn, keysToIgnore = []) {\n    const deepMapper = (val) =>\n        val !== null && typeof val === \"object\" ? deepMap(val, fn) : fn(val)\n    if (Array.isArray(obj)) {\n        return obj.map(deepMapper)\n    }\n    if (typeof obj === \"object\") {\n        return mapObject(obj, deepMapper, keysToIgnore)\n    }\n    return obj\n}\n\nexport { deepMap }\n","import React, {\r\n  useState,\r\n  useEffect,\r\n  useMemo,\r\n  useRef,\r\n  useCallback\r\n} from \"react\"\r\nimport { AgGridReact } from \"ag-grid-react\"\r\nimport { RowClassParams } from 'ag-grid-community';\r\n\r\nimport toastr from \"toastr\"\r\nimport \"toastr/build/toastr.min.css\"\r\nimport \"ag-grid-community/styles/ag-grid.css\"\r\nimport \"ag-grid-community/styles/ag-theme-alpine.css\"\r\nimport \"ag-grid-community/styles/ag-theme-balham.css\"\r\nimport \"ag-grid-community/styles/ag-theme-material.css\"\r\nimport MyModal from './components/Modal'\r\nimport \"ag-grid-enterprise\"\r\nimport { parseISO, compareAsc, set, sub } from \"date-fns\"\r\nimport { format } from \"date-fns-tz\"\r\nimport { duration } from \"moment\"\r\nimport \"./styles.css\"\r\nimport axios from \"axios\"\r\n// import { io } from \"socket.io-client\";\r\n\r\nimport {\r\n  ComponentProps,\r\n  Streamlit,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\"\r\nimport {\r\n  ColDef,\r\n  ColGroupDef,\r\n  ColumnResizedEvent,\r\n  GetRowIdFunc,\r\n  GetRowIdParams,\r\n  Grid,\r\n  GridOptions,\r\n  GridReadyEvent,\r\n  SideBarDef,\r\n  ValueParserParams,\r\n} from \"ag-grid-community\"\r\nimport {deepMap} from \"./utils\"\r\n\r\n\r\ntype Props = {\r\n  username: string\r\n  api: string\r\n  api_update: string\r\n  refresh_sec?: number\r\n  refresh_cutoff_sec?: number\r\n  gridoption_build?: any\r\n  prod?: boolean\r\n  grid_options?: any\r\n  index: string\r\n  enable_JsCode: boolean\r\n  kwargs: any\r\n}\r\n\r\nlet g_rowdata: any[] = []\r\nlet g_newRowData: any = null\r\n\r\nfunction dateFormatter(isoString: string, formaterString: string): String {\r\n  try {\r\n    let date = new Date(isoString)\r\n    return format(date, formaterString)\r\n  } catch {\r\n    return isoString\r\n  } finally {\r\n  }\r\n}\r\n\r\nfunction currencyFormatter(number: any, currencySymbol: string): String {\r\n  let n = Number.parseFloat(number)\r\n  if (!Number.isNaN(n)) {\r\n    return currencySymbol + n.toFixed(2)\r\n  } else {\r\n    return number\r\n  }\r\n}\r\n\r\nfunction numberFormatter(number: any, precision: number): String {\r\n  let n = Number.parseFloat(number)\r\n  if (!Number.isNaN(n)) {\r\n    return n.toFixed(precision)\r\n  } else {\r\n    return number\r\n  }\r\n}\r\n\r\nconst columnFormaters = {\r\n  columnTypes: {\r\n    dateColumnFilter: {\r\n      filter: \"agDateColumnFilter\",\r\n      filterParams: {\r\n        comparator: (filterValue: any, cellValue: string) =>\r\n          compareAsc(parseISO(cellValue), filterValue),\r\n      },\r\n    },\r\n    numberColumnFilter: {\r\n      filter: \"agNumberColumnFilter\",\r\n    },\r\n    shortDateTimeFormat: {\r\n      valueFormatter: (params: any) =>\r\n        dateFormatter(params.value, \"dd/MM/yyyy HH:mm\"),\r\n    },\r\n    customDateTimeFormat: {\r\n      valueFormatter: (params: any) =>\r\n        dateFormatter(params.value, params.column.colDef.custom_format_string),\r\n    },\r\n    customNumericFormat: {\r\n      valueFormatter: (params: any) =>\r\n        numberFormatter(params.value, params.column.colDef.precision ?? 2),\r\n    },\r\n    customCurrencyFormat: {\r\n      valueFormatter: (params: any) =>\r\n        currencyFormatter(\r\n          params.value,\r\n          params.column.colDef.custom_currency_symbol\r\n        ),\r\n    },\r\n    timedeltaFormat: {\r\n      valueFormatter: (params: any) => duration(params.value).humanize(true),\r\n    },\r\n  },\r\n}\r\n\r\nconst HyperlinkRenderer = (props: any) => {\r\n  const linkField = props.column.colDef[\"linkField\"];\r\n  const baseURL = props.column.colDef.baseURL;\r\n  const linkValue = props.data && linkField ? props.data[linkField] : null;\r\n\r\n  // Only render a link for real data rows\r\n  if (linkValue && baseURL) {\r\n    return (\r\n      <a href={`${baseURL}/${linkValue}`} target=\"_blank\" rel=\"noopener noreferrer\">\r\n        {props.value}\r\n      </a>\r\n    );\r\n  }\r\n  // For pivot/group/total rows, just render the value\r\n  return <span>{props.value}</span>;\r\n};\r\n\r\n\r\ntoastr.options = {\r\n  positionClass: \"toast-top-full-width\",\r\n  hideDuration: 300,\r\n  timeOut: 3000,\r\n}\r\n\r\nconst AgGrid = (props: Props) => {\r\n  const BtnCellRenderer = (props: any) => {\r\n    const btnClickedHandler = () => {\r\n      props.clicked(props.node.id)\r\n    }\r\n    // console.log(\"props.cellStyle\", props.cellStyle)\r\n    return (\r\n      <button\r\n        onClick={btnClickedHandler}\r\n        style={{\r\n          background: \"transparent\",\r\n          border: (props.cellStyle && props.cellStyle.border !== undefined)\r\n            ? props.cellStyle.border\r\n            : \"none\",          \r\n          width: props.width ? props.width : \"100%\",\r\n              ...(props.cellStyle || {}), // <-- Merge in cellStyle from params ? NOT WORKING?\r\n        }}\r\n      >\r\n        {props.col_header ? props.value : props.buttonName}\r\n      </button>\r\n    )\r\n  }\r\n\r\n  const gridRef = useRef<AgGridReact>(null)\r\n  const {\r\n    username,\r\n    api,\r\n    api_update,\r\n    refresh_sec = undefined,\r\n    refresh_cutoff_sec = 0,\r\n    prod = true,\r\n    index,\r\n    enable_JsCode,\r\n    kwargs,\r\n  } = props\r\n  let { grid_options = {} } = props\r\n\r\n  //parsing must be done here. For some unknow reason if its moved after the\r\n  //button mapping, deepMap gets lots of React objects (api, symbolRefs, etc.)\r\n  //this impacts performance and crashes the grid.\r\n  if (enable_JsCode) {\r\n    grid_options = deepMap(grid_options, parseJsCodeFromPython, [\"rowData\"])\r\n  }\r\n\r\n  const [subtotalsRow, setSubtotalsRow] = useState<any[]>([]);\r\n  let { buttons, toggle_views, api_key, api_lastmod_key = null, columnOrder=[], \r\n    refresh_success=null, total_col=false, subtotal_cols=[], filter_button=''} = kwargs\r\n  const [rowData, setRowData] = useState<any[]>([])\r\n  const [modalShow, setModalshow] = useState(false)\r\n  const [modalData, setModalData] = useState({})\r\n  const [promptText, setPromptText] = useState(\"\")\r\n  const [viewId, setViewId] = useState(0)\r\n  const [lastModified, setLastModified] = useState<string | null>(null);\r\n  const [previousViewId, setpreviousViewId] = useState(89)\r\n  const [activeFilter, setActiveFilter] = useState<string | null>(null);\r\n\r\n  const checkLastModified = async (): Promise<boolean> => {\r\n    try {\r\n      if (api_lastmod_key === null) {\r\n        console.log(\"api key is null, returning false\");\r\n        return true;\r\n      }\r\n      if (api_lastmod_key !== null && api_lastmod_key !== undefined) {\r\n        const baseurl = api.split('/').slice(0, -1).join('/');\r\n        const res = await axios.get(`${baseurl}/lastmod_key`, {\r\n          params: {\r\n            api_key: api_key,\r\n            client_user: username,\r\n            prod: prod,\r\n            api_lastmod_key: api_lastmod_key,\r\n          },\r\n        });\r\n        // console.log(\"fetching data...\", res.data.lastModified);\r\n        if (res.data?.lastModified !== lastModified) {\r\n          // console.log(\"setting modified changed, fetching data...\", res.data.lastModified, lastModified);\r\n          setLastModified(res.data.lastModified);\r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n      }\r\n      return false;\r\n    } catch (error: any) {\r\n      toastr.error(`Failed to check last modified: ${error.message}`);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const checkViewIdChanged = async (currentViewId: number, previousViewId: number): Promise<boolean> => {\r\n    if (currentViewId !== previousViewId) {\r\n      // console.log(\"viewId has changed from\", previousViewId, \"to\", currentViewId);\r\n      setpreviousViewId(currentViewId);\r\n      return true;\r\n    } else {\r\n      // console.log(\"viewId has not changed\");\r\n      return false;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    Streamlit.setFrameHeight();\r\n  \r\n    if (buttons.length) {\r\n      buttons = deepMap(buttons, parseJsCodeFromPython, [\"rowData\"]); // process JsCode from buttons props\r\n  \r\n      buttons.forEach((button: any) => {\r\n        const {\r\n          prompt_field,\r\n          prompt_message,\r\n          button_api,\r\n          prompt_order_rules,\r\n          col_header,\r\n          col_headername,\r\n          col_width,\r\n          pinned,\r\n          button_name,\r\n          border_color,\r\n          border,\r\n          add_symbol_row_info,\r\n          display_grid_column,\r\n          editableCols,\r\n          ...otherKeys\r\n        } = button;\r\n\r\n        let filterParams = button.filterParams || {};\r\n        if (kwargs['filter_apply']) {\r\n          filterParams = { ...filterParams, buttons: ['apply', 'reset'] };\r\n        }\r\n\r\n        grid_options.columnDefs!.push({\r\n          ...otherKeys,\r\n          field: col_header || index,\r\n          headerName: col_headername,\r\n          width: col_width,\r\n          pinned: pinned,\r\n          cellRenderer: BtnCellRenderer,\r\n          filterParams,\r\n          cellRendererParams: {\r\n            col_header,\r\n            buttonName: button_name,\r\n            borderColor: border_color,\r\n            border: border,\r\n            filterParams,\r\n            cellStyle: button.cellStyle,\r\n            ...(button.cellRendererParams || {}),\r\n            clicked: async function (row_index: any) {\r\n              try {\r\n                const selectedRow = g_rowdata.find((row) => row[index] === row_index);\r\n                if (prompt_order_rules) {\r\n                  const str = selectedRow[prompt_field];\r\n                  const selectedField =\r\n                    typeof str === \"string\"\r\n                      ? JSON.parse(\r\n                          selectedRow[prompt_field]\r\n                            .replace(/'/g, '\"')\r\n                            .replace(/\\n/g, \"\")\r\n                            .replace(/\\s/g, \"\")\r\n                            .replace(/False/g, \"false\")\r\n                            .replace(/True/g, \"true\")\r\n                        )\r\n                      : str;\r\n  \r\n                  setModalshow(true);\r\n                  setModalData({\r\n                    prompt_message,\r\n                    button_api: button_api,\r\n                    username: username,\r\n                    prod: prod,\r\n                    selectedRow: selectedRow,\r\n                    kwargs: kwargs,\r\n                    prompt_field,\r\n                    prompt_order_rules,\r\n                    selectedField,\r\n                    add_symbol_row_info,\r\n                    display_grid_column,\r\n                    editableCols,\r\n                  });\r\n  \r\n                  const rules_value: any = {};\r\n                  prompt_order_rules.forEach((rule: string) => {\r\n                    rules_value[rule] = selectedField[rule];\r\n                  });\r\n  \r\n                  setPromptText(rules_value);\r\n                } else if (prompt_field && prompt_message) {\r\n                  setModalshow(true);\r\n                  setModalData({\r\n                    prompt_message,\r\n                    button_api: button_api,\r\n                    username: username,\r\n                    prod: prod,\r\n                    selectedRow: selectedRow,\r\n                    kwargs: kwargs,\r\n                  });\r\n                  setPromptText(selectedRow[prompt_field]);\r\n                } else {\r\n                  if (window.confirm(prompt_message)) {\r\n                    await axios.post(button_api, {\r\n                      username: username,\r\n                      prod: prod,\r\n                      selected_row: selectedRow,\r\n                      ...kwargs,\r\n                    });\r\n                  }\r\n                  toastr.success(\"Success!\");\r\n                }\r\n              } catch (error) {\r\n                alert(`${error}`);\r\n              }\r\n            },\r\n          },\r\n        });\r\n      });\r\n    }\r\n  \r\n    // Reorder columns based on a predefined list\r\n    // const columnOrder = [\"sector\", \"broker_qty_available\", \"queens_suggested_sell\"]; // Replace with your desired column order\r\n    \r\n    if (columnOrder.length > 0 && grid_options.columnDefs) {\r\n      grid_options.columnDefs.sort((a: any, b: any) => {\r\n      // If both columns are in the columnOrder array, maintain their order\r\n      if (columnOrder.indexOf(a.field) !== -1 && columnOrder.indexOf(b.field) !== -1) {\r\n        return columnOrder.indexOf(a.field) - columnOrder.indexOf(b.field);\r\n      }\r\n    \r\n      // If one of the columns isn't in columnOrder, keep its original position\r\n      if (columnOrder.indexOf(a.field) === -1) return 1;\r\n      if (columnOrder.indexOf(b.field) === -1) return -1;\r\n    \r\n      return 0;\r\n      });\r\n    }\r\n    \r\n  \r\n    // Optional: Refresh header if necessary (if needed)\r\n    if (gridRef.current?.api) {\r\n      gridRef.current.api.refreshHeader();\r\n    }\r\n  }, [buttons, grid_options.columnDefs]);\r\n\r\n  const fetchAndSetData = async () => {\r\n    const array = await fetchData();\r\n    if (array === false) return false;\r\n    setRowData(array);\r\n    g_rowdata = array;\r\n    return true;\r\n  };\r\n\r\n  useEffect(() => {\r\n    onRefresh()\r\n  }, [viewId])\r\n\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      let toggle_view = toggle_views ? toggle_views[viewId] : \"none\";\r\n      const hasViewChanged = await checkViewIdChanged(viewId, previousViewId);\r\n      // console.log(\"hasViewChanged\", hasViewChanged, viewId, previousViewId);\r\n\r\n      // If view has changed, skip checkLastModified\r\n      if (!hasViewChanged && refresh_sec && refresh_sec > 0) {\r\n        const isLastModified = await checkLastModified();\r\n        // console.log(\"isLastModified\", isLastModified, api);\r\n        if (!isLastModified) {\r\n          return false;\r\n        }\r\n      }\r\n\r\n      console.log(\"fetching data...\", api);\r\n      const res = await axios.post(api, {\r\n        username: username,\r\n        prod: prod,\r\n        ...kwargs,\r\n        toggle_view_selection: toggle_view\r\n      });\r\n      const array = JSON.parse(res.data);\r\n\r\n\r\n      return array;\r\n    }\r\n    catch (error: any) {\r\n      toastr.error(`Fetch Error: ${error.message}`);\r\n      return false;\r\n    }\r\n  };\r\n\r\n /// for title outside grid\r\n// const [subtotals, setSubtotals] = useState<any>(null);\r\n\r\n// const calculateSubtotals = useCallback(() => {\r\n//   if (!gridRef.current) return;\r\n//   if (!subtotal_cols || subtotal_cols.length === 0) {\r\n//     setSubtotals(null);\r\n//     return;\r\n//   }\r\n//   const api = gridRef.current.api;\r\n//   let filteredRows: any[] = [];\r\n//   api.forEachNodeAfterFilterAndSort((node) => {\r\n//     if (node.data) filteredRows.push(node.data);\r\n//   });\r\n\r\n//   if (filteredRows.length === 0) {\r\n//     setSubtotals(null);\r\n//     return;\r\n//   }\r\n\r\n//   let subtotal: any = {};\r\n//   subtotal[total_col] = \"Subtotal\";\r\n//   subtotal_cols.forEach((col: string) => {\r\n//     subtotal[col] = filteredRows.reduce((sum, row) => sum + (Number(row[col]) || 0), 0);\r\n//   });\r\n\r\n//   setSubtotals(subtotal);\r\n// }, [subtotal_cols, total_col]);\r\n// const onFilterChanged = useCallback(() => {\r\n//   calculateSubtotals();\r\n// }, [calculateSubtotals]);\r\n\r\n// const [subtotalsRow, setSubtotalsRow] = useState<any[]>([]);\r\n\r\nconst calculateSubtotals = useCallback(() => {\r\n  if (!gridRef.current) return;\r\n  if (!subtotal_cols || subtotal_cols.length === 0) {\r\n    setSubtotalsRow([]);\r\n    return;\r\n  }\r\n  const api = gridRef.current.api;\r\n  let filteredRows: any[] = [];\r\n  api.forEachNodeAfterFilterAndSort((node) => {\r\n    if (node.data) filteredRows.push(node.data);\r\n  });\r\n\r\n  if (filteredRows.length === 0) {\r\n    setSubtotalsRow([]);\r\n    return;\r\n  }\r\n\r\nlet subtotal: any = {};\r\n// Ensure total_col is a valid string and exists in the columns\r\nlet allCols: string[] = [];\r\nif (grid_options && grid_options.columnDefs) {\r\n  allCols = grid_options.columnDefs.map((colDef: any) => colDef.field).filter(Boolean);\r\n} else if (filteredRows.length > 0) {\r\n  allCols = Object.keys(filteredRows[0]);\r\n}\r\n\r\n// Place \"subTotals\" label in the correct column\r\nif (typeof total_col === \"string\" && allCols.includes(total_col)) {\r\n  subtotal[total_col] = \"subTotals\";\r\n} else if (allCols.length > 0) {\r\n  subtotal[allCols[0]] = \"subTotals\"; // fallback to first column\r\n}\r\n\r\n// Add button columns if not already present\r\nif (Array.isArray(buttons)) {\r\n  buttons.forEach((btn: any) => {\r\n    if (btn.col_header && !allCols.includes(btn.col_header)) {\r\n      allCols.push(btn.col_header);\r\n    }\r\n  });\r\n}\r\n\r\n\r\nallCols.forEach((col: string) => {\r\n  if (subtotal_cols.includes(col)) {\r\n    // Try to split by $ and sum the numeric part if possible\r\n    const sum = filteredRows.reduce((sum, row) => {\r\n      let val = row[col];\r\n      if (typeof val === \"string\" && val.includes(\"$\")) {\r\n        // Try to extract number after $\r\n        const match = val.match(/\\$([\\d,.\\-]+)/);\r\n        if (match && match[1]) {\r\n          val = match[1].replace(/,/g, \"\");\r\n        }\r\n      }\r\n      const num = Number(val);\r\n      return sum + (isNaN(num) ? 0 : num);\r\n    }, 0);\r\n    subtotal[col] = isNaN(sum) ? \"\" : sum;\r\n  } else if (subtotal[total_col] !== \"subTotals\" || col !== total_col) {\r\n    subtotal[col] = \"\"; // or null, or a placeholder\r\n  }\r\n});\r\n\r\n  setSubtotalsRow([subtotal]);\r\n}, [subtotal_cols, total_col]);\r\nconst onFilterChanged = useCallback(() => {\r\n  calculateSubtotals();\r\n}, [calculateSubtotals]);\r\n\r\n  useEffect(() => {\r\n    if (refresh_sec && refresh_sec > 0) {\r\n      const interval = setInterval(fetchAndSetData, refresh_sec * 1000)\r\n      let timeout: NodeJS.Timeout\r\n      if (refresh_cutoff_sec > 0) {\r\n        console.log(refresh_cutoff_sec)\r\n        timeout = setTimeout(() => {\r\n          clearInterval(interval)\r\n          console.log(\"Fetching data ended, refresh rate:\", refresh_sec)\r\n        }, refresh_cutoff_sec * 1000)\r\n      }\r\n      console.error(\"rendered==========\", props)\r\n      return () => {\r\n        clearInterval(interval)\r\n        if (timeout) clearTimeout(timeout)\r\n      }\r\n    }\r\n  }, [props, viewId])\r\n\r\n  // useEffect(() => {\r\n  //   const baseurl = api.split('/').slice(0, -1).join('/');\r\n  //   const socket = io(`${baseurl}/ws`);\r\n\r\n  //   socket.on(\"dataUpdated\", () => {\r\n  //     console.log(\"Data update received via WebSocket\");\r\n  //     onRefresh();\r\n  //   });\r\n\r\n  //   return () => {\r\n  //     socket.disconnect();\r\n  //   };\r\n  // }, []);\r\n\r\n\r\n  const autoSizeAll = useCallback((skipHeader: boolean) => {\r\n    const allColumnIds: string[] = []\r\n    gridRef.current!.columnApi.getColumns()!.forEach((column: any) => {\r\n      allColumnIds.push(column.getId())\r\n    })\r\n    gridRef.current!.columnApi.autoSizeColumns(allColumnIds, skipHeader)\r\n  }, [])\r\n\r\n  const sizeToFit = useCallback(() => {\r\n    gridRef.current!.api.sizeColumnsToFit({\r\n      defaultMinWidth: 100,\r\n    })\r\n  }, [])\r\n\r\n  const onGridReady = useCallback(async (params: GridReadyEvent) => {\r\n    setTimeout(async () => {\r\n      try {\r\n        const array = await fetchData()\r\n        // console.log(\"AAAAAAAAAAAAAAAAAAAAAAA\", array)\r\n        if (array === false) {\r\n          // toastr.error(`Error: ${array.message}`)\r\n          return\r\n        }\r\n        setRowData(array)\r\n        g_rowdata = array\r\n      \r\n      if (subtotal_cols && subtotal_cols.length > 0) {\r\n        calculateSubtotals();\r\n      } else {\r\n        setSubtotalsRow([]);\r\n      }\r\n\r\n      } catch (error: any) {\r\n        toastr.error(`Error: ${error.message}`)\r\n      }\r\n    }, 100)\r\n  }, [])\r\n\r\n  const autoGroupColumnDef = useMemo<ColDef>(() => {\r\n    return {\r\n      minWidth: 200,\r\n    }\r\n  }, [])\r\n\r\n  const getRowId = useMemo<GetRowIdFunc>(() => {\r\n    return (params: GetRowIdParams) => {\r\n      return params.data[index]\r\n    }\r\n  }, [index])\r\n\r\n  const sideBar = useMemo<\r\n    SideBarDef | string | string[] | boolean | null\r\n  >(() => {\r\n    return {\r\n      toolPanels: [\r\n        {\r\n          id: \"columns\",\r\n          labelDefault: \"Columns\",\r\n          labelKey: \"columns\",\r\n          iconKey: \"columns\",\r\n          toolPanel: \"agColumnsToolPanel\",\r\n        },\r\n        {\r\n          id: \"filters\",\r\n          labelDefault: \"Filters\",\r\n          labelKey: \"filters\",\r\n          iconKey: \"filter\",\r\n          toolPanel: \"agFiltersToolPanel\",\r\n        },\r\n      ],\r\n      defaultToolPanel: \"customStats\",\r\n    }\r\n  }, [])\r\n\r\n  const onCellValueChanged = useCallback((event) => {\r\n    if (g_newRowData === null) g_newRowData = {}\r\n    g_newRowData[event.data[index]] = event.data\r\n    console.log(\"Data after change is\", g_newRowData)\r\n  }, [])\r\n\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const subtotalTimeout = useRef<NodeJS.Timeout | null>(null);\r\n\r\n  const onRefresh = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const success = await fetchAndSetData();\r\n      \r\n      refresh_success && success && toastr.success(\"Refresh success!\");\r\n    } catch (error: any) {\r\n      toastr.error(`Refresh Failed! ${error.message}`);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const onUpdate = async () => {\r\n    if (g_newRowData === null) {\r\n      toastr.warning(`No changes to update`)\r\n      return\r\n    }\r\n    try {\r\n      const res: any = await axios.post(api_update, {\r\n        username: username,\r\n        prod: prod,\r\n        new_data: g_newRowData,\r\n        ...kwargs,\r\n      })\r\n      g_newRowData = null\r\n      if (res.status) toastr.success(`Successfully Updated! `)\r\n      else toastr.error(`Failed! ${res.message}`)\r\n    } catch (error) {\r\n      toastr.error(`Failed! ${error}`)\r\n    }\r\n  }\r\n\r\n  const columnTypes = useMemo<any>(() => {\r\n    return {\r\n      dateColumnFilter: {\r\n        filter: \"agDateColumnFilter\",\r\n        filterParams: {\r\n          comparator: (filterValue: any, cellValue: string) =>\r\n            compareAsc(new Date(cellValue), filterValue),\r\n        },\r\n      },\r\n      numberColumnFilter: {\r\n        filter: \"agNumberColumnFilter\",\r\n      },\r\n      shortDateTimeFormat: {\r\n        valueFormatter: (params: any) =>\r\n          dateFormatter(params.value, \"dd/MM/yyyy HH:mm\"),\r\n      },\r\n      customDateTimeFormat: {\r\n        valueFormatter: (params: any) =>\r\n          dateFormatter(\r\n            params.value,\r\n            params.column.colDef.custom_format_string\r\n          ),\r\n      },\r\n      customNumericFormat: {\r\n        valueFormatter: (params: any) =>\r\n          numberFormatter(params.value, params.column.colDef.precision ?? 2),\r\n      },\r\n      customCurrencyFormat: {\r\n        valueFormatter: (params: any) =>\r\n          currencyFormatter(\r\n            params.value,\r\n            params.column.colDef.custom_currency_symbol\r\n          ),\r\n      },\r\n      timedeltaFormat: {\r\n        valueFormatter: (params: any) => duration(params.value).humanize(true),\r\n      },\r\n      customNumberFormat: {\r\n        valueFormatter: (params: any) =>\r\n          Number(params.value).toLocaleString(\"en-US\", {\r\n            minimumFractionDigits: 0,\r\n          }),\r\n      },\r\n      customHyperlinkRenderer: {\r\n        // valueGetter: (params: any) =>\r\n        //   params.column.colDef.baseURL + params.data.honey,\r\n        cellRenderer: HyperlinkRenderer,\r\n        cellRendererParams: {\r\n          baseURL: \"URLSearchParams.co\",\r\n        },\r\n      },\r\n    }\r\n  }, [])\r\n\r\n  const onClick = () => {\r\n    toastr.clear()\r\n    setTimeout(() => toastr.success(`Settings updated `), 300)\r\n  }\r\n\r\n  type RowStyle = {\r\n    background?: string;\r\n    color?: string;\r\n    fontWeight?: string;\r\n  };\r\n\r\n  function parseJsCodeFromPython(v: string) {\r\n    const JS_PLACEHOLDER = \"::JSCODE::\"\r\n    let funcReg = new RegExp(\r\n      `${JS_PLACEHOLDER}\\\\s*((function|class)\\\\s*.*)\\\\s*${JS_PLACEHOLDER}`\r\n    )\r\n  \r\n    let match = funcReg.exec(v)\r\n  \r\n    if (match) {\r\n  \r\n      const funcStr = match[1]\r\n      // eslint-disable-next-line\r\n      return new Function(\"return \" + funcStr)()\r\n    } else {\r\n      return v\r\n    }\r\n  }\r\n\r\n  const getRowStyle = (params: RowClassParams<any>): RowStyle | undefined => {\r\n        if (params.data && params.data[total_col] === \"subTotals\") {\r\n      return { fontWeight: \"bold\", background: \"#f8f8f8\" }; // Add background if you want\r\n    }\r\n    try {\r\n      const background = params.data[\"color_row\"] ?? undefined;\r\n      const color = params.data[\"color_row_text\"] ?? undefined;\r\n      return { background, color };\r\n    } catch (error) {\r\n      console.error(\"Error accessing row style:\", error);\r\n      return undefined; // Return undefined when an error occurs\r\n    }\r\n  };\r\n\r\n\r\n  const getButtonStyle = (length: number) => {\r\n    if (length < 3) {\r\n      return { padding: \"15px 18px\", fontSize: \"18px\" };\r\n    } else if (length < 8) {\r\n      return { padding: \"15px 18px\", fontSize: \"15px\" };\r\n    } else if (length < 15) {\r\n      return { padding: \"12px 13px\", fontSize: \"13px\" };\r\n    } else if (length < 35) {\r\n      return { padding: \"10px 12px\", fontSize: \"11px\" };\r\n    } else {\r\n      return { padding: \"3px 5px\", fontSize: \"10px\" };\r\n    }\r\n  };\r\n\r\n  const buttonStyle = getButtonStyle(toggle_views.length);\r\n\r\n  const button_color = \"#3498db\"; // Set your custom button color here\r\n\r\n  // let pinnedTopRowData: any[] = [];\r\n  // let filteredRowData = rowData;\r\n  \r\n  // console.log(\"total_col\", total_col)\r\n  // if (total_col) {\r\n  //   // Use total_col as the column to check for \"Total\" row\r\n  //   const totalRow = rowData.find(row => row[total_col] === \"Total\");\r\n  //   pinnedTopRowData = totalRow ? [totalRow] : [];\r\n  //   filteredRowData = rowData.filter(row => row[total_col] !== \"Total\");\r\n  // }\r\n\r\n\r\n  const getUniqueColumnValues = (column: string, rowData: any[]) => {\r\n    return Array.from(new Set(rowData.map(row => row[column]))).filter(\r\n      v => v !== undefined && v !== null\r\n    );\r\n  };\r\n// let filter_button = \"piece_name\";\r\n\r\nconst uniqueValues = useMemo(\r\n  () => getUniqueColumnValues(filter_button, rowData),\r\n  [rowData, filter_button]\r\n);\r\n\r\nconst handleButtonFilter = (value: string | null) => {\r\n  setActiveFilter(value);\r\n\r\n  if (gridRef.current && gridRef.current.api) {\r\n    const api = gridRef.current.api;\r\n    if (value) {\r\n      api.setFilterModel({\r\n        ...api.getFilterModel(),\r\n        [filter_button]: { filterType: \"set\", values: [value] }\r\n      });\r\n    } else {\r\n      const model = api.getFilterModel();\r\n      delete model[filter_button];\r\n      api.setFilterModel(model);\r\n    }\r\n  }\r\n};\r\n\r\n\r\n  return (\r\n    <>\r\n      <MyModal\r\n        isOpen={modalShow}\r\n        closeModal={() => setModalshow(false)}\r\n        modalData={modalData}\r\n        promptText={promptText}\r\n        setPromptText={setPromptText}\r\n        toastr={toastr}\r\n      />\r\n      <div\r\n        style={{ flexDirection: \"row\", height: \"100%\", width: \"100%\" }}\r\n        id=\"myGrid\"\r\n      >\r\n        <div className=\"d-flex justify-content-between align-items-center\">\r\n          {(refresh_sec == undefined || refresh_sec == 0) && (\r\n            <div style={{ display: \"flex\" }}>\r\n              <div style={{ margin: \"5px 5px 5px 2px\" }}>\r\n                <button\r\n                  className=\"btn\"\r\n                  style={{\r\n                    backgroundColor: button_color,\r\n                    color: \"white\",\r\n                    padding: \"5px 8px\", // Smaller padding\r\n                    fontSize: \"12px\", // Smaller font size\r\n                    borderRadius: \"4px\",\r\n                    display: \"flex\",\r\n                    alignItems: \"center\",\r\n                    justifyContent: \"center\",\r\n                    minWidth: \"80px\", // Ensure width stays the same during loading\r\n                  }}\r\n                  onClick={onRefresh}\r\n                  disabled={loading} // Disable button while loading\r\n                >\r\n                  {loading ? (\r\n                    <div\r\n                      style={{\r\n                        width: \"14px\",\r\n                        height: \"14px\",\r\n                        border: \"2px solid white\",\r\n                        borderTop: \"2px solid transparent\",\r\n                        borderRadius: \"50%\",\r\n                        animation: \"spin 0.8s linear infinite\",\r\n                      }}\r\n                    />\r\n                  ) : (\r\n                    \"Refresh\"\r\n                  )}\r\n                </button>\r\n\r\n                {/* Add CSS for spinner animation */}\r\n                <style>\r\n                  {`\r\n                    @keyframes spin {\r\n                      to {\r\n                        transform: rotate(360deg);\r\n                      }\r\n                    }\r\n                  `}\r\n                </style>\r\n              </div>\r\n              <div style={{ margin: \"5px 5px 5px 2px\" }}>\r\n                <button\r\n                  className=\"btn\"\r\n                  style={{\r\n                    backgroundColor: \"green\",\r\n                    color: \"white\",\r\n                    padding: \"5px 8px\", // Smaller padding\r\n                    fontSize: \"12px\", // Smaller font size\r\n                    borderRadius: \"4px\",\r\n                  }}\r\n                  onClick={onUpdate}\r\n                >\r\n                  Update\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )}\r\n          {toggle_views && toggle_views.length > 0 && (\r\n  <>\r\n    {toggle_views.length < 20 ? (\r\n      // Render normal buttons if toggle_views is less than 20\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          flexWrap: \"wrap\",\r\n          gap: \"10px\",\r\n          padding: \"10px\",\r\n          marginBottom: \"10px\",\r\n        }}\r\n      >\r\n        {toggle_views.map((view: string, index: number) => (\r\n          <button\r\n            key={index}\r\n            className={`btn ${viewId === index ? \"btn-danger\" : \"btn-secondary\"}`}\r\n            style={{\r\n              ...buttonStyle,\r\n              borderRadius: \"8px\",\r\n              color: \"#055A6E\",\r\n              backgroundColor: \"#F3FAFD\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={() => {\r\n              setViewId(index);\r\n              setpreviousViewId(viewId);\r\n            }}\r\n            disabled={loading}\r\n          >\r\n            {view}\r\n            {loading && viewId === index ? (\r\n              <div\r\n                style={{\r\n                  width: \"14px\",\r\n                  height: \"14px\",\r\n                  border: \"2px solid black\",\r\n                  borderTop: \"2px solid transparent\",\r\n                  borderRadius: \"50%\",\r\n                  animation: \"spin 0.8s linear infinite\",\r\n                  marginLeft: \"8px\",\r\n                }}\r\n              />\r\n            ) : null}\r\n          </button>\r\n        ))}\r\n      </div>\r\n    ) : (\r\n      // Render overlap container if toggle_views is 20 or more\r\n      <div\r\n        className=\"toggle-view-container\"\r\n        style={{\r\n          display: \"grid\",\r\n          gridTemplateColumns: \"repeat(auto-fit, minmax(100px, 1fr))\",\r\n          gap: \"10px\",\r\n          overflowY: \"auto\",\r\n          maxHeight: \"200px\",\r\n          padding: \"10px\",\r\n          border: \"1px solid #ddd\",\r\n          borderRadius: \"8px\",\r\n          backgroundColor: \"#eef9f8\",\r\n          width: \"100%\",\r\n          marginBottom: \"10px\",\r\n        }}\r\n      >\r\n        {toggle_views.map((view: string, index: number) => (\r\n          <button\r\n            key={index}\r\n            className={`btn ${viewId === index ? \"btn-danger\" : \"btn-secondary\"}`}\r\n            style={{\r\n              ...buttonStyle,\r\n              borderRadius: \"8px\",\r\n              color: \"#055A6E\",\r\n              backgroundColor: \"#F3FAFD\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={() => {\r\n              setViewId(index);\r\n              setpreviousViewId(viewId);\r\n            }}\r\n            disabled={loading}\r\n          >\r\n            {view}\r\n            {loading && viewId === index ? (\r\n              <div\r\n                style={{\r\n                  width: \"14px\",\r\n                  height: \"14px\",\r\n                  border: \"2px solid black\",\r\n                  borderTop: \"2px solid transparent\",\r\n                  borderRadius: \"50%\",\r\n                  animation: \"spin 0.8s linear infinite\",\r\n                  marginLeft: \"8px\",\r\n                }}\r\n              />\r\n            ) : null}\r\n          </button>\r\n        ))}\r\n      </div>\r\n    )}\r\n  </>\r\n)}\r\n        </div>\r\n  \r\n        <div\r\n          className={grid_options.theme || \"ag-theme-alpine-dark\"}\r\n          style={{\r\n            width: \"100%\",\r\n            height: kwargs[\"grid_height\"] ? kwargs[\"grid_height\"] : \"100%\",\r\n          }}\r\n        >\r\n          {/* Add test streaming_list_text to kwargs for testing\r\n          {(() => {\r\n            if (!kwargs.streaming_list_text) {\r\n              kwargs.streaming_list_text = [\"some\", \"test\", \"list\"];\r\n            }\r\n            return null;\r\n          })()} */}\r\n          {/* Streamer for streaming_list_text if present */}\r\n          {kwargs.streaming_list_text && Array.isArray(kwargs.streaming_list_text) && (\r\n            <div\r\n              style={{\r\n              width: \"100%\",\r\n              background: \"#F3FAFD\", // Match toggle_views button background\r\n              color: \"#055A6E\",      // Match toggle_views button text color\r\n              padding: \"4px 10px\",\r\n              fontSize: \"13px\",\r\n              borderBottom: \"1px solid #ddd\",\r\n              whiteSpace: \"nowrap\",\r\n              overflow: \"hidden\",\r\n              textOverflow: \"ellipsis\",\r\n              marginBottom: \"4px\",\r\n              fontWeight: \"bold\",    // Match bold style from buttons\r\n              }}\r\n            >\r\n              <div\r\n              style={{\r\n                display: \"block\",\r\n                width: \"100%\",\r\n                whiteSpace: \"nowrap\",\r\n                overflow: \"hidden\",\r\n                position: \"relative\",\r\n              }}\r\n              >\r\n              <div\r\n                style={{\r\n                display: \"inline-block\",\r\n                paddingLeft: \"100%\",\r\n                animation: \"scroll-left 20s linear infinite\",\r\n                }}\r\n              >\r\n                {kwargs.streaming_list_text.join(\"   |   \")}\r\n              </div>\r\n              <style>\r\n                {`\r\n                @keyframes scroll-left {\r\n                  0% {\r\n                  transform: translateX(0%);\r\n                  }\r\n                  100% {\r\n                  transform: translateX(-100%);\r\n                  }\r\n                }\r\n                `}\r\n              </style>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n{kwargs['filter_button'] && kwargs['filter_button'] !== '' && (\r\n  <div style={{ marginBottom: 8 }}>\r\n    {uniqueValues.map(val => (\r\n      <button\r\n        key={val}\r\n        onClick={() => handleButtonFilter(val)}\r\n        style={{\r\n          background: activeFilter === val ? \"#3498db\" : \"#F3FAFD\", // match main button color and toggle_views bg\r\n          color: activeFilter === val ? \"white\" : \"#055A6E\",        // match toggle_views text color\r\n          border: activeFilter === val ? \"2px solid #1abc9c\" : \"1px solid #ddd\",\r\n          borderRadius: \"6px\",\r\n          fontWeight: \"bold\",\r\n          fontSize: \"12px\",\r\n          padding: \"5px 10px\",\r\n          margin: \"0 4px 4px 0\",\r\n          boxShadow: activeFilter === val ? \"0 2px 6px rgba(52,152,219,0.10)\" : \"none\",\r\n          transition: \"all 0.15s\",\r\n          cursor: \"pointer\",\r\n        }}\r\n      >\r\n        {val}\r\n      </button>\r\n    ))}\r\n    <button\r\n      onClick={() => handleButtonFilter(null)}\r\n      style={{\r\n        background: \"#b0c4de\", // blue-grey (LightSteelBlue)\r\n        color: \"#055A6E\",\r\n        border: \"1.5px solid #8fa6bc\",\r\n        borderRadius: \"6px\",\r\n        fontWeight: \"bold\",\r\n        fontSize: \"12px\",\r\n        padding: \"5px 10px\",\r\n        margin: \"0 4px 4px 0\",\r\n        boxShadow: \"0 2px 6px rgba(176,196,222,0.10)\",\r\n        transition: \"all 0.15s\",\r\n        cursor: \"pointer\",\r\n      }}\r\n    >\r\n      Clear\r\n    </button>\r\n  </div>\r\n)}\r\n\r\n\r\n          <AgGridReact\r\n            ref={gridRef}\r\n            rowData={rowData}\r\n            pinnedBottomRowData={subtotalsRow}\r\n            onFilterChanged={onFilterChanged}\r\n            getRowStyle={getRowStyle}\r\n            rowStyle={{ fontSize: 12, padding: 0 }}\r\n            headerHeight={30}\r\n            rowHeight={30}\r\n            onGridReady={onGridReady}\r\n            autoGroupColumnDef={autoGroupColumnDef}\r\n            animateRows={true}\r\n            suppressAggFuncInHeader={true}\r\n            getRowId={getRowId}\r\n            gridOptions={grid_options}\r\n            onCellValueChanged={onCellValueChanged}\r\n            columnTypes={columnTypes}\r\n            sideBar={grid_options.sideBar === false ? false : sideBar}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default AgGrid\r\n","import React, { useEffect, useState } from 'react'\nimport {\n  ComponentProps,\n  Streamlit,\n  withStreamlitConnection,\n} from 'streamlit-component-lib'\nimport 'ag-grid-community/styles/ag-grid.css'\n// import 'ag-grid-community/styles/ag-theme-alpine.css';\nimport 'ag-grid-community/styles/ag-theme-balham.css'\nimport Aggrid from './Aggrid'\n\nconst Main = (props: ComponentProps) => {\n  const {\n    username,\n    api,\n    api_update,\n    refresh_sec,\n    refresh_cutoff_sec,\n    gridoption_build,\n    enable_JsCode,\n    prod,\n  } = props.args\n  const { grid_options, kwargs = {} } = props.args\n  const { index, theme } = grid_options\n  // console.log('GridOptions', grid_options)\n  return (\n    <div>\n      <Aggrid\n        username={username}\n        api={api}\n        api_update={api_update}\n        refresh_sec={refresh_sec}\n        refresh_cutoff_sec={refresh_cutoff_sec}\n        gridoption_build={gridoption_build}\n        prod={prod}\n        grid_options={grid_options}\n        index={index}\n        kwargs={kwargs} \n        enable_JsCode={enable_JsCode}      />\n    </div>\n  )\n}\n\nexport default withStreamlitConnection(Main)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport Main from \"./Main\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}