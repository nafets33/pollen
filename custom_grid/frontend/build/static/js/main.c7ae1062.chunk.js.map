{"version":3,"sources":["components/Modal.tsx","Aggrid.tsx","Main.tsx","index.tsx"],"names":["modalStyle","top","left","right","bottom","marginRight","transform","backgroundColor","ReactModal","setAppElement","isExecuting","MyModal","_ref","isOpen","closeModal","modalData","promptText","setPromptText","toastr","prompt_field","prompt_order_rules","selectedRow","selectedField","ref","useRef","selectRef","console","log","handleOkSecond","async","formattedSellDate","format","Date","sell_date","body","username","prod","selected_row","default_value","kwargs","data","res","axios","post","button_api","status","description","message_type","success","alert","error","close_modal","message","useEffect","setTimeout","_ref$current","current","focus","formatToLocalDatetime","dateStr","date","timeZone","Intl","DateTimeFormat","resolvedOptions","zonedDate","utcToZonedTime","Array","isArray","React","createElement","className","style","display","prompt_message","onClick","name","id","defaultValue","map","item","value","type","_selectRef$current","_selectRef$current2","rule","index","key","checked","onChange","e","target","i","g_rowdata","g_newRowData","dateFormatter","isoString","formaterString","currencyFormatter","number","currencySymbol","n","Number","parseFloat","isNaN","toFixed","numberFormatter","precision","HyperlinkRenderer","props","href","concat","column","colDef","baseURL","options","positionClass","hideDuration","timeOut","AgGrid","BtnCellRenderer","btnClickedHandler","clicked","node","background","width","borderColor","col_header","buttonName","gridRef","api","api_update","refresh_sec","refresh_cutoff_sec","grid_options","buttons","toggle_views","rowData","setRowData","useState","modalShow","setModalshow","setModalData","viewId","setViewId","Streamlit","setFrameHeight","length","button","columnDefs","push","field","headerName","pinned","cellRenderer","cellRendererParams","row_index","find","row","str","JSON","parse","replace","rules_value","window","confirm","fetchAndSetData","array","fetchData","id_array","old_id_array","toUpdate","filter","includes","toRemove","toAdd","applyTransactionAsync","update","remove","add","onRefresh","toggle_view_selection","interval","setInterval","timeout","clearInterval","clearTimeout","useCallback","skipHeader","allColumnIds","columnApi","getColumns","forEach","getId","autoSizeColumns","sizeColumnsToFit","defaultMinWidth","onGridReady","autoGroupColumnDef","useMemo","minWidth","getRowId","params","onCellValueChanged","toolPanels","labelDefault","labelKey","iconKey","toolPanel","defaultToolPanel","event","columnTypes","dateColumnFilter","filterParams","comparator","filterValue","cellValue","compareAsc","numberColumnFilter","shortDateTimeFormat","valueFormatter","customDateTimeFormat","custom_format_string","customNumericFormat","_params$column$colDef2","customCurrencyFormat","custom_currency_symbol","timedeltaFormat","duration","humanize","customNumberFormat","toLocaleString","minimumFractionDigits","customHyperlinkRenderer","Fragment","flexDirection","height","undefined","margin","new_data","warning","view","theme","AgGridReact","getRowStyle","_params$data$color_ro","_params$data$color_ro2","color","rowStyle","fontSize","padding","headerHeight","rowHeight","animateRows","suppressAggFuncInHeader","gridOptions","withStreamlitConnection","gridoption_build","args","Aggrid","ReactDOM","render","StrictMode","Main","document","getElementById"],"mappings":"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","file":"static/js/main.c7ae1062.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\"\r\nimport ReactModal from \"react-modal\"\r\nimport \"./modal.css\"\r\nimport axios from \"axios\"\r\nimport DatePicker from 'react-datepicker'; // Import DatePicker component\r\nimport 'react-datepicker/dist/react-datepicker.css'; // Import DatePicker CSS\r\nimport {utcToZonedTime, format} from 'date-fns-tz';\r\n\r\nconst modalStyle = {\r\n  content: {\r\n    top: \"50%\",\r\n    left: \"50%\",\r\n    right: \"auto\",\r\n    bottom: \"auto\",\r\n    marginRight: \"-50%\",\r\n    transform: \"translate(-50%, -50%)\",\r\n    backgroundColor: \"yellow\",\r\n  },\r\n}\r\nReactModal.setAppElement(\"#root\")\r\nlet isExecuting = false\r\n\r\n\r\ninterface ModalData {\r\n  prompt_field: string;\r\n  prompt_order_rules?: string[];\r\n  selectedRow: any; // Define this type based on your data structure\r\n  selectedField?: string[];\r\n  button_api: string;\r\n  username: string;\r\n  prod: string;\r\n  prompt_message: string;\r\n  kwargs: Record<string, any>;\r\n}\r\n\r\ninterface MyModalProps {\r\n  isOpen: boolean;\r\n  closeModal: () => void;\r\n  modalData: any;\r\n  promptText: any;\r\n  setPromptText: (value: any) => void;\r\n  toastr: any; // Define the toastr type if available\r\n}\r\n\r\nconst MyModal: React.FC<MyModalProps> = ({\r\n  isOpen,\r\n  closeModal,\r\n  modalData,\r\n  promptText,\r\n  setPromptText,\r\n  toastr,\r\n}) => {\r\n  const { prompt_field, prompt_order_rules, selectedRow, selectedField } =\r\n    modalData\r\n\r\n  const ref = useRef<HTMLButtonElement>(null)\r\n  const selectRef = useRef<HTMLSelectElement>(null)\r\n\r\n  console.log(promptText);\r\n\r\n  const handleOk = async () => {\r\n    if (isExecuting) return\r\n    isExecuting = true\r\n    try {\r\n      const { data: res } = await axios.post(modalData.button_api, {\r\n        username: modalData.username,\r\n        prod: modalData.prod,\r\n        selected_row: modalData.selectedRow,\r\n        default_value: promptText,\r\n        ...modalData.kwargs,\r\n      })\r\n      const { status, data, description } = res\r\n      console.log(\"res :>> \", res)\r\n      if (status == \"success\") {\r\n        data.message_type == \"fade\"\r\n          ? toastr.success(description, \"Success\")\r\n          : alert(\"Success!\\nDescription: \" + description)\r\n      } else {\r\n        data.message_type == \"fade\"\r\n          ? toastr.error(description, \"Error\")\r\n          : alert(\"Error!\\nDescription: \" + description)\r\n      }\r\n      if (data?.close_modal != false) closeModal()\r\n    } catch (error: any) {\r\n      console.log(\"error :>> \", error)\r\n      toastr.error(error.message)\r\n    }\r\n    isExecuting = false\r\n  }\r\n\r\n  const handleOkSecond = async () => {\r\n    if (isExecuting) return\r\n    isExecuting = true\r\n    try {\r\n      const formattedSellDate = format(new Date(promptText.sell_date), 'MM/dd/yyyy');\r\n\r\n      const body = {\r\n        username: modalData.username,\r\n        prod: modalData.prod,\r\n        selected_row: modalData.selectedRow,\r\n        default_value: {\r\n          ...promptText,\r\n          sell_date: formattedSellDate\r\n        },\r\n        ...modalData.kwargs,\r\n      }\r\n      console.log(\"body :>> \", body)\r\n      const { data: res } = await axios.post(modalData.button_api, body)\r\n      const { status, data, description } = res\r\n      if (status == \"success\") {\r\n        data.message_type == \"fade\"\r\n          ? toastr.success(description, \"Success\")\r\n          : alert(\"Success!\\nDescription: \" + description)\r\n      } else {\r\n        data.message_type == \"fade\"\r\n          ? toastr.error(description, \"Error\")\r\n          : alert(\"Error!\\nDescription: \" + description)\r\n      }\r\n      if (data?.close_modal != false) closeModal()\r\n    } catch (error: any) {\r\n      console.log(\"error :>> \", error)\r\n      toastr.error(error.message)\r\n    }\r\n    isExecuting = false\r\n  }\r\n\r\n  const handleOkOnArray = async () => {\r\n    console.log(\"selectRef.current.value :>> \", selectRef.current?.value)\r\n    if (isExecuting) return\r\n    isExecuting = true\r\n    try {\r\n      const body = {\r\n        username: modalData.username,\r\n        prod: modalData.prod,\r\n        selected_row: modalData.selectedRow,\r\n        default_value: selectRef.current?.value,\r\n        ...modalData.kwargs,\r\n      }\r\n      console.log(\"body :>> \", body)\r\n      const { data: res } = await axios.post(modalData.button_api, body)\r\n      const { status, data, description } = res\r\n      console.log(\"res :>> \", res)\r\n      if (status == \"success\") {\r\n        data.message_type == \"fade\"\r\n          ? toastr.success(description, \"Success\")\r\n          : alert(\"Success!\\nDescription: \" + description)\r\n      } else {\r\n        data.message_type == \"fade\"\r\n          ? toastr.error(description, \"Error\")\r\n          : alert(\"Error!\\nDescription: \" + description)\r\n      }\r\n      if (data?.close_modal != false) closeModal()\r\n    } catch (error: any) {\r\n      console.log(\"error :>> \", error)\r\n      toastr.error(error.message)\r\n    }\r\n    isExecuting = false\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (isOpen) setTimeout(() => ref.current?.focus(), 100)\r\n  }, [isOpen])\r\n\r\n  const formatToLocalDatetime = (dateStr: string) => {\r\n    const date = new Date(dateStr);\r\n    const timeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\r\n    const zonedDate = utcToZonedTime(date, timeZone);\r\n    return format(zonedDate, 'yyyy-MM-dd\\'T\\'HH:mm');\r\n  };\r\n\r\n  if (Array.isArray(selectedField))\r\n    return (\r\n      <div className=\"my-modal\" style={{ ...modalStyle.content, display: isOpen ? \"block\" : \"none\" }}>\r\n        <div className=\"my-modal-content\">\r\n          <div className=\"modal-header px-4\">\r\n            <h4>{modalData.prompt_message}</h4>\r\n            <span className=\"close\" onClick={closeModal}>\r\n              &times;\r\n            </span>\r\n          </div>\r\n          <div className=\"modal-body p-2\">\r\n            <label className=\"px-1\">{prompt_field} </label>\r\n            <select\r\n              name=\"cars\"\r\n              id=\"cars\"\r\n              defaultValue={selectedField[0]}\r\n              ref={selectRef}\r\n            >\r\n              {selectedField.map((item) => (\r\n                <option value={item}>{item}</option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          <div className=\"modal-footer\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-primary\"\r\n              onClick={handleOkOnArray}\r\n              ref={ref}\r\n            >\r\n              Ok\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-secondary\"\r\n              onClick={closeModal}\r\n            >\r\n              Cancel\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n\r\n\r\n  if (prompt_order_rules) {\r\n    // console.log(typeof promptText[rule]); // Check the type of promptText[rule]\r\n    // console.log(promptText[rule]); // Inspect the value of promptText[rule]\r\n    // Initialize arrays for each datatype\r\n    return (\r\n      <div className=\"my-modal\" style={{ display: isOpen ? \"block\" : \"none\" }}>\r\n        <div className=\"my-modal-content\">\r\n          <div className=\"modal-header px-4\">\r\n            <h4>{modalData.prompt_message}</h4>\r\n            <span className=\"close\" onClick={closeModal}>\r\n              &times;\r\n            </span>\r\n          </div>\r\n          <div className=\"modal-body p-2\">\r\n            <div className=\"d-flex flex-column\">\r\n              {prompt_order_rules.map((rule: any, index: number) => (\r\n                <div className=\"d-flex flex-row justify-content-end\" key={index}>\r\n                  <label className=\"d-flex flex-row\">\r\n                    {rule + \": \"}\r\n                    {typeof promptText[rule] === \"boolean\" ? (\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        checked={promptText[rule]}\r\n                        onChange={(e) =>\r\n                          setPromptText({\r\n                            ...promptText,\r\n                            [rule]: e.target.checked,\r\n                          })\r\n                        }\r\n                      />\r\n                    ) : Array.isArray(promptText[rule]) ? (\r\n                      <select\r\n                        value={promptText[rule][0]} // Assuming the first option is selected by default\r\n                        onChange={(e) =>\r\n                          setPromptText({\r\n                            ...promptText,\r\n                            [rule]: [e.target.value],\r\n                          })\r\n                        }\r\n                      >\r\n                        {promptText[rule].map((item: any, i: number) => (\r\n                          <option key={i} value={item}>\r\n                            {item}\r\n                          </option>\r\n                        ))}\r\n                      </select>\r\n                    ) : rule === \"sell_date\" ? (\r\n                      <input\r\n                        type=\"datetime-local\"\r\n                        value={promptText[rule] && formatToLocalDatetime(promptText[rule])}\r\n                        onChange={(e) =>\r\n                          setPromptText({\r\n                            ...promptText,\r\n                            [rule]: e.target.value,\r\n                          })\r\n                        }\r\n                      />\r\n                    ) : (\r\n                      <input\r\n                        type=\"text\"\r\n                        value={promptText[rule]}\r\n                        onChange={(e) =>\r\n                          setPromptText({\r\n                            ...promptText,\r\n                            [rule]: e.target.value,\r\n                          })\r\n                        }\r\n                      />\r\n                    )}\r\n                  </label>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n          <div className=\"modal-footer\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-primary\"\r\n              onClick={handleOkSecond}\r\n              ref={ref}\r\n            >\r\n              Ok\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-secondary\"\r\n              onClick={closeModal}\r\n            >\r\n              Cancel\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nexport default MyModal;\r\n","import React, {\r\n  useState,\r\n  useEffect,\r\n  useMemo,\r\n  useRef,\r\n  useCallback\r\n} from \"react\"\r\nimport { AgGridReact } from \"ag-grid-react\"\r\nimport { RowClassParams } from 'ag-grid-community';\r\n\r\nimport toastr from \"toastr\"\r\nimport \"toastr/build/toastr.min.css\"\r\nimport \"ag-grid-community/styles/ag-grid.css\"\r\nimport \"ag-grid-community/styles/ag-theme-alpine.css\"\r\nimport \"ag-grid-community/styles/ag-theme-balham.css\"\r\nimport \"ag-grid-community/styles/ag-theme-material.css\"\r\nimport MyModal from './components/Modal'\r\nimport \"ag-grid-enterprise\"\r\nimport { parseISO, compareAsc } from \"date-fns\"\r\nimport { format } from \"date-fns-tz\"\r\nimport { duration } from \"moment\"\r\nimport \"./styles.css\"\r\nimport axios from \"axios\"\r\nimport {\r\n  Streamlit,\r\n} from \"streamlit-component-lib\"\r\nimport {\r\n  ColDef,\r\n  GetRowIdFunc,\r\n  GetRowIdParams,\r\n  GridReadyEvent,\r\n  SideBarDef,\r\n} from \"ag-grid-community\"\r\n\r\ntype Props = {\r\n  username: string\r\n  api: string\r\n  api_update: string\r\n  refresh_sec?: number\r\n  refresh_cutoff_sec?: number\r\n  gridoption_build?: any\r\n  prod?: boolean\r\n  grid_options?: any\r\n  index: string\r\n  kwargs: any\r\n}\r\n\r\nlet g_rowdata: any[] = []\r\nlet g_newRowData: any = null\r\n\r\nfunction dateFormatter(isoString: string, formaterString: string): String {\r\n  try {\r\n    let date = new Date(isoString)\r\n    return format(date, formaterString)\r\n  } catch {\r\n    return isoString\r\n  } finally {\r\n  }\r\n}\r\n\r\nfunction currencyFormatter(number: any, currencySymbol: string): String {\r\n  let n = Number.parseFloat(number)\r\n  if (!Number.isNaN(n)) {\r\n    return currencySymbol + n.toFixed(2)\r\n  } else {\r\n    return number\r\n  }\r\n}\r\n\r\nfunction numberFormatter(number: any, precision: number): String {\r\n  let n = Number.parseFloat(number)\r\n  if (!Number.isNaN(n)) {\r\n    return n.toFixed(precision)\r\n  } else {\r\n    return number\r\n  }\r\n}\r\n\r\nconst columnFormaters = {\r\n  columnTypes: {\r\n    dateColumnFilter: {\r\n      filter: \"agDateColumnFilter\",\r\n      filterParams: {\r\n        comparator: (filterValue: any, cellValue: string) =>\r\n          compareAsc(parseISO(cellValue), filterValue),\r\n      },\r\n    },\r\n    numberColumnFilter: {\r\n      filter: \"agNumberColumnFilter\",\r\n    },\r\n    shortDateTimeFormat: {\r\n      valueFormatter: (params: any) =>\r\n        dateFormatter(params.value, \"dd/MM/yyyy HH:mm\"),\r\n    },\r\n    customDateTimeFormat: {\r\n      valueFormatter: (params: any) =>\r\n        dateFormatter(params.value, params.column.colDef.custom_format_string),\r\n    },\r\n    customNumericFormat: {\r\n      valueFormatter: (params: any) =>\r\n        numberFormatter(params.value, params.column.colDef.precision ?? 2),\r\n    },\r\n    customCurrencyFormat: {\r\n      valueFormatter: (params: any) =>\r\n        currencyFormatter(\r\n          params.value,\r\n          params.column.colDef.custom_currency_symbol\r\n        ),\r\n    },\r\n    timedeltaFormat: {\r\n      valueFormatter: (params: any) => duration(params.value).humanize(true),\r\n    },\r\n  },\r\n}\r\n\r\nconst HyperlinkRenderer = (props: any) => {\r\n  return (\r\n    <a\r\n      href={`${props.column.colDef.baseURL}/${\r\n        props.data[props.column.colDef[\"linkField\"]]\r\n      }`}\r\n      target=\"_blank\"\r\n    >\r\n      {props.value}\r\n    </a>\r\n  )\r\n}\r\n\r\ntoastr.options = {\r\n  positionClass: \"toast-top-full-width\",\r\n  hideDuration: 300,\r\n  timeOut: 3000,\r\n}\r\n\r\nconst AgGrid = (props: Props) => {\r\n  const BtnCellRenderer = (props: any) => {\r\n    const btnClickedHandler = () => {\r\n      props.clicked(props.node.id)\r\n    }\r\n    return (\r\n      <button\r\n        onClick={btnClickedHandler}\r\n        style={{\r\n          background: \"transparent\",\r\n          width: \"100%\",\r\n          borderColor: props.borderColor ? props.borderColor : \"black\",\r\n        }}\r\n      >\r\n        {props.col_header ? props.value : props.buttonName}\r\n      </button>\r\n    )\r\n  }\r\n\r\n  const gridRef = useRef<AgGridReact>(null)\r\n  const {\r\n    username,\r\n    api,\r\n    api_update,\r\n    refresh_sec = undefined,\r\n    refresh_cutoff_sec = 0,\r\n    prod = true,\r\n    index,\r\n    kwargs,\r\n  } = props\r\n  let { grid_options = {} } = props\r\n  const { buttons, toggle_views } = kwargs\r\n  const [rowData, setRowData] = useState<any[]>([])\r\n  const [modalShow, setModalshow] = useState(false)\r\n  const [modalData, setModalData] = useState({})\r\n  const [promptText, setPromptText] = useState(\"\")\r\n  const [viewId, setViewId] = useState(0)\r\n\r\n  useEffect(() => {\r\n    Streamlit.setFrameHeight()\r\n    if (buttons.length) {\r\n      buttons.map((button: any) => {\r\n        const { prompt_field, prompt_message, button_api, prompt_order_rules } =\r\n          button\r\n        grid_options.columnDefs!.push({\r\n          field: button[\"col_header\"] ? button[\"col_header\"] : index,\r\n          headerName: button[\"col_headername\"],\r\n          width: button[\"col_width\"],\r\n          pinned: button[\"pinned\"],\r\n          cellRenderer: BtnCellRenderer,\r\n          cellRendererParams: {\r\n            col_header: button[\"col_header\"],\r\n            buttonName: button[\"button_name\"],\r\n            borderColor: button[\"border_color\"],\r\n            clicked: async function (row_index: any) {\r\n              try {\r\n                const selectedRow = g_rowdata.find(\r\n                  (row) => row[index] == row_index\r\n                )\r\n                if (prompt_order_rules) {\r\n                  const str = selectedRow[prompt_field]\r\n                  const selectedField =\r\n                    typeof str === \"string\"\r\n                      ? JSON.parse(\r\n                          selectedRow[prompt_field]\r\n                            .replace(/'/g, '\"')\r\n                            .replace(/\\n/g, \"\")\r\n                            .replace(/\\s/g, \"\")\r\n                            .replace(/False/g, \"false\")\r\n                            .replace(/True/g, \"true\")\r\n                        )\r\n                      : str\r\n                  setModalshow(true)\r\n                  setModalData({\r\n                    prompt_message,\r\n                    button_api: button_api,\r\n                    username: username,\r\n                    prod: prod,\r\n                    selectedRow: selectedRow,\r\n                    kwargs: kwargs,\r\n                    prompt_field,\r\n                    prompt_order_rules,\r\n                    selectedField,\r\n                  })\r\n                  const rules_value: any = {}\r\n                  prompt_order_rules.map((rule: string) => {\r\n                    rules_value[rule] = selectedField[rule]\r\n                  })\r\n                  setPromptText(rules_value)\r\n                } else if (prompt_field && prompt_message) {\r\n                  setModalshow(true)\r\n                  setModalData({\r\n                    prompt_message,\r\n                    button_api: button_api,\r\n                    username: username,\r\n                    prod: prod,\r\n                    selectedRow: selectedRow,\r\n                    kwargs: kwargs,\r\n                  })\r\n                  setPromptText(selectedRow[prompt_field])\r\n                  // const num = prompt(prompt_message, selectedRow[prompt_field]);\r\n                  // if (num == null) return;\r\n                  // const res = await axios.post(button_api, {\r\n                  //   username: username,\r\n                  //   prod: prod,\r\n                  //   selected_row: selectedRow,\r\n                  //   default_value: num,\r\n                  //   ...kwargs,\r\n                  // })\r\n                } else {\r\n                  if (window.confirm(prompt_message)) {\r\n                    const res = await axios.post(button_api, {\r\n                      username: username,\r\n                      prod: prod,\r\n                      selected_row: selectedRow,\r\n                      ...kwargs,\r\n                    })\r\n                  }\r\n                  toastr.success(\"Success!\")\r\n                }\r\n              } catch (error) {\r\n                alert(`${error}`)\r\n              }\r\n            },\r\n          },\r\n        })\r\n      })\r\n    }\r\n    // parseGridoptions()\r\n  })\r\n\r\n  const fetchAndSetData = async () => {\r\n    const array = await fetchData()\r\n    if (array === false) return false\r\n    const api = gridRef.current!.api\r\n    const id_array = array.map((item: any) => item[index])\r\n    const old_id_array = g_rowdata.map((item: any) => item[index])\r\n    const toUpdate = array.filter((row: any) => id_array.includes(row[index]))\r\n    const toRemove = g_rowdata.filter((row) => !id_array.includes(row[index]))\r\n    const toAdd = array.filter((row: any) => !old_id_array.includes(row[index]))\r\n    api.applyTransactionAsync({\r\n      update: toUpdate,\r\n      remove: toRemove,\r\n      add: toAdd,\r\n    })\r\n    g_rowdata = array\r\n    return true\r\n  }\r\n\r\n  useEffect(() => {\r\n    onRefresh()\r\n  }, [viewId])\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const res = await axios.post(api, {\r\n        username: username,\r\n        prod: prod,\r\n        ...kwargs,\r\n        toggle_view_selection: toggle_views ? toggle_views[viewId] : \"none\",\r\n      })\r\n      const array = JSON.parse(res.data)\r\n      console.log(\r\n        \"toggle_views[viewId],viewId :>> \",\r\n        toggle_views[viewId],\r\n        viewId\r\n      )\r\n      console.log(\"table data :>> \", array)\r\n      if (array.status == false) {\r\n        toastr.error(`Fetch Error: ${array.message}`)\r\n        return false\r\n      }\r\n      return array\r\n    } catch (error: any) {\r\n      toastr.error(`Fetch Error: ${error.message}`)\r\n      return false\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (refresh_sec && refresh_sec > 0) {\r\n      const interval = setInterval(fetchAndSetData, refresh_sec * 1000)\r\n      let timeout: NodeJS.Timeout\r\n      if (refresh_cutoff_sec > 0) {\r\n        console.log(refresh_cutoff_sec)\r\n        timeout = setTimeout(() => {\r\n          clearInterval(interval)\r\n          console.log(\"Fetching data ended, refresh rate:\", refresh_sec)\r\n        }, refresh_cutoff_sec * 1000)\r\n      }\r\n      console.error(\"rendered==========\", props)\r\n      return () => {\r\n        clearInterval(interval)\r\n        if (timeout) clearTimeout(timeout)\r\n      }\r\n    }\r\n  }, [props, viewId])\r\n\r\n  const autoSizeAll = useCallback((skipHeader: boolean) => {\r\n    const allColumnIds: string[] = []\r\n    gridRef.current!.columnApi.getColumns()!.forEach((column: any) => {\r\n      allColumnIds.push(column.getId())\r\n    })\r\n    gridRef.current!.columnApi.autoSizeColumns(allColumnIds, skipHeader)\r\n  }, [])\r\n\r\n  const sizeToFit = useCallback(() => {\r\n    gridRef.current!.api.sizeColumnsToFit({\r\n      defaultMinWidth: 100,\r\n    })\r\n  }, [])\r\n\r\n  const onGridReady = useCallback(async (params: GridReadyEvent) => {\r\n    setTimeout(async () => {\r\n      try {\r\n        const array = await fetchData()\r\n        // console.log(\"AAAAAAAAAAAAAAAAAAAAAAA\", array)\r\n        if (array == false) {\r\n          // toastr.error(`Error: ${array.message}`)\r\n          return\r\n        }\r\n        setRowData(array)\r\n        g_rowdata = array\r\n      } catch (error: any) {\r\n        toastr.error(`Error: ${error.message}`)\r\n      }\r\n    }, 100)\r\n  }, [])\r\n\r\n  const autoGroupColumnDef = useMemo<ColDef>(() => {\r\n    return {\r\n      minWidth: 200,\r\n    }\r\n  }, [])\r\n\r\n  const getRowId = useMemo<GetRowIdFunc>(() => {\r\n    return (params: GetRowIdParams) => {\r\n      return params.data[index]\r\n    }\r\n  }, [index])\r\n\r\n  const sideBar = useMemo<\r\n    SideBarDef | string | string[] | boolean | null\r\n  >(() => {\r\n    return {\r\n      toolPanels: [\r\n        {\r\n          id: \"columns\",\r\n          labelDefault: \"Columns\",\r\n          labelKey: \"columns\",\r\n          iconKey: \"columns\",\r\n          toolPanel: \"agColumnsToolPanel\",\r\n        },\r\n        {\r\n          id: \"filters\",\r\n          labelDefault: \"Filters\",\r\n          labelKey: \"filters\",\r\n          iconKey: \"filter\",\r\n          toolPanel: \"agFiltersToolPanel\",\r\n        },\r\n      ],\r\n      defaultToolPanel: \"customStats\",\r\n    }\r\n  }, [])\r\n\r\n  const onCellValueChanged = useCallback((event) => {\r\n    if (g_newRowData == null) g_newRowData = {}\r\n    g_newRowData[event.data[index]] = event.data\r\n    console.log(\"Data after change is\", g_newRowData)\r\n  }, [])\r\n\r\n  const onRefresh = async () => {\r\n    try {\r\n      const success = await fetchAndSetData()\r\n      success && toastr.success(\"Refresh success!\")\r\n    } catch (error: any) {\r\n      toastr.error(`Refresh Failed! ${error.message}`)\r\n    }\r\n  }\r\n\r\n  const onUpdate = async () => {\r\n    if (g_newRowData == null) {\r\n      toastr.warning(`No changes to update`)\r\n      return\r\n    }\r\n    try {\r\n      const res: any = await axios.post(api_update, {\r\n        username: username,\r\n        prod: prod,\r\n        new_data: g_newRowData,\r\n        ...kwargs,\r\n      })\r\n      g_newRowData = null\r\n      if (res.status) toastr.success(`Successfully Updated! `)\r\n      else toastr.error(`Failed! ${res.message}`)\r\n    } catch (error) {\r\n      toastr.error(`Failed! ${error}`)\r\n    }\r\n  }\r\n\r\n  const columnTypes = useMemo<any>(() => {\r\n    return {\r\n      dateColumnFilter: {\r\n        filter: \"agDateColumnFilter\",\r\n        filterParams: {\r\n          comparator: (filterValue: any, cellValue: string) =>\r\n            compareAsc(new Date(cellValue), filterValue),\r\n        },\r\n      },\r\n      numberColumnFilter: {\r\n        filter: \"agNumberColumnFilter\",\r\n      },\r\n      shortDateTimeFormat: {\r\n        valueFormatter: (params: any) =>\r\n          dateFormatter(params.value, \"dd/MM/yyyy HH:mm\"),\r\n      },\r\n      customDateTimeFormat: {\r\n        valueFormatter: (params: any) =>\r\n          dateFormatter(\r\n            params.value,\r\n            params.column.colDef.custom_format_string\r\n          ),\r\n      },\r\n      customNumericFormat: {\r\n        valueFormatter: (params: any) =>\r\n          numberFormatter(params.value, params.column.colDef.precision ?? 2),\r\n      },\r\n      customCurrencyFormat: {\r\n        valueFormatter: (params: any) =>\r\n          currencyFormatter(\r\n            params.value,\r\n            params.column.colDef.custom_currency_symbol\r\n          ),\r\n      },\r\n      timedeltaFormat: {\r\n        valueFormatter: (params: any) => duration(params.value).humanize(true),\r\n      },\r\n      customNumberFormat: {\r\n        valueFormatter: (params: any) =>\r\n          Number(params.value).toLocaleString(\"en-US\", {\r\n            minimumFractionDigits: 0,\r\n          }),\r\n      },\r\n      customHyperlinkRenderer: {\r\n        // valueGetter: (params: any) =>\r\n        //   params.column.colDef.baseURL + params.data.honey,\r\n        cellRenderer: HyperlinkRenderer,\r\n        cellRendererParams: {\r\n          baseURL: \"URLSearchParams.co\",\r\n        },\r\n      },\r\n    }\r\n  }, [])\r\n\r\n  const onClick = () => {\r\n    toastr.clear()\r\n    setTimeout(() => toastr.success(`Settings updated `), 300)\r\n  }\r\n\r\n  type RowStyle = {\r\n    background?: string;\r\n    color?: string;\r\n  };\r\n\r\n  function parseJsCodeFromPython(v: string) {\r\n    const JS_PLACEHOLDER = \"::JSCODE::\"\r\n    let funcReg = new RegExp(\r\n      `${JS_PLACEHOLDER}\\\\s*((function|class)\\\\s*.*)\\\\s*${JS_PLACEHOLDER}`\r\n    )\r\n  \r\n    let match = funcReg.exec(v)\r\n  \r\n    if (match) {\r\n  \r\n      const funcStr = match[1]\r\n      // eslint-disable-next-line\r\n      return new Function(\"return \" + funcStr)()\r\n    } else {\r\n      return v\r\n    }\r\n  }\r\n\r\n  const getRowStyle = (params: RowClassParams<any>): RowStyle | undefined => {\r\n    try {\r\n      const background = params.data[\"color_row\"] ?? undefined;\r\n      const color = params.data[\"color_row_text\"] ?? undefined;\r\n      return { background, color };\r\n    } catch (error) {\r\n      console.error(\"Error accessing row style:\", error);\r\n      return undefined; // Return undefined when an error occurs\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <>\r\n      <MyModal\r\n        isOpen={modalShow}\r\n        closeModal={() => setModalshow(false)}\r\n        modalData={modalData}\r\n        promptText={promptText}\r\n        setPromptText={setPromptText}\r\n        toastr={toastr}\r\n      />\r\n      <div\r\n        style={{ flexDirection: \"row\", height: \"100%\", width: \"100\" }}\r\n        id=\"myGrid\"\r\n      >\r\n        <div className=\"d-flex justify-content-between align-items-center\">\r\n          {(refresh_sec == undefined || refresh_sec == 0) && (\r\n            <div style={{ display: \"flex\" }}>\r\n              <div style={{ margin: \"10px 10px 10px 2px\" }}>\r\n                <button className=\"btn btn-warning\" onClick={onRefresh}>\r\n                  Refresh\r\n                </button>\r\n              </div>\r\n              <div style={{ margin: \"10px 10px 10px 2px\" }}>\r\n                <button className=\"btn btn-success\" onClick={onUpdate}>\r\n                  Update\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )}\r\n          <div className=\"d-flex flex-row gap-6\">\r\n            {toggle_views?.map((view: string, index: number) => (\r\n              <span className=\"\">\r\n                <button\r\n                  className={`btn ${\r\n                    viewId == index ? \"btn-danger\" : \"btn-secondary\"\r\n                  }`}\r\n                  onClick={() => setViewId(index)}\r\n                >\r\n                  {view}\r\n                </button>\r\n              </span>\r\n            ))}\r\n          </div>\r\n        </div>\r\n        <div\r\n          className={grid_options.theme || \"ag-theme-alpine-dark\"}\r\n          style={{\r\n            width: \"100%\",\r\n            height: kwargs[\"grid_height\"] ? kwargs[\"grid_height\"] : \"100%\",\r\n          }}\r\n        >\r\n          <AgGridReact\r\n            ref={gridRef}\r\n            rowData={rowData}\r\n            // defaultColDef={defaultColDef}\r\n            getRowStyle={getRowStyle}\r\n            rowStyle={{ fontSize: 12, padding: 0 }}\r\n            headerHeight={30}\r\n            rowHeight={30}\r\n            onGridReady={onGridReady}\r\n            autoGroupColumnDef={autoGroupColumnDef}\r\n            // sideBar={sideBar}\r\n            animateRows={true}\r\n            suppressAggFuncInHeader={true}\r\n            getRowId={getRowId}\r\n            gridOptions={grid_options}\r\n            onCellValueChanged={onCellValueChanged}\r\n            columnTypes={columnTypes}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default AgGrid\r\n","import React, { useEffect, useState } from 'react'\r\nimport {\r\n  ComponentProps,\r\n  Streamlit,\r\n  withStreamlitConnection,\r\n} from 'streamlit-component-lib'\r\nimport 'ag-grid-community/styles/ag-grid.css'\r\n// import 'ag-grid-community/styles/ag-theme-alpine.css';\r\nimport 'ag-grid-community/styles/ag-theme-balham.css'\r\nimport Aggrid from './Aggrid'\r\n\r\nconst Main = (props: ComponentProps) => {\r\n  const {\r\n    username,\r\n    api,\r\n    api_update,\r\n    refresh_sec,\r\n    refresh_cutoff_sec,\r\n    gridoption_build,\r\n    prod,\r\n  } = props.args\r\n  const { grid_options, kwargs = {} } = props.args\r\n  const { index, theme } = grid_options\r\n  console.log('AAAAAAAA', grid_options)\r\n  return (\r\n    <div>\r\n      <Aggrid\r\n        username={username}\r\n        api={api}\r\n        api_update={api_update}\r\n        refresh_sec={refresh_sec}\r\n        refresh_cutoff_sec={refresh_cutoff_sec}\r\n        gridoption_build={gridoption_build}\r\n        prod={prod}\r\n        grid_options={grid_options}\r\n        index={index}\r\n        kwargs={kwargs}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default withStreamlitConnection(Main)\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport Main from \"./Main\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Main />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)\r\n"],"sourceRoot":""}